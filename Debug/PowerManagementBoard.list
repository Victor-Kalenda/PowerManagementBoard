
PowerManagementBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046ec  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b0  080047ac  080047ac  000057ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a5c  08004a5c  00006024  2**0
                  CONTENTS
  4 .ARM          00000000  08004a5c  08004a5c  00006024  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004a5c  08004a5c  00006024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a5c  08004a5c  00005a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004a60  08004a60  00005a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000024  20000000  08004a64  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000041c  20000024  08004a88  00006024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000440  08004a88  00006440  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00006024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bde7  00000000  00000000  0000604c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ed5  00000000  00000000  00011e33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008f0  00000000  00000000  00013d08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006ea  00000000  00000000  000145f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014acb  00000000  00000000  00014ce2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bc5f  00000000  00000000  000297ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008077f  00000000  00000000  0003540c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b5b8b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f2c  00000000  00000000  000b5bd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  000b7afc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000024 	.word	0x20000024
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004794 	.word	0x08004794

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000028 	.word	0x20000028
 8000104:	08004794 	.word	0x08004794

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003f4:	b590      	push	{r4, r7, lr}
 80003f6:	b083      	sub	sp, #12
 80003f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003fa:	f000 ff54 	bl	80012a6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003fe:	f000 f869 	bl	80004d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000402:	f000 f913 	bl	800062c <MX_GPIO_Init>
  MX_DMA_Init();
 8000406:	f000 f8f3 	bl	80005f0 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800040a:	f000 f8a1 	bl	8000550 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  if(modbus_set_rx() != HAL_OK)
 800040e:	f000 fd0f 	bl	8000e30 <modbus_set_rx>
 8000412:	1e03      	subs	r3, r0, #0
 8000414:	d001      	beq.n	800041a <main+0x26>
  {
	  Error_Handler();
 8000416:	f000 f943 	bl	80006a0 <Error_Handler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if(modbus_rx())
 800041a:	f000 fcf3 	bl	8000e04 <modbus_rx>
 800041e:	1e03      	subs	r3, r0, #0
 8000420:	d0fb      	beq.n	800041a <main+0x26>
	  {
		  int8_t status = 0;
 8000422:	1dfb      	adds	r3, r7, #7
 8000424:	2200      	movs	r2, #0
 8000426:	701a      	strb	r2, [r3, #0]
		  if(get_rx_buffer(0) == holding_register_database[0]) // Check Slave ID
 8000428:	2000      	movs	r0, #0
 800042a:	f000 fa2b 	bl	8000884 <get_rx_buffer>
 800042e:	0003      	movs	r3, r0
 8000430:	001a      	movs	r2, r3
 8000432:	4b27      	ldr	r3, [pc, #156]	@ (80004d0 <main+0xdc>)
 8000434:	881b      	ldrh	r3, [r3, #0]
 8000436:	429a      	cmp	r2, r3
 8000438:	d11b      	bne.n	8000472 <main+0x7e>
		  {
			  switch(get_rx_buffer(1))
 800043a:	2001      	movs	r0, #1
 800043c:	f000 fa22 	bl	8000884 <get_rx_buffer>
 8000440:	0003      	movs	r3, r0
 8000442:	2b03      	cmp	r3, #3
 8000444:	d002      	beq.n	800044c <main+0x58>
 8000446:	2b10      	cmp	r3, #16
 8000448:	d006      	beq.n	8000458 <main+0x64>
 800044a:	e00b      	b.n	8000464 <main+0x70>
			  {
				  case 0x03:
				  {
					  // Return holding registers
					  status = return_holding_registers();
 800044c:	1dfc      	adds	r4, r7, #7
 800044e:	f000 fa51 	bl	80008f4 <return_holding_registers>
 8000452:	0003      	movs	r3, r0
 8000454:	7023      	strb	r3, [r4, #0]
					  break;
 8000456:	e034      	b.n	80004c2 <main+0xce>
				  }
				  case 0x10:
				  {
					  // Write holding registers
					  status = edit_multiple_registers();
 8000458:	1dfc      	adds	r4, r7, #7
 800045a:	f000 fae7 	bl	8000a2c <edit_multiple_registers>
 800045e:	0003      	movs	r3, r0
 8000460:	7023      	strb	r3, [r4, #0]
					  break;
 8000462:	e02e      	b.n	80004c2 <main+0xce>
				  }
				  default:
				  {
					  status = modbus_exception(MB_ILLEGAL_FUNCTION);
 8000464:	1dfc      	adds	r4, r7, #7
 8000466:	2004      	movs	r0, #4
 8000468:	f000 fbce 	bl	8000c08 <modbus_exception>
 800046c:	0003      	movs	r3, r0
 800046e:	7023      	strb	r3, [r4, #0]
					  break;
 8000470:	e027      	b.n	80004c2 <main+0xce>
			  {
				  // log error in a queue
			  }
		  }
		  // Special case where you retrieve the modbus ID
		  else if((get_rx_buffer(0) == 0xFF) && // modbus_id = 0xFF = 255
 8000472:	2000      	movs	r0, #0
 8000474:	f000 fa06 	bl	8000884 <get_rx_buffer>
 8000478:	0003      	movs	r3, r0
 800047a:	2bff      	cmp	r3, #255	@ 0xff
 800047c:	d121      	bne.n	80004c2 <main+0xce>
			(get_rx_buffer(1) == 0x03) && // Function code = read_holding_registers
 800047e:	2001      	movs	r0, #1
 8000480:	f000 fa00 	bl	8000884 <get_rx_buffer>
 8000484:	0003      	movs	r3, r0
		  else if((get_rx_buffer(0) == 0xFF) && // modbus_id = 0xFF = 255
 8000486:	2b03      	cmp	r3, #3
 8000488:	d11b      	bne.n	80004c2 <main+0xce>
			(((get_rx_buffer(2) << 8) | get_rx_buffer(3)) == 0x00) && // Address to read = 0
 800048a:	2002      	movs	r0, #2
 800048c:	f000 f9fa 	bl	8000884 <get_rx_buffer>
 8000490:	0003      	movs	r3, r0
 8000492:	021c      	lsls	r4, r3, #8
 8000494:	2003      	movs	r0, #3
 8000496:	f000 f9f5 	bl	8000884 <get_rx_buffer>
 800049a:	0003      	movs	r3, r0
 800049c:	4323      	orrs	r3, r4
			(get_rx_buffer(1) == 0x03) && // Function code = read_holding_registers
 800049e:	d110      	bne.n	80004c2 <main+0xce>
			(((get_rx_buffer(4) << 8) | get_rx_buffer(5)) == 1)) // # of registers to read = 1
 80004a0:	2004      	movs	r0, #4
 80004a2:	f000 f9ef 	bl	8000884 <get_rx_buffer>
 80004a6:	0003      	movs	r3, r0
 80004a8:	021c      	lsls	r4, r3, #8
 80004aa:	2005      	movs	r0, #5
 80004ac:	f000 f9ea 	bl	8000884 <get_rx_buffer>
 80004b0:	0003      	movs	r3, r0
 80004b2:	4323      	orrs	r3, r4
			(((get_rx_buffer(2) << 8) | get_rx_buffer(3)) == 0x00) && // Address to read = 0
 80004b4:	2b01      	cmp	r3, #1
 80004b6:	d104      	bne.n	80004c2 <main+0xce>
		  {

			  status = return_holding_registers();
 80004b8:	1dfc      	adds	r4, r7, #7
 80004ba:	f000 fa1b 	bl	80008f4 <return_holding_registers>
 80004be:	0003      	movs	r3, r0
 80004c0:	7023      	strb	r3, [r4, #0]
			  if(status != 0)
			  {
				  // log error in a queue
			  }
		  }
		  status = modbus_set_rx();
 80004c2:	1dfc      	adds	r4, r7, #7
 80004c4:	f000 fcb4 	bl	8000e30 <modbus_set_rx>
 80004c8:	0003      	movs	r3, r0
 80004ca:	7023      	strb	r3, [r4, #0]
	  if(modbus_rx())
 80004cc:	e7a5      	b.n	800041a <main+0x26>
 80004ce:	46c0      	nop			@ (mov r8, r8)
 80004d0:	20000000 	.word	0x20000000

080004d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004d4:	b590      	push	{r4, r7, lr}
 80004d6:	b08f      	sub	sp, #60	@ 0x3c
 80004d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004da:	2418      	movs	r4, #24
 80004dc:	193b      	adds	r3, r7, r4
 80004de:	0018      	movs	r0, r3
 80004e0:	2320      	movs	r3, #32
 80004e2:	001a      	movs	r2, r3
 80004e4:	2100      	movs	r1, #0
 80004e6:	f004 f91f 	bl	8004728 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004ea:	1d3b      	adds	r3, r7, #4
 80004ec:	0018      	movs	r0, r3
 80004ee:	2314      	movs	r3, #20
 80004f0:	001a      	movs	r2, r3
 80004f2:	2100      	movs	r1, #0
 80004f4:	f004 f918 	bl	8004728 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80004f8:	193b      	adds	r3, r7, r4
 80004fa:	2201      	movs	r2, #1
 80004fc:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004fe:	193b      	adds	r3, r7, r4
 8000500:	2280      	movs	r2, #128	@ 0x80
 8000502:	0252      	lsls	r2, r2, #9
 8000504:	605a      	str	r2, [r3, #4]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000506:	193b      	adds	r3, r7, r4
 8000508:	0018      	movs	r0, r3
 800050a:	f001 fced 	bl	8001ee8 <HAL_RCC_OscConfig>
 800050e:	1e03      	subs	r3, r0, #0
 8000510:	d001      	beq.n	8000516 <SystemClock_Config+0x42>
  {
    Error_Handler();
 8000512:	f000 f8c5 	bl	80006a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000516:	1d3b      	adds	r3, r7, #4
 8000518:	2207      	movs	r2, #7
 800051a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800051c:	1d3b      	adds	r3, r7, #4
 800051e:	2201      	movs	r2, #1
 8000520:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000522:	1d3b      	adds	r3, r7, #4
 8000524:	2200      	movs	r2, #0
 8000526:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000528:	1d3b      	adds	r3, r7, #4
 800052a:	2200      	movs	r2, #0
 800052c:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800052e:	1d3b      	adds	r3, r7, #4
 8000530:	2200      	movs	r2, #0
 8000532:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000534:	1d3b      	adds	r3, r7, #4
 8000536:	2100      	movs	r1, #0
 8000538:	0018      	movs	r0, r3
 800053a:	f001 fefb 	bl	8002334 <HAL_RCC_ClockConfig>
 800053e:	1e03      	subs	r3, r0, #0
 8000540:	d001      	beq.n	8000546 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000542:	f000 f8ad 	bl	80006a0 <Error_Handler>
  }
}
 8000546:	46c0      	nop			@ (mov r8, r8)
 8000548:	46bd      	mov	sp, r7
 800054a:	b00f      	add	sp, #60	@ 0x3c
 800054c:	bd90      	pop	{r4, r7, pc}
	...

08000550 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000554:	4b24      	ldr	r3, [pc, #144]	@ (80005e8 <MX_USART1_UART_Init+0x98>)
 8000556:	4a25      	ldr	r2, [pc, #148]	@ (80005ec <MX_USART1_UART_Init+0x9c>)
 8000558:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800055a:	4b23      	ldr	r3, [pc, #140]	@ (80005e8 <MX_USART1_UART_Init+0x98>)
 800055c:	2296      	movs	r2, #150	@ 0x96
 800055e:	0192      	lsls	r2, r2, #6
 8000560:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000562:	4b21      	ldr	r3, [pc, #132]	@ (80005e8 <MX_USART1_UART_Init+0x98>)
 8000564:	2200      	movs	r2, #0
 8000566:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000568:	4b1f      	ldr	r3, [pc, #124]	@ (80005e8 <MX_USART1_UART_Init+0x98>)
 800056a:	2200      	movs	r2, #0
 800056c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800056e:	4b1e      	ldr	r3, [pc, #120]	@ (80005e8 <MX_USART1_UART_Init+0x98>)
 8000570:	2200      	movs	r2, #0
 8000572:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000574:	4b1c      	ldr	r3, [pc, #112]	@ (80005e8 <MX_USART1_UART_Init+0x98>)
 8000576:	220c      	movs	r2, #12
 8000578:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800057a:	4b1b      	ldr	r3, [pc, #108]	@ (80005e8 <MX_USART1_UART_Init+0x98>)
 800057c:	2200      	movs	r2, #0
 800057e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000580:	4b19      	ldr	r3, [pc, #100]	@ (80005e8 <MX_USART1_UART_Init+0x98>)
 8000582:	2200      	movs	r2, #0
 8000584:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000586:	4b18      	ldr	r3, [pc, #96]	@ (80005e8 <MX_USART1_UART_Init+0x98>)
 8000588:	2200      	movs	r2, #0
 800058a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800058c:	4b16      	ldr	r3, [pc, #88]	@ (80005e8 <MX_USART1_UART_Init+0x98>)
 800058e:	2200      	movs	r2, #0
 8000590:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000592:	4b15      	ldr	r3, [pc, #84]	@ (80005e8 <MX_USART1_UART_Init+0x98>)
 8000594:	2200      	movs	r2, #0
 8000596:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8000598:	4813      	ldr	r0, [pc, #76]	@ (80005e8 <MX_USART1_UART_Init+0x98>)
 800059a:	2300      	movs	r3, #0
 800059c:	2200      	movs	r2, #0
 800059e:	2100      	movs	r1, #0
 80005a0:	f003 feb6 	bl	8004310 <HAL_RS485Ex_Init>
 80005a4:	1e03      	subs	r3, r0, #0
 80005a6:	d001      	beq.n	80005ac <MX_USART1_UART_Init+0x5c>
  {
    Error_Handler();
 80005a8:	f000 f87a 	bl	80006a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80005ac:	4b0e      	ldr	r3, [pc, #56]	@ (80005e8 <MX_USART1_UART_Init+0x98>)
 80005ae:	2100      	movs	r1, #0
 80005b0:	0018      	movs	r0, r3
 80005b2:	f003 ff71 	bl	8004498 <HAL_UARTEx_SetTxFifoThreshold>
 80005b6:	1e03      	subs	r3, r0, #0
 80005b8:	d001      	beq.n	80005be <MX_USART1_UART_Init+0x6e>
  {
    Error_Handler();
 80005ba:	f000 f871 	bl	80006a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80005be:	4b0a      	ldr	r3, [pc, #40]	@ (80005e8 <MX_USART1_UART_Init+0x98>)
 80005c0:	2100      	movs	r1, #0
 80005c2:	0018      	movs	r0, r3
 80005c4:	f003 ffa8 	bl	8004518 <HAL_UARTEx_SetRxFifoThreshold>
 80005c8:	1e03      	subs	r3, r0, #0
 80005ca:	d001      	beq.n	80005d0 <MX_USART1_UART_Init+0x80>
  {
    Error_Handler();
 80005cc:	f000 f868 	bl	80006a0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80005d0:	4b05      	ldr	r3, [pc, #20]	@ (80005e8 <MX_USART1_UART_Init+0x98>)
 80005d2:	0018      	movs	r0, r3
 80005d4:	f003 ff26 	bl	8004424 <HAL_UARTEx_DisableFifoMode>
 80005d8:	1e03      	subs	r3, r0, #0
 80005da:	d001      	beq.n	80005e0 <MX_USART1_UART_Init+0x90>
  {
    Error_Handler();
 80005dc:	f000 f860 	bl	80006a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80005e0:	46c0      	nop			@ (mov r8, r8)
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	46c0      	nop			@ (mov r8, r8)
 80005e8:	20000040 	.word	0x20000040
 80005ec:	40013800 	.word	0x40013800

080005f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000628 <MX_DMA_Init+0x38>)
 80005f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80005fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000628 <MX_DMA_Init+0x38>)
 80005fc:	2101      	movs	r1, #1
 80005fe:	430a      	orrs	r2, r1
 8000600:	639a      	str	r2, [r3, #56]	@ 0x38
 8000602:	4b09      	ldr	r3, [pc, #36]	@ (8000628 <MX_DMA_Init+0x38>)
 8000604:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000606:	2201      	movs	r2, #1
 8000608:	4013      	ands	r3, r2
 800060a:	607b      	str	r3, [r7, #4]
 800060c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800060e:	2200      	movs	r2, #0
 8000610:	2100      	movs	r1, #0
 8000612:	2009      	movs	r0, #9
 8000614:	f000 ff94 	bl	8001540 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000618:	2009      	movs	r0, #9
 800061a:	f000 ffa6 	bl	800156a <HAL_NVIC_EnableIRQ>

}
 800061e:	46c0      	nop			@ (mov r8, r8)
 8000620:	46bd      	mov	sp, r7
 8000622:	b002      	add	sp, #8
 8000624:	bd80      	pop	{r7, pc}
 8000626:	46c0      	nop			@ (mov r8, r8)
 8000628:	40021000 	.word	0x40021000

0800062c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b084      	sub	sp, #16
 8000630:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000632:	4b1a      	ldr	r3, [pc, #104]	@ (800069c <MX_GPIO_Init+0x70>)
 8000634:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000636:	4b19      	ldr	r3, [pc, #100]	@ (800069c <MX_GPIO_Init+0x70>)
 8000638:	2104      	movs	r1, #4
 800063a:	430a      	orrs	r2, r1
 800063c:	635a      	str	r2, [r3, #52]	@ 0x34
 800063e:	4b17      	ldr	r3, [pc, #92]	@ (800069c <MX_GPIO_Init+0x70>)
 8000640:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000642:	2204      	movs	r2, #4
 8000644:	4013      	ands	r3, r2
 8000646:	60fb      	str	r3, [r7, #12]
 8000648:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800064a:	4b14      	ldr	r3, [pc, #80]	@ (800069c <MX_GPIO_Init+0x70>)
 800064c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800064e:	4b13      	ldr	r3, [pc, #76]	@ (800069c <MX_GPIO_Init+0x70>)
 8000650:	2120      	movs	r1, #32
 8000652:	430a      	orrs	r2, r1
 8000654:	635a      	str	r2, [r3, #52]	@ 0x34
 8000656:	4b11      	ldr	r3, [pc, #68]	@ (800069c <MX_GPIO_Init+0x70>)
 8000658:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800065a:	2220      	movs	r2, #32
 800065c:	4013      	ands	r3, r2
 800065e:	60bb      	str	r3, [r7, #8]
 8000660:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000662:	4b0e      	ldr	r3, [pc, #56]	@ (800069c <MX_GPIO_Init+0x70>)
 8000664:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000666:	4b0d      	ldr	r3, [pc, #52]	@ (800069c <MX_GPIO_Init+0x70>)
 8000668:	2102      	movs	r1, #2
 800066a:	430a      	orrs	r2, r1
 800066c:	635a      	str	r2, [r3, #52]	@ 0x34
 800066e:	4b0b      	ldr	r3, [pc, #44]	@ (800069c <MX_GPIO_Init+0x70>)
 8000670:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000672:	2202      	movs	r2, #2
 8000674:	4013      	ands	r3, r2
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800067a:	4b08      	ldr	r3, [pc, #32]	@ (800069c <MX_GPIO_Init+0x70>)
 800067c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800067e:	4b07      	ldr	r3, [pc, #28]	@ (800069c <MX_GPIO_Init+0x70>)
 8000680:	2101      	movs	r1, #1
 8000682:	430a      	orrs	r2, r1
 8000684:	635a      	str	r2, [r3, #52]	@ 0x34
 8000686:	4b05      	ldr	r3, [pc, #20]	@ (800069c <MX_GPIO_Init+0x70>)
 8000688:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800068a:	2201      	movs	r2, #1
 800068c:	4013      	ands	r3, r2
 800068e:	603b      	str	r3, [r7, #0]
 8000690:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000692:	46c0      	nop			@ (mov r8, r8)
 8000694:	46bd      	mov	sp, r7
 8000696:	b004      	add	sp, #16
 8000698:	bd80      	pop	{r7, pc}
 800069a:	46c0      	nop			@ (mov r8, r8)
 800069c:	40021000 	.word	0x40021000

080006a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006a4:	b672      	cpsid	i
}
 80006a6:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006a8:	46c0      	nop			@ (mov r8, r8)
 80006aa:	e7fd      	b.n	80006a8 <Error_Handler+0x8>

080006ac <HAL_UARTEx_RxEventCallback>:

/*
 * Modbus reception handler function
 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80006ac:	b590      	push	{r4, r7, lr}
 80006ae:	b085      	sub	sp, #20
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
 80006b4:	000a      	movs	r2, r1
 80006b6:	1cbb      	adds	r3, r7, #2
 80006b8:	801a      	strh	r2, [r3, #0]
	if(huart->Instance == USART1)
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	4a45      	ldr	r2, [pc, #276]	@ (80007d4 <HAL_UARTEx_RxEventCallback+0x128>)
 80006c0:	4293      	cmp	r3, r2
 80006c2:	d000      	beq.n	80006c6 <HAL_UARTEx_RxEventCallback+0x1a>
 80006c4:	e081      	b.n	80007ca <HAL_UARTEx_RxEventCallback+0x11e>
	{
		chunk_start_i = chunk_end_i;  // Update the last position before copying new data
 80006c6:	4b44      	ldr	r3, [pc, #272]	@ (80007d8 <HAL_UARTEx_RxEventCallback+0x12c>)
 80006c8:	881b      	ldrh	r3, [r3, #0]
 80006ca:	b29a      	uxth	r2, r3
 80006cc:	4b43      	ldr	r3, [pc, #268]	@ (80007dc <HAL_UARTEx_RxEventCallback+0x130>)
 80006ce:	801a      	strh	r2, [r3, #0]

		/* If the data in large and it is about to exceed the buffer size, we have to route it to the start of the buffer
		 * This is to maintain the circular buffer
		 * The old data in the main buffer will be overlapped
		 */
		if (chunk_start_i + Size > MODBUS_RX_BUFFER_SIZE)  // If the current position + new data size is greater than the main buffer
 80006d0:	4b42      	ldr	r3, [pc, #264]	@ (80007dc <HAL_UARTEx_RxEventCallback+0x130>)
 80006d2:	881b      	ldrh	r3, [r3, #0]
 80006d4:	b29b      	uxth	r3, r3
 80006d6:	001a      	movs	r2, r3
 80006d8:	1cbb      	adds	r3, r7, #2
 80006da:	881b      	ldrh	r3, [r3, #0]
 80006dc:	18d2      	adds	r2, r2, r3
 80006de:	2380      	movs	r3, #128	@ 0x80
 80006e0:	005b      	lsls	r3, r3, #1
 80006e2:	429a      	cmp	r2, r3
 80006e4:	dd29      	ble.n	800073a <HAL_UARTEx_RxEventCallback+0x8e>
		{
			uint16_t datatocopy = MODBUS_RX_BUFFER_SIZE - chunk_start_i;  // find out how much space is left in the main buffer
 80006e6:	4b3d      	ldr	r3, [pc, #244]	@ (80007dc <HAL_UARTEx_RxEventCallback+0x130>)
 80006e8:	881b      	ldrh	r3, [r3, #0]
 80006ea:	b29a      	uxth	r2, r3
 80006ec:	240e      	movs	r4, #14
 80006ee:	193b      	adds	r3, r7, r4
 80006f0:	2180      	movs	r1, #128	@ 0x80
 80006f2:	0049      	lsls	r1, r1, #1
 80006f4:	1a8a      	subs	r2, r1, r2
 80006f6:	801a      	strh	r2, [r3, #0]
			memcpy ((uint8_t *)(modbus_rx_buffer + chunk_start_i), rx_chunk, datatocopy);  // copy data in that remaining space
 80006f8:	4b38      	ldr	r3, [pc, #224]	@ (80007dc <HAL_UARTEx_RxEventCallback+0x130>)
 80006fa:	881b      	ldrh	r3, [r3, #0]
 80006fc:	b29b      	uxth	r3, r3
 80006fe:	001a      	movs	r2, r3
 8000700:	4b37      	ldr	r3, [pc, #220]	@ (80007e0 <HAL_UARTEx_RxEventCallback+0x134>)
 8000702:	18d0      	adds	r0, r2, r3
 8000704:	193b      	adds	r3, r7, r4
 8000706:	881a      	ldrh	r2, [r3, #0]
 8000708:	4b36      	ldr	r3, [pc, #216]	@ (80007e4 <HAL_UARTEx_RxEventCallback+0x138>)
 800070a:	0019      	movs	r1, r3
 800070c:	f004 f838 	bl	8004780 <memcpy>

			chunk_end_i = (Size - datatocopy);  // update the position
 8000710:	1cba      	adds	r2, r7, #2
 8000712:	193b      	adds	r3, r7, r4
 8000714:	8812      	ldrh	r2, [r2, #0]
 8000716:	881b      	ldrh	r3, [r3, #0]
 8000718:	1ad3      	subs	r3, r2, r3
 800071a:	b29a      	uxth	r2, r3
 800071c:	4b2e      	ldr	r3, [pc, #184]	@ (80007d8 <HAL_UARTEx_RxEventCallback+0x12c>)
 800071e:	801a      	strh	r2, [r3, #0]
			memcpy ((uint8_t *)modbus_rx_buffer, (uint8_t *)(rx_chunk + datatocopy), chunk_end_i);  // copy the remaining data
 8000720:	193b      	adds	r3, r7, r4
 8000722:	881a      	ldrh	r2, [r3, #0]
 8000724:	4b2f      	ldr	r3, [pc, #188]	@ (80007e4 <HAL_UARTEx_RxEventCallback+0x138>)
 8000726:	18d1      	adds	r1, r2, r3
 8000728:	4b2b      	ldr	r3, [pc, #172]	@ (80007d8 <HAL_UARTEx_RxEventCallback+0x12c>)
 800072a:	881b      	ldrh	r3, [r3, #0]
 800072c:	b29b      	uxth	r3, r3
 800072e:	001a      	movs	r2, r3
 8000730:	4b2b      	ldr	r3, [pc, #172]	@ (80007e0 <HAL_UARTEx_RxEventCallback+0x134>)
 8000732:	0018      	movs	r0, r3
 8000734:	f004 f824 	bl	8004780 <memcpy>
 8000738:	e014      	b.n	8000764 <HAL_UARTEx_RxEventCallback+0xb8>
		/* if the current position + new data size is less than the main buffer
		 * we will simply copy the data into the buffer and update the position
		 */
		else
		{
			memcpy ((uint8_t *)(modbus_rx_buffer + chunk_start_i), rx_chunk, Size);
 800073a:	4b28      	ldr	r3, [pc, #160]	@ (80007dc <HAL_UARTEx_RxEventCallback+0x130>)
 800073c:	881b      	ldrh	r3, [r3, #0]
 800073e:	b29b      	uxth	r3, r3
 8000740:	001a      	movs	r2, r3
 8000742:	4b27      	ldr	r3, [pc, #156]	@ (80007e0 <HAL_UARTEx_RxEventCallback+0x134>)
 8000744:	18d0      	adds	r0, r2, r3
 8000746:	1cbb      	adds	r3, r7, #2
 8000748:	881a      	ldrh	r2, [r3, #0]
 800074a:	4b26      	ldr	r3, [pc, #152]	@ (80007e4 <HAL_UARTEx_RxEventCallback+0x138>)
 800074c:	0019      	movs	r1, r3
 800074e:	f004 f817 	bl	8004780 <memcpy>
			chunk_end_i = Size + chunk_start_i;
 8000752:	4b22      	ldr	r3, [pc, #136]	@ (80007dc <HAL_UARTEx_RxEventCallback+0x130>)
 8000754:	881b      	ldrh	r3, [r3, #0]
 8000756:	b29a      	uxth	r2, r3
 8000758:	1cbb      	adds	r3, r7, #2
 800075a:	881b      	ldrh	r3, [r3, #0]
 800075c:	18d3      	adds	r3, r2, r3
 800075e:	b29a      	uxth	r2, r3
 8000760:	4b1d      	ldr	r3, [pc, #116]	@ (80007d8 <HAL_UARTEx_RxEventCallback+0x12c>)
 8000762:	801a      	strh	r2, [r3, #0]
		}

		if(modbus_header)
 8000764:	4b20      	ldr	r3, [pc, #128]	@ (80007e8 <HAL_UARTEx_RxEventCallback+0x13c>)
 8000766:	881b      	ldrh	r3, [r3, #0]
 8000768:	b29b      	uxth	r3, r3
 800076a:	2b00      	cmp	r3, #0
 800076c:	d027      	beq.n	80007be <HAL_UARTEx_RxEventCallback+0x112>
		{
			// Log the time for chunk miss error handling
			chunk_time = HAL_GetTick();
 800076e:	f000 fe0d 	bl	800138c <HAL_GetTick>
 8000772:	0002      	movs	r2, r0
 8000774:	4b1d      	ldr	r3, [pc, #116]	@ (80007ec <HAL_UARTEx_RxEventCallback+0x140>)
 8000776:	601a      	str	r2, [r3, #0]

			start_index = chunk_start_i;
 8000778:	4b18      	ldr	r3, [pc, #96]	@ (80007dc <HAL_UARTEx_RxEventCallback+0x130>)
 800077a:	881b      	ldrh	r3, [r3, #0]
 800077c:	b29a      	uxth	r2, r3
 800077e:	4b1c      	ldr	r3, [pc, #112]	@ (80007f0 <HAL_UARTEx_RxEventCallback+0x144>)
 8000780:	801a      	strh	r2, [r3, #0]
			modbus_header = 0;
 8000782:	4b19      	ldr	r3, [pc, #100]	@ (80007e8 <HAL_UARTEx_RxEventCallback+0x13c>)
 8000784:	2200      	movs	r2, #0
 8000786:	801a      	strh	r2, [r3, #0]

			// Setup the DMA to receive the # message bytes + crc + 1 in the event that the # bytes is in the message
			HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rx_chunk, (uint16_t)(((rx_chunk[4] << 8) | rx_chunk[5])*2 + 2 + 1));
 8000788:	4b16      	ldr	r3, [pc, #88]	@ (80007e4 <HAL_UARTEx_RxEventCallback+0x138>)
 800078a:	791b      	ldrb	r3, [r3, #4]
 800078c:	021b      	lsls	r3, r3, #8
 800078e:	4a15      	ldr	r2, [pc, #84]	@ (80007e4 <HAL_UARTEx_RxEventCallback+0x138>)
 8000790:	7952      	ldrb	r2, [r2, #5]
 8000792:	4313      	orrs	r3, r2
 8000794:	b29b      	uxth	r3, r3
 8000796:	3301      	adds	r3, #1
 8000798:	b29b      	uxth	r3, r3
 800079a:	18db      	adds	r3, r3, r3
 800079c:	b29b      	uxth	r3, r3
 800079e:	3301      	adds	r3, #1
 80007a0:	b29a      	uxth	r2, r3
 80007a2:	4910      	ldr	r1, [pc, #64]	@ (80007e4 <HAL_UARTEx_RxEventCallback+0x138>)
 80007a4:	4b13      	ldr	r3, [pc, #76]	@ (80007f4 <HAL_UARTEx_RxEventCallback+0x148>)
 80007a6:	0018      	movs	r0, r3
 80007a8:	f003 fef8 	bl	800459c <HAL_UARTEx_ReceiveToIdle_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 80007ac:	4b12      	ldr	r3, [pc, #72]	@ (80007f8 <HAL_UARTEx_RxEventCallback+0x14c>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	681a      	ldr	r2, [r3, #0]
 80007b2:	4b11      	ldr	r3, [pc, #68]	@ (80007f8 <HAL_UARTEx_RxEventCallback+0x14c>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	2104      	movs	r1, #4
 80007b8:	438a      	bics	r2, r1
 80007ba:	601a      	str	r2, [r3, #0]
			 */
			modbus_header = 1;
			rx_int = 1;
		}
	}
}
 80007bc:	e005      	b.n	80007ca <HAL_UARTEx_RxEventCallback+0x11e>
			modbus_header = 1;
 80007be:	4b0a      	ldr	r3, [pc, #40]	@ (80007e8 <HAL_UARTEx_RxEventCallback+0x13c>)
 80007c0:	2201      	movs	r2, #1
 80007c2:	801a      	strh	r2, [r3, #0]
			rx_int = 1;
 80007c4:	4b0d      	ldr	r3, [pc, #52]	@ (80007fc <HAL_UARTEx_RxEventCallback+0x150>)
 80007c6:	2201      	movs	r2, #1
 80007c8:	701a      	strb	r2, [r3, #0]
}
 80007ca:	46c0      	nop			@ (mov r8, r8)
 80007cc:	46bd      	mov	sp, r7
 80007ce:	b005      	add	sp, #20
 80007d0:	bd90      	pop	{r4, r7, pc}
 80007d2:	46c0      	nop			@ (mov r8, r8)
 80007d4:	40013800 	.word	0x40013800
 80007d8:	20000438 	.word	0x20000438
 80007dc:	20000436 	.word	0x20000436
 80007e0:	20000130 	.word	0x20000130
 80007e4:	20000330 	.word	0x20000330
 80007e8:	20000014 	.word	0x20000014
 80007ec:	20000430 	.word	0x20000430
 80007f0:	20000434 	.word	0x20000434
 80007f4:	20000040 	.word	0x20000040
 80007f8:	200000d4 	.word	0x200000d4
 80007fc:	2000043a 	.word	0x2000043a

08000800 <HAL_UART_TxCpltCallback>:

// Transmit Interrupt Handler
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
	tx_int = 1;
 8000808:	4b03      	ldr	r3, [pc, #12]	@ (8000818 <HAL_UART_TxCpltCallback+0x18>)
 800080a:	2201      	movs	r2, #1
 800080c:	701a      	strb	r2, [r3, #0]
}
 800080e:	46c0      	nop			@ (mov r8, r8)
 8000810:	46bd      	mov	sp, r7
 8000812:	b002      	add	sp, #8
 8000814:	bd80      	pop	{r7, pc}
 8000816:	46c0      	nop			@ (mov r8, r8)
 8000818:	2000043b 	.word	0x2000043b

0800081c <handle_chunk_miss>:


// Chunk Miss Error Handling Function
int8_t handle_chunk_miss()
{
 800081c:	b590      	push	{r4, r7, lr}
 800081e:	b083      	sub	sp, #12
 8000820:	af00      	add	r7, sp, #0
	if(modbus_header == 0)
 8000822:	4b15      	ldr	r3, [pc, #84]	@ (8000878 <handle_chunk_miss+0x5c>)
 8000824:	881b      	ldrh	r3, [r3, #0]
 8000826:	b29b      	uxth	r3, r3
 8000828:	2b00      	cmp	r3, #0
 800082a:	d120      	bne.n	800086e <handle_chunk_miss+0x52>
	{
		if(HAL_GetTick() - chunk_time > 10)
 800082c:	f000 fdae 	bl	800138c <HAL_GetTick>
 8000830:	0002      	movs	r2, r0
 8000832:	4b12      	ldr	r3, [pc, #72]	@ (800087c <handle_chunk_miss+0x60>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	1ad3      	subs	r3, r2, r3
 8000838:	2b0a      	cmp	r3, #10
 800083a:	d918      	bls.n	800086e <handle_chunk_miss+0x52>
		{
			// TODO: Log the chunk miss as an error
			modbus_header = 1;
 800083c:	4b0e      	ldr	r3, [pc, #56]	@ (8000878 <handle_chunk_miss+0x5c>)
 800083e:	2201      	movs	r2, #1
 8000840:	801a      	strh	r2, [r3, #0]
			int8_t status = HAL_UART_Abort_IT(&huart1);
 8000842:	4b0f      	ldr	r3, [pc, #60]	@ (8000880 <handle_chunk_miss+0x64>)
 8000844:	0018      	movs	r0, r3
 8000846:	f002 f8bf 	bl	80029c8 <HAL_UART_Abort_IT>
 800084a:	0003      	movs	r3, r0
 800084c:	001a      	movs	r2, r3
 800084e:	1dfb      	adds	r3, r7, #7
 8000850:	701a      	strb	r2, [r3, #0]
			if(status == HAL_OK)
 8000852:	1dfb      	adds	r3, r7, #7
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	b25b      	sxtb	r3, r3
 8000858:	2b00      	cmp	r3, #0
 800085a:	d104      	bne.n	8000866 <handle_chunk_miss+0x4a>
			{
				status = modbus_set_rx();
 800085c:	1dfc      	adds	r4, r7, #7
 800085e:	f000 fae7 	bl	8000e30 <modbus_set_rx>
 8000862:	0003      	movs	r3, r0
 8000864:	7023      	strb	r3, [r4, #0]
			}
			return status;
 8000866:	1dfb      	adds	r3, r7, #7
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	b25b      	sxtb	r3, r3
 800086c:	e000      	b.n	8000870 <handle_chunk_miss+0x54>
		}
	}
	return HAL_OK;
 800086e:	2300      	movs	r3, #0
}
 8000870:	0018      	movs	r0, r3
 8000872:	46bd      	mov	sp, r7
 8000874:	b003      	add	sp, #12
 8000876:	bd90      	pop	{r4, r7, pc}
 8000878:	20000014 	.word	0x20000014
 800087c:	20000430 	.word	0x20000430
 8000880:	20000040 	.word	0x20000040

08000884 <get_rx_buffer>:

/*
	Modbus get the raw message received through UART
 */
uint8_t get_rx_buffer(uint8_t index)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0
 800088a:	0002      	movs	r2, r0
 800088c:	1dfb      	adds	r3, r7, #7
 800088e:	701a      	strb	r2, [r3, #0]
	if (index < MODBUS_RX_BUFFER_SIZE - 1)
 8000890:	1dfb      	adds	r3, r7, #7
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	2bff      	cmp	r3, #255	@ 0xff
 8000896:	d023      	beq.n	80008e0 <get_rx_buffer+0x5c>
	{
		uint8_t value = ((start_index + index) > (MODBUS_RX_BUFFER_SIZE - 1))?
 8000898:	4b14      	ldr	r3, [pc, #80]	@ (80008ec <get_rx_buffer+0x68>)
 800089a:	881b      	ldrh	r3, [r3, #0]
 800089c:	b29b      	uxth	r3, r3
 800089e:	001a      	movs	r2, r3
 80008a0:	1dfb      	adds	r3, r7, #7
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	18d3      	adds	r3, r2, r3
 80008a6:	2bff      	cmp	r3, #255	@ 0xff
 80008a8:	dd0b      	ble.n	80008c2 <get_rx_buffer+0x3e>
				modbus_rx_buffer[(start_index + index) - MODBUS_RX_BUFFER_SIZE] :
 80008aa:	4b10      	ldr	r3, [pc, #64]	@ (80008ec <get_rx_buffer+0x68>)
 80008ac:	881b      	ldrh	r3, [r3, #0]
 80008ae:	b29b      	uxth	r3, r3
 80008b0:	001a      	movs	r2, r3
 80008b2:	1dfb      	adds	r3, r7, #7
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	18d3      	adds	r3, r2, r3
 80008b8:	3b01      	subs	r3, #1
 80008ba:	3bff      	subs	r3, #255	@ 0xff
		uint8_t value = ((start_index + index) > (MODBUS_RX_BUFFER_SIZE - 1))?
 80008bc:	4a0c      	ldr	r2, [pc, #48]	@ (80008f0 <get_rx_buffer+0x6c>)
 80008be:	5cd3      	ldrb	r3, [r2, r3]
 80008c0:	e008      	b.n	80008d4 <get_rx_buffer+0x50>
				modbus_rx_buffer[start_index + index];
 80008c2:	4b0a      	ldr	r3, [pc, #40]	@ (80008ec <get_rx_buffer+0x68>)
 80008c4:	881b      	ldrh	r3, [r3, #0]
 80008c6:	b29b      	uxth	r3, r3
 80008c8:	001a      	movs	r2, r3
 80008ca:	1dfb      	adds	r3, r7, #7
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	18d3      	adds	r3, r2, r3
		uint8_t value = ((start_index + index) > (MODBUS_RX_BUFFER_SIZE - 1))?
 80008d0:	4a07      	ldr	r2, [pc, #28]	@ (80008f0 <get_rx_buffer+0x6c>)
 80008d2:	5cd3      	ldrb	r3, [r2, r3]
 80008d4:	210f      	movs	r1, #15
 80008d6:	187a      	adds	r2, r7, r1
 80008d8:	7013      	strb	r3, [r2, #0]
		return value;
 80008da:	187b      	adds	r3, r7, r1
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	e000      	b.n	80008e2 <get_rx_buffer+0x5e>
	}
	return 0xFF;
 80008e0:	23ff      	movs	r3, #255	@ 0xff
}
 80008e2:	0018      	movs	r0, r3
 80008e4:	46bd      	mov	sp, r7
 80008e6:	b004      	add	sp, #16
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	46c0      	nop			@ (mov r8, r8)
 80008ec:	20000434 	.word	0x20000434
 80008f0:	20000130 	.word	0x20000130

080008f4 <return_holding_registers>:

/*
	Modbus Slave Return Multiple holding registers
 */
int8_t return_holding_registers()
{
 80008f4:	b590      	push	{r4, r7, lr}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
	// Handle Error Checking
	uint16_t first_register_address = (get_rx_buffer(2) << 8) | get_rx_buffer(3);
 80008fa:	2002      	movs	r0, #2
 80008fc:	f7ff ffc2 	bl	8000884 <get_rx_buffer>
 8000900:	0003      	movs	r3, r0
 8000902:	021b      	lsls	r3, r3, #8
 8000904:	b21c      	sxth	r4, r3
 8000906:	2003      	movs	r0, #3
 8000908:	f7ff ffbc 	bl	8000884 <get_rx_buffer>
 800090c:	0003      	movs	r3, r0
 800090e:	b21b      	sxth	r3, r3
 8000910:	4323      	orrs	r3, r4
 8000912:	b21a      	sxth	r2, r3
 8000914:	1d3b      	adds	r3, r7, #4
 8000916:	801a      	strh	r2, [r3, #0]

	// Get the number of registers requested by the master
	uint16_t num_registers = (get_rx_buffer(4) << 8) | get_rx_buffer(5);
 8000918:	2004      	movs	r0, #4
 800091a:	f7ff ffb3 	bl	8000884 <get_rx_buffer>
 800091e:	0003      	movs	r3, r0
 8000920:	021b      	lsls	r3, r3, #8
 8000922:	b21c      	sxth	r4, r3
 8000924:	2005      	movs	r0, #5
 8000926:	f7ff ffad 	bl	8000884 <get_rx_buffer>
 800092a:	0003      	movs	r3, r0
 800092c:	b21b      	sxth	r3, r3
 800092e:	4323      	orrs	r3, r4
 8000930:	b21a      	sxth	r2, r3
 8000932:	1cbb      	adds	r3, r7, #2
 8000934:	801a      	strh	r2, [r3, #0]

	if(num_registers > RX_BUFFER_SIZE || num_registers < 1) // 125 is the limit according to modbus protocol
 8000936:	1cbb      	adds	r3, r7, #2
 8000938:	881b      	ldrh	r3, [r3, #0]
 800093a:	2b7d      	cmp	r3, #125	@ 0x7d
 800093c:	d803      	bhi.n	8000946 <return_holding_registers+0x52>
 800093e:	1cbb      	adds	r3, r7, #2
 8000940:	881b      	ldrh	r3, [r3, #0]
 8000942:	2b00      	cmp	r3, #0
 8000944:	d104      	bne.n	8000950 <return_holding_registers+0x5c>
	{
		return modbus_exception(MB_ILLEGAL_DATA_VALUE);
 8000946:	2006      	movs	r0, #6
 8000948:	f000 f95e 	bl	8000c08 <modbus_exception>
 800094c:	0003      	movs	r3, r0
 800094e:	e065      	b.n	8000a1c <return_holding_registers+0x128>
	}

	uint16_t last_register_address = first_register_address + (num_registers - 1);
 8000950:	1cba      	adds	r2, r7, #2
 8000952:	1d3b      	adds	r3, r7, #4
 8000954:	8812      	ldrh	r2, [r2, #0]
 8000956:	881b      	ldrh	r3, [r3, #0]
 8000958:	18d3      	adds	r3, r2, r3
 800095a:	b29a      	uxth	r2, r3
 800095c:	003b      	movs	r3, r7
 800095e:	3a01      	subs	r2, #1
 8000960:	801a      	strh	r2, [r3, #0]

	if(last_register_address > NUM_HOLDING_REGISTERS)
 8000962:	003b      	movs	r3, r7
 8000964:	881b      	ldrh	r3, [r3, #0]
 8000966:	2b0a      	cmp	r3, #10
 8000968:	d904      	bls.n	8000974 <return_holding_registers+0x80>
	{
		return modbus_exception(MB_ILLEGAL_DATA_ADDRESS);
 800096a:	2005      	movs	r0, #5
 800096c:	f000 f94c 	bl	8000c08 <modbus_exception>
 8000970:	0003      	movs	r3, r0
 8000972:	e053      	b.n	8000a1c <return_holding_registers+0x128>
	}

	// Return register values

	modbus_tx_buffer[0] = get_rx_buffer(0); // Append Slave id
 8000974:	2000      	movs	r0, #0
 8000976:	f7ff ff85 	bl	8000884 <get_rx_buffer>
 800097a:	0003      	movs	r3, r0
 800097c:	001a      	movs	r2, r3
 800097e:	4b29      	ldr	r3, [pc, #164]	@ (8000a24 <return_holding_registers+0x130>)
 8000980:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[1] = get_rx_buffer(1); // Append Function Code
 8000982:	2001      	movs	r0, #1
 8000984:	f7ff ff7e 	bl	8000884 <get_rx_buffer>
 8000988:	0003      	movs	r3, r0
 800098a:	001a      	movs	r2, r3
 800098c:	4b25      	ldr	r3, [pc, #148]	@ (8000a24 <return_holding_registers+0x130>)
 800098e:	705a      	strb	r2, [r3, #1]
	modbus_tx_buffer[2] = num_registers * 2; // Append number of bytes
 8000990:	1cbb      	adds	r3, r7, #2
 8000992:	881b      	ldrh	r3, [r3, #0]
 8000994:	b2db      	uxtb	r3, r3
 8000996:	18db      	adds	r3, r3, r3
 8000998:	b2da      	uxtb	r2, r3
 800099a:	4b22      	ldr	r3, [pc, #136]	@ (8000a24 <return_holding_registers+0x130>)
 800099c:	709a      	strb	r2, [r3, #2]
	uint8_t index = 3;
 800099e:	1dfb      	adds	r3, r7, #7
 80009a0:	2203      	movs	r2, #3
 80009a2:	701a      	strb	r2, [r3, #0]

	// Append the Register Values
	for(uint8_t i = 0; i < num_registers; i++)
 80009a4:	1dbb      	adds	r3, r7, #6
 80009a6:	2200      	movs	r2, #0
 80009a8:	701a      	strb	r2, [r3, #0]
 80009aa:	e028      	b.n	80009fe <return_holding_registers+0x10a>
	{
		modbus_tx_buffer[index++] = high_byte(holding_register_database[first_register_address + i]);
 80009ac:	1d3b      	adds	r3, r7, #4
 80009ae:	881a      	ldrh	r2, [r3, #0]
 80009b0:	1dbb      	adds	r3, r7, #6
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	18d2      	adds	r2, r2, r3
 80009b6:	4b1c      	ldr	r3, [pc, #112]	@ (8000a28 <return_holding_registers+0x134>)
 80009b8:	0052      	lsls	r2, r2, #1
 80009ba:	5ad3      	ldrh	r3, [r2, r3]
 80009bc:	0a1b      	lsrs	r3, r3, #8
 80009be:	b299      	uxth	r1, r3
 80009c0:	1dfb      	adds	r3, r7, #7
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	1dfa      	adds	r2, r7, #7
 80009c6:	1c58      	adds	r0, r3, #1
 80009c8:	7010      	strb	r0, [r2, #0]
 80009ca:	001a      	movs	r2, r3
 80009cc:	b2c9      	uxtb	r1, r1
 80009ce:	4b15      	ldr	r3, [pc, #84]	@ (8000a24 <return_holding_registers+0x130>)
 80009d0:	5499      	strb	r1, [r3, r2]
		modbus_tx_buffer[index++] = low_byte(holding_register_database[first_register_address + i]);
 80009d2:	1d3b      	adds	r3, r7, #4
 80009d4:	881a      	ldrh	r2, [r3, #0]
 80009d6:	1dbb      	adds	r3, r7, #6
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	18d2      	adds	r2, r2, r3
 80009dc:	4b12      	ldr	r3, [pc, #72]	@ (8000a28 <return_holding_registers+0x134>)
 80009de:	0052      	lsls	r2, r2, #1
 80009e0:	5ad1      	ldrh	r1, [r2, r3]
 80009e2:	1dfb      	adds	r3, r7, #7
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	1dfa      	adds	r2, r7, #7
 80009e8:	1c58      	adds	r0, r3, #1
 80009ea:	7010      	strb	r0, [r2, #0]
 80009ec:	001a      	movs	r2, r3
 80009ee:	b2c9      	uxtb	r1, r1
 80009f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000a24 <return_holding_registers+0x130>)
 80009f2:	5499      	strb	r1, [r3, r2]
	for(uint8_t i = 0; i < num_registers; i++)
 80009f4:	1dbb      	adds	r3, r7, #6
 80009f6:	781a      	ldrb	r2, [r3, #0]
 80009f8:	1dbb      	adds	r3, r7, #6
 80009fa:	3201      	adds	r2, #1
 80009fc:	701a      	strb	r2, [r3, #0]
 80009fe:	1dbb      	adds	r3, r7, #6
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	b29b      	uxth	r3, r3
 8000a04:	1cba      	adds	r2, r7, #2
 8000a06:	8812      	ldrh	r2, [r2, #0]
 8000a08:	429a      	cmp	r2, r3
 8000a0a:	d8cf      	bhi.n	80009ac <return_holding_registers+0xb8>
	}

	return modbus_send(modbus_tx_buffer, index);
 8000a0c:	1dfb      	adds	r3, r7, #7
 8000a0e:	781a      	ldrb	r2, [r3, #0]
 8000a10:	4b04      	ldr	r3, [pc, #16]	@ (8000a24 <return_holding_registers+0x130>)
 8000a12:	0011      	movs	r1, r2
 8000a14:	0018      	movs	r0, r3
 8000a16:	f000 f98d 	bl	8000d34 <modbus_send>
 8000a1a:	0003      	movs	r3, r0
}
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	b003      	add	sp, #12
 8000a22:	bd90      	pop	{r4, r7, pc}
 8000a24:	20000230 	.word	0x20000230
 8000a28:	20000000 	.word	0x20000000

08000a2c <edit_multiple_registers>:

/*
	Modbus Slave Edit Multiple holding registers
 */
int8_t edit_multiple_registers()
{
 8000a2c:	b5b0      	push	{r4, r5, r7, lr}
 8000a2e:	b084      	sub	sp, #16
 8000a30:	af00      	add	r7, sp, #0
	// Handle Error Checking
	uint16_t first_register_address = (get_rx_buffer(2) << 8) | get_rx_buffer(3);
 8000a32:	2002      	movs	r0, #2
 8000a34:	f7ff ff26 	bl	8000884 <get_rx_buffer>
 8000a38:	0003      	movs	r3, r0
 8000a3a:	021b      	lsls	r3, r3, #8
 8000a3c:	b21c      	sxth	r4, r3
 8000a3e:	2003      	movs	r0, #3
 8000a40:	f7ff ff20 	bl	8000884 <get_rx_buffer>
 8000a44:	0003      	movs	r3, r0
 8000a46:	b21b      	sxth	r3, r3
 8000a48:	4323      	orrs	r3, r4
 8000a4a:	b21a      	sxth	r2, r3
 8000a4c:	230c      	movs	r3, #12
 8000a4e:	18fb      	adds	r3, r7, r3
 8000a50:	801a      	strh	r2, [r3, #0]

	uint16_t num_registers = (get_rx_buffer(4) << 8) | get_rx_buffer(5);
 8000a52:	2004      	movs	r0, #4
 8000a54:	f7ff ff16 	bl	8000884 <get_rx_buffer>
 8000a58:	0003      	movs	r3, r0
 8000a5a:	021b      	lsls	r3, r3, #8
 8000a5c:	b21c      	sxth	r4, r3
 8000a5e:	2005      	movs	r0, #5
 8000a60:	f7ff ff10 	bl	8000884 <get_rx_buffer>
 8000a64:	0003      	movs	r3, r0
 8000a66:	b21b      	sxth	r3, r3
 8000a68:	4323      	orrs	r3, r4
 8000a6a:	b21a      	sxth	r2, r3
 8000a6c:	210a      	movs	r1, #10
 8000a6e:	187b      	adds	r3, r7, r1
 8000a70:	801a      	strh	r2, [r3, #0]

	if(num_registers > 125 || num_registers < 1) // 125 is the limit according to modbus protocol
 8000a72:	000a      	movs	r2, r1
 8000a74:	18bb      	adds	r3, r7, r2
 8000a76:	881b      	ldrh	r3, [r3, #0]
 8000a78:	2b7d      	cmp	r3, #125	@ 0x7d
 8000a7a:	d803      	bhi.n	8000a84 <edit_multiple_registers+0x58>
 8000a7c:	18bb      	adds	r3, r7, r2
 8000a7e:	881b      	ldrh	r3, [r3, #0]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d104      	bne.n	8000a8e <edit_multiple_registers+0x62>
	{
		return modbus_exception(MB_ILLEGAL_DATA_VALUE);
 8000a84:	2006      	movs	r0, #6
 8000a86:	f000 f8bf 	bl	8000c08 <modbus_exception>
 8000a8a:	0003      	movs	r3, r0
 8000a8c:	e0b4      	b.n	8000bf8 <edit_multiple_registers+0x1cc>
	}

	uint16_t last_register_address = first_register_address + (num_registers - 1);
 8000a8e:	230a      	movs	r3, #10
 8000a90:	18fa      	adds	r2, r7, r3
 8000a92:	230c      	movs	r3, #12
 8000a94:	18fb      	adds	r3, r7, r3
 8000a96:	8812      	ldrh	r2, [r2, #0]
 8000a98:	881b      	ldrh	r3, [r3, #0]
 8000a9a:	18d3      	adds	r3, r2, r3
 8000a9c:	b29a      	uxth	r2, r3
 8000a9e:	2108      	movs	r1, #8
 8000aa0:	187b      	adds	r3, r7, r1
 8000aa2:	3a01      	subs	r2, #1
 8000aa4:	801a      	strh	r2, [r3, #0]

	if(last_register_address > NUM_HOLDING_REGISTERS)
 8000aa6:	187b      	adds	r3, r7, r1
 8000aa8:	881b      	ldrh	r3, [r3, #0]
 8000aaa:	2b0a      	cmp	r3, #10
 8000aac:	d904      	bls.n	8000ab8 <edit_multiple_registers+0x8c>
	{
		return modbus_exception(MB_ILLEGAL_DATA_ADDRESS);
 8000aae:	2005      	movs	r0, #5
 8000ab0:	f000 f8aa 	bl	8000c08 <modbus_exception>
 8000ab4:	0003      	movs	r3, r0
 8000ab6:	e09f      	b.n	8000bf8 <edit_multiple_registers+0x1cc>
	}

	if((first_register_address >= 3 && last_register_address <= 33))
 8000ab8:	230c      	movs	r3, #12
 8000aba:	18fb      	adds	r3, r7, r3
 8000abc:	881b      	ldrh	r3, [r3, #0]
 8000abe:	2b02      	cmp	r3, #2
 8000ac0:	d909      	bls.n	8000ad6 <edit_multiple_registers+0xaa>
 8000ac2:	2308      	movs	r3, #8
 8000ac4:	18fb      	adds	r3, r7, r3
 8000ac6:	881b      	ldrh	r3, [r3, #0]
 8000ac8:	2b21      	cmp	r3, #33	@ 0x21
 8000aca:	d804      	bhi.n	8000ad6 <edit_multiple_registers+0xaa>
	{
		// Ensure that sensor values are restricted to read-only
		return modbus_exception(MB_ILLEGAL_FUNCTION);
 8000acc:	2004      	movs	r0, #4
 8000ace:	f000 f89b 	bl	8000c08 <modbus_exception>
 8000ad2:	0003      	movs	r3, r0
 8000ad4:	e090      	b.n	8000bf8 <edit_multiple_registers+0x1cc>
	}

	// Edit holding registers
	modbus_tx_buffer[0] = get_rx_buffer(0); // Append Slave id
 8000ad6:	2000      	movs	r0, #0
 8000ad8:	f7ff fed4 	bl	8000884 <get_rx_buffer>
 8000adc:	0003      	movs	r3, r0
 8000ade:	001a      	movs	r2, r3
 8000ae0:	4b47      	ldr	r3, [pc, #284]	@ (8000c00 <edit_multiple_registers+0x1d4>)
 8000ae2:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[1] = get_rx_buffer(1); // Append Function Code
 8000ae4:	2001      	movs	r0, #1
 8000ae6:	f7ff fecd 	bl	8000884 <get_rx_buffer>
 8000aea:	0003      	movs	r3, r0
 8000aec:	001a      	movs	r2, r3
 8000aee:	4b44      	ldr	r3, [pc, #272]	@ (8000c00 <edit_multiple_registers+0x1d4>)
 8000af0:	705a      	strb	r2, [r3, #1]
	// Append the Write Address (high byte then low byte)
	modbus_tx_buffer[2] = get_rx_buffer(2);
 8000af2:	2002      	movs	r0, #2
 8000af4:	f7ff fec6 	bl	8000884 <get_rx_buffer>
 8000af8:	0003      	movs	r3, r0
 8000afa:	001a      	movs	r2, r3
 8000afc:	4b40      	ldr	r3, [pc, #256]	@ (8000c00 <edit_multiple_registers+0x1d4>)
 8000afe:	709a      	strb	r2, [r3, #2]
	modbus_tx_buffer[3] = get_rx_buffer(3);
 8000b00:	2003      	movs	r0, #3
 8000b02:	f7ff febf 	bl	8000884 <get_rx_buffer>
 8000b06:	0003      	movs	r3, r0
 8000b08:	001a      	movs	r2, r3
 8000b0a:	4b3d      	ldr	r3, [pc, #244]	@ (8000c00 <edit_multiple_registers+0x1d4>)
 8000b0c:	70da      	strb	r2, [r3, #3]
	// Append the quantity of registers to be written (high byte then low byte)
	modbus_tx_buffer[4] = get_rx_buffer(4);
 8000b0e:	2004      	movs	r0, #4
 8000b10:	f7ff feb8 	bl	8000884 <get_rx_buffer>
 8000b14:	0003      	movs	r3, r0
 8000b16:	001a      	movs	r2, r3
 8000b18:	4b39      	ldr	r3, [pc, #228]	@ (8000c00 <edit_multiple_registers+0x1d4>)
 8000b1a:	711a      	strb	r2, [r3, #4]
	modbus_tx_buffer[5] = get_rx_buffer(5);
 8000b1c:	2005      	movs	r0, #5
 8000b1e:	f7ff feb1 	bl	8000884 <get_rx_buffer>
 8000b22:	0003      	movs	r3, r0
 8000b24:	001a      	movs	r2, r3
 8000b26:	4b36      	ldr	r3, [pc, #216]	@ (8000c00 <edit_multiple_registers+0x1d4>)
 8000b28:	715a      	strb	r2, [r3, #5]
	uint8_t index = 6;
 8000b2a:	1dfb      	adds	r3, r7, #7
 8000b2c:	2206      	movs	r2, #6
 8000b2e:	701a      	strb	r2, [r3, #0]

	for(uint8_t i = 0; i < num_registers; i++)
 8000b30:	230f      	movs	r3, #15
 8000b32:	18fb      	adds	r3, r7, r3
 8000b34:	2200      	movs	r2, #0
 8000b36:	701a      	strb	r2, [r3, #0]
 8000b38:	e032      	b.n	8000ba0 <edit_multiple_registers+0x174>
	{
		holding_register_database[first_register_address + i] = (get_rx_buffer(2 * i + 7) << 8) | get_rx_buffer(2 * i + 8);
 8000b3a:	250f      	movs	r5, #15
 8000b3c:	197b      	adds	r3, r7, r5
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	18db      	adds	r3, r3, r3
 8000b42:	b2db      	uxtb	r3, r3
 8000b44:	3307      	adds	r3, #7
 8000b46:	b2db      	uxtb	r3, r3
 8000b48:	0018      	movs	r0, r3
 8000b4a:	f7ff fe9b 	bl	8000884 <get_rx_buffer>
 8000b4e:	0003      	movs	r3, r0
 8000b50:	021b      	lsls	r3, r3, #8
 8000b52:	b21c      	sxth	r4, r3
 8000b54:	197b      	adds	r3, r7, r5
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	3304      	adds	r3, #4
 8000b5a:	b2db      	uxtb	r3, r3
 8000b5c:	18db      	adds	r3, r3, r3
 8000b5e:	b2db      	uxtb	r3, r3
 8000b60:	0018      	movs	r0, r3
 8000b62:	f7ff fe8f 	bl	8000884 <get_rx_buffer>
 8000b66:	0003      	movs	r3, r0
 8000b68:	b21b      	sxth	r3, r3
 8000b6a:	4323      	orrs	r3, r4
 8000b6c:	b219      	sxth	r1, r3
 8000b6e:	200c      	movs	r0, #12
 8000b70:	183b      	adds	r3, r7, r0
 8000b72:	881a      	ldrh	r2, [r3, #0]
 8000b74:	197b      	adds	r3, r7, r5
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	18d2      	adds	r2, r2, r3
 8000b7a:	b289      	uxth	r1, r1
 8000b7c:	4b21      	ldr	r3, [pc, #132]	@ (8000c04 <edit_multiple_registers+0x1d8>)
 8000b7e:	0052      	lsls	r2, r2, #1
 8000b80:	52d1      	strh	r1, [r2, r3]

		// Handle the range boundaries of each writable register
		handle_range(first_register_address + i);
 8000b82:	197b      	adds	r3, r7, r5
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	b29a      	uxth	r2, r3
 8000b88:	183b      	adds	r3, r7, r0
 8000b8a:	881b      	ldrh	r3, [r3, #0]
 8000b8c:	18d3      	adds	r3, r2, r3
 8000b8e:	b29b      	uxth	r3, r3
 8000b90:	0018      	movs	r0, r3
 8000b92:	f000 f863 	bl	8000c5c <handle_range>
	for(uint8_t i = 0; i < num_registers; i++)
 8000b96:	197b      	adds	r3, r7, r5
 8000b98:	781a      	ldrb	r2, [r3, #0]
 8000b9a:	197b      	adds	r3, r7, r5
 8000b9c:	3201      	adds	r2, #1
 8000b9e:	701a      	strb	r2, [r3, #0]
 8000ba0:	230f      	movs	r3, #15
 8000ba2:	18fb      	adds	r3, r7, r3
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	b29b      	uxth	r3, r3
 8000ba8:	220a      	movs	r2, #10
 8000baa:	18ba      	adds	r2, r7, r2
 8000bac:	8812      	ldrh	r2, [r2, #0]
 8000bae:	429a      	cmp	r2, r3
 8000bb0:	d8c3      	bhi.n	8000b3a <edit_multiple_registers+0x10e>
	}

	// TIMING WORKAROUND START
	HAL_Delay(1);
 8000bb2:	2001      	movs	r0, #1
 8000bb4:	f000 fbf4 	bl	80013a0 <HAL_Delay>
	// TIMING WORKAROUND END

	int8_t status = modbus_send(modbus_tx_buffer, index);
 8000bb8:	1dbc      	adds	r4, r7, #6
 8000bba:	1dfb      	adds	r3, r7, #7
 8000bbc:	781a      	ldrb	r2, [r3, #0]
 8000bbe:	4b10      	ldr	r3, [pc, #64]	@ (8000c00 <edit_multiple_registers+0x1d4>)
 8000bc0:	0011      	movs	r1, r2
 8000bc2:	0018      	movs	r0, r3
 8000bc4:	f000 f8b6 	bl	8000d34 <modbus_send>
 8000bc8:	0003      	movs	r3, r0
 8000bca:	7023      	strb	r3, [r4, #0]

	if(status == HAL_OK)
 8000bcc:	1dbb      	adds	r3, r7, #6
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	b25b      	sxtb	r3, r3
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d10d      	bne.n	8000bf2 <edit_multiple_registers+0x1c6>
	{
		// Special Case Modbus Baud Rate Modification
		if((first_register_address <= 1) && last_register_address >= 1)
 8000bd6:	230c      	movs	r3, #12
 8000bd8:	18fb      	adds	r3, r7, r3
 8000bda:	881b      	ldrh	r3, [r3, #0]
 8000bdc:	2b01      	cmp	r3, #1
 8000bde:	d808      	bhi.n	8000bf2 <edit_multiple_registers+0x1c6>
 8000be0:	2308      	movs	r3, #8
 8000be2:	18fb      	adds	r3, r7, r3
 8000be4:	881b      	ldrh	r3, [r3, #0]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d003      	beq.n	8000bf2 <edit_multiple_registers+0x1c6>
		{
			return modbus_change_baud_rate();
 8000bea:	f000 f943 	bl	8000e74 <modbus_change_baud_rate>
 8000bee:	0003      	movs	r3, r0
 8000bf0:	e002      	b.n	8000bf8 <edit_multiple_registers+0x1cc>
		}
	}
	return status;
 8000bf2:	1dbb      	adds	r3, r7, #6
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	b25b      	sxtb	r3, r3
}
 8000bf8:	0018      	movs	r0, r3
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	b004      	add	sp, #16
 8000bfe:	bdb0      	pop	{r4, r5, r7, pc}
 8000c00:	20000230 	.word	0x20000230
 8000c04:	20000000 	.word	0x20000000

08000c08 <modbus_exception>:

/*
	Modbus Slave Exception handler
 */
int8_t modbus_exception(int8_t exception_code)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	0002      	movs	r2, r0
 8000c10:	1dfb      	adds	r3, r7, #7
 8000c12:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[0] = get_rx_buffer(0);
 8000c14:	2000      	movs	r0, #0
 8000c16:	f7ff fe35 	bl	8000884 <get_rx_buffer>
 8000c1a:	0003      	movs	r3, r0
 8000c1c:	001a      	movs	r2, r3
 8000c1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c58 <modbus_exception+0x50>)
 8000c20:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[1] = get_rx_buffer(1) | 0x80;
 8000c22:	2001      	movs	r0, #1
 8000c24:	f7ff fe2e 	bl	8000884 <get_rx_buffer>
 8000c28:	0003      	movs	r3, r0
 8000c2a:	001a      	movs	r2, r3
 8000c2c:	2380      	movs	r3, #128	@ 0x80
 8000c2e:	425b      	negs	r3, r3
 8000c30:	4313      	orrs	r3, r2
 8000c32:	b2da      	uxtb	r2, r3
 8000c34:	4b08      	ldr	r3, [pc, #32]	@ (8000c58 <modbus_exception+0x50>)
 8000c36:	705a      	strb	r2, [r3, #1]
	modbus_tx_buffer[2] = exception_code - 3; // Subtract 3 to match the modbus defined error code value
 8000c38:	1dfb      	adds	r3, r7, #7
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	3b03      	subs	r3, #3
 8000c3e:	b2da      	uxtb	r2, r3
 8000c40:	4b05      	ldr	r3, [pc, #20]	@ (8000c58 <modbus_exception+0x50>)
 8000c42:	709a      	strb	r2, [r3, #2]

	return modbus_send(modbus_tx_buffer, 3);
 8000c44:	4b04      	ldr	r3, [pc, #16]	@ (8000c58 <modbus_exception+0x50>)
 8000c46:	2103      	movs	r1, #3
 8000c48:	0018      	movs	r0, r3
 8000c4a:	f000 f873 	bl	8000d34 <modbus_send>
 8000c4e:	0003      	movs	r3, r0
}
 8000c50:	0018      	movs	r0, r3
 8000c52:	46bd      	mov	sp, r7
 8000c54:	b002      	add	sp, #8
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	20000230 	.word	0x20000230

08000c5c <handle_range>:

/*
 * Modbus Slave Data Value Range Handler
 */
void handle_range(uint16_t holding_register)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	0002      	movs	r2, r0
 8000c64:	1dbb      	adds	r3, r7, #6
 8000c66:	801a      	strh	r2, [r3, #0]
	switch(holding_register)
 8000c68:	1dbb      	adds	r3, r7, #6
 8000c6a:	881b      	ldrh	r3, [r3, #0]
 8000c6c:	2b24      	cmp	r3, #36	@ 0x24
 8000c6e:	dd00      	ble.n	8000c72 <handle_range+0x16>
 8000c70:	e058      	b.n	8000d24 <handle_range+0xc8>
 8000c72:	2b22      	cmp	r3, #34	@ 0x22
 8000c74:	da3f      	bge.n	8000cf6 <handle_range+0x9a>
 8000c76:	2b02      	cmp	r3, #2
 8000c78:	d02f      	beq.n	8000cda <handle_range+0x7e>
 8000c7a:	dc53      	bgt.n	8000d24 <handle_range+0xc8>
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d002      	beq.n	8000c86 <handle_range+0x2a>
 8000c80:	2b01      	cmp	r3, #1
 8000c82:	d00e      	beq.n	8000ca2 <handle_range+0x46>
				holding_register_database[holding_register] = 0x0FFF;
			}
			break;
		}
	}
}
 8000c84:	e04e      	b.n	8000d24 <handle_range+0xc8>
			if(holding_register_database[holding_register] > 0xFF)
 8000c86:	1dbb      	adds	r3, r7, #6
 8000c88:	881a      	ldrh	r2, [r3, #0]
 8000c8a:	4b28      	ldr	r3, [pc, #160]	@ (8000d2c <handle_range+0xd0>)
 8000c8c:	0052      	lsls	r2, r2, #1
 8000c8e:	5ad3      	ldrh	r3, [r2, r3]
 8000c90:	2bff      	cmp	r3, #255	@ 0xff
 8000c92:	d940      	bls.n	8000d16 <handle_range+0xba>
				holding_register_database[holding_register] = 0xFF;
 8000c94:	1dbb      	adds	r3, r7, #6
 8000c96:	881a      	ldrh	r2, [r3, #0]
 8000c98:	4b24      	ldr	r3, [pc, #144]	@ (8000d2c <handle_range+0xd0>)
 8000c9a:	0052      	lsls	r2, r2, #1
 8000c9c:	21ff      	movs	r1, #255	@ 0xff
 8000c9e:	52d1      	strh	r1, [r2, r3]
			break;
 8000ca0:	e039      	b.n	8000d16 <handle_range+0xba>
			if(holding_register_database[holding_register] < 2)
 8000ca2:	1dbb      	adds	r3, r7, #6
 8000ca4:	881a      	ldrh	r2, [r3, #0]
 8000ca6:	4b21      	ldr	r3, [pc, #132]	@ (8000d2c <handle_range+0xd0>)
 8000ca8:	0052      	lsls	r2, r2, #1
 8000caa:	5ad3      	ldrh	r3, [r2, r3]
 8000cac:	2b01      	cmp	r3, #1
 8000cae:	d806      	bhi.n	8000cbe <handle_range+0x62>
				holding_register_database[holding_register] = 2;
 8000cb0:	1dbb      	adds	r3, r7, #6
 8000cb2:	881a      	ldrh	r2, [r3, #0]
 8000cb4:	4b1d      	ldr	r3, [pc, #116]	@ (8000d2c <handle_range+0xd0>)
 8000cb6:	0052      	lsls	r2, r2, #1
 8000cb8:	2102      	movs	r1, #2
 8000cba:	52d1      	strh	r1, [r2, r3]
			break;
 8000cbc:	e02d      	b.n	8000d1a <handle_range+0xbe>
			else if(holding_register_database[holding_register] > 9)
 8000cbe:	1dbb      	adds	r3, r7, #6
 8000cc0:	881a      	ldrh	r2, [r3, #0]
 8000cc2:	4b1a      	ldr	r3, [pc, #104]	@ (8000d2c <handle_range+0xd0>)
 8000cc4:	0052      	lsls	r2, r2, #1
 8000cc6:	5ad3      	ldrh	r3, [r2, r3]
 8000cc8:	2b09      	cmp	r3, #9
 8000cca:	d926      	bls.n	8000d1a <handle_range+0xbe>
				holding_register_database[holding_register] = 9;
 8000ccc:	1dbb      	adds	r3, r7, #6
 8000cce:	881a      	ldrh	r2, [r3, #0]
 8000cd0:	4b16      	ldr	r3, [pc, #88]	@ (8000d2c <handle_range+0xd0>)
 8000cd2:	0052      	lsls	r2, r2, #1
 8000cd4:	2109      	movs	r1, #9
 8000cd6:	52d1      	strh	r1, [r2, r3]
			break;
 8000cd8:	e01f      	b.n	8000d1a <handle_range+0xbe>
			if(holding_register_database[holding_register] > 1)
 8000cda:	1dbb      	adds	r3, r7, #6
 8000cdc:	881a      	ldrh	r2, [r3, #0]
 8000cde:	4b13      	ldr	r3, [pc, #76]	@ (8000d2c <handle_range+0xd0>)
 8000ce0:	0052      	lsls	r2, r2, #1
 8000ce2:	5ad3      	ldrh	r3, [r2, r3]
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	d91a      	bls.n	8000d1e <handle_range+0xc2>
				holding_register_database[holding_register] = 1;
 8000ce8:	1dbb      	adds	r3, r7, #6
 8000cea:	881a      	ldrh	r2, [r3, #0]
 8000cec:	4b0f      	ldr	r3, [pc, #60]	@ (8000d2c <handle_range+0xd0>)
 8000cee:	0052      	lsls	r2, r2, #1
 8000cf0:	2101      	movs	r1, #1
 8000cf2:	52d1      	strh	r1, [r2, r3]
			break;
 8000cf4:	e013      	b.n	8000d1e <handle_range+0xc2>
			if(holding_register_database[holding_register] > 0x0FFF)
 8000cf6:	1dbb      	adds	r3, r7, #6
 8000cf8:	881a      	ldrh	r2, [r3, #0]
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <handle_range+0xd0>)
 8000cfc:	0052      	lsls	r2, r2, #1
 8000cfe:	5ad2      	ldrh	r2, [r2, r3]
 8000d00:	2380      	movs	r3, #128	@ 0x80
 8000d02:	015b      	lsls	r3, r3, #5
 8000d04:	429a      	cmp	r2, r3
 8000d06:	d30c      	bcc.n	8000d22 <handle_range+0xc6>
				holding_register_database[holding_register] = 0x0FFF;
 8000d08:	1dbb      	adds	r3, r7, #6
 8000d0a:	881a      	ldrh	r2, [r3, #0]
 8000d0c:	4b07      	ldr	r3, [pc, #28]	@ (8000d2c <handle_range+0xd0>)
 8000d0e:	0052      	lsls	r2, r2, #1
 8000d10:	4907      	ldr	r1, [pc, #28]	@ (8000d30 <handle_range+0xd4>)
 8000d12:	52d1      	strh	r1, [r2, r3]
			break;
 8000d14:	e005      	b.n	8000d22 <handle_range+0xc6>
			break;
 8000d16:	46c0      	nop			@ (mov r8, r8)
 8000d18:	e004      	b.n	8000d24 <handle_range+0xc8>
			break;
 8000d1a:	46c0      	nop			@ (mov r8, r8)
 8000d1c:	e002      	b.n	8000d24 <handle_range+0xc8>
			break;
 8000d1e:	46c0      	nop			@ (mov r8, r8)
 8000d20:	e000      	b.n	8000d24 <handle_range+0xc8>
			break;
 8000d22:	46c0      	nop			@ (mov r8, r8)
}
 8000d24:	46c0      	nop			@ (mov r8, r8)
 8000d26:	46bd      	mov	sp, r7
 8000d28:	b002      	add	sp, #8
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	20000000 	.word	0x20000000
 8000d30:	00000fff 	.word	0x00000fff

08000d34 <modbus_send>:

/*
	General Modbus send function
 */
int8_t modbus_send(uint8_t *data, uint8_t size)
{
 8000d34:	b5b0      	push	{r4, r5, r7, lr}
 8000d36:	b084      	sub	sp, #16
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
 8000d3c:	000a      	movs	r2, r1
 8000d3e:	1cfb      	adds	r3, r7, #3
 8000d40:	701a      	strb	r2, [r3, #0]
	// Append CRC (low byte then high byte)
	uint16_t crc = crc_16(modbus_tx_buffer, size);
 8000d42:	250e      	movs	r5, #14
 8000d44:	197c      	adds	r4, r7, r5
 8000d46:	1cfb      	adds	r3, r7, #3
 8000d48:	781a      	ldrb	r2, [r3, #0]
 8000d4a:	4b2a      	ldr	r3, [pc, #168]	@ (8000df4 <modbus_send+0xc0>)
 8000d4c:	0011      	movs	r1, r2
 8000d4e:	0018      	movs	r0, r3
 8000d50:	f000 f8f6 	bl	8000f40 <crc_16>
 8000d54:	0003      	movs	r3, r0
 8000d56:	8023      	strh	r3, [r4, #0]
	modbus_tx_buffer[size] = low_byte(crc);
 8000d58:	1cfb      	adds	r3, r7, #3
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	197a      	adds	r2, r7, r5
 8000d5e:	8812      	ldrh	r2, [r2, #0]
 8000d60:	b2d1      	uxtb	r1, r2
 8000d62:	4a24      	ldr	r2, [pc, #144]	@ (8000df4 <modbus_send+0xc0>)
 8000d64:	54d1      	strb	r1, [r2, r3]
	modbus_tx_buffer[size + 1] = high_byte(crc);
 8000d66:	197b      	adds	r3, r7, r5
 8000d68:	881b      	ldrh	r3, [r3, #0]
 8000d6a:	0a1b      	lsrs	r3, r3, #8
 8000d6c:	b29a      	uxth	r2, r3
 8000d6e:	1cfb      	adds	r3, r7, #3
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	3301      	adds	r3, #1
 8000d74:	b2d1      	uxtb	r1, r2
 8000d76:	4a1f      	ldr	r2, [pc, #124]	@ (8000df4 <modbus_send+0xc0>)
 8000d78:	54d1      	strb	r1, [r2, r3]

	int8_t status = HAL_OK;
 8000d7a:	240d      	movs	r4, #13
 8000d7c:	193b      	adds	r3, r7, r4
 8000d7e:	2200      	movs	r2, #0
 8000d80:	701a      	strb	r2, [r3, #0]
	status = HAL_UART_Transmit_IT(&huart1, modbus_tx_buffer, size + 2);
 8000d82:	1cfb      	adds	r3, r7, #3
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	b29b      	uxth	r3, r3
 8000d88:	3302      	adds	r3, #2
 8000d8a:	b29a      	uxth	r2, r3
 8000d8c:	4919      	ldr	r1, [pc, #100]	@ (8000df4 <modbus_send+0xc0>)
 8000d8e:	4b1a      	ldr	r3, [pc, #104]	@ (8000df8 <modbus_send+0xc4>)
 8000d90:	0018      	movs	r0, r3
 8000d92:	f001 fd71 	bl	8002878 <HAL_UART_Transmit_IT>
 8000d96:	0003      	movs	r3, r0
 8000d98:	001a      	movs	r2, r3
 8000d9a:	193b      	adds	r3, r7, r4
 8000d9c:	701a      	strb	r2, [r3, #0]
	if(status != HAL_OK)
 8000d9e:	193b      	adds	r3, r7, r4
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	b25b      	sxtb	r3, r3
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d003      	beq.n	8000db0 <modbus_send+0x7c>
	{
		return status;
 8000da8:	193b      	adds	r3, r7, r4
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	b25b      	sxtb	r3, r3
 8000dae:	e01d      	b.n	8000dec <modbus_send+0xb8>
	}
	time = HAL_GetTick();
 8000db0:	f000 faec 	bl	800138c <HAL_GetTick>
 8000db4:	0002      	movs	r2, r0
 8000db6:	4b11      	ldr	r3, [pc, #68]	@ (8000dfc <modbus_send+0xc8>)
 8000db8:	601a      	str	r2, [r3, #0]
	while(!tx_int && ((HAL_GetTick()) - time < 100));
 8000dba:	46c0      	nop			@ (mov r8, r8)
 8000dbc:	4b10      	ldr	r3, [pc, #64]	@ (8000e00 <modbus_send+0xcc>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d107      	bne.n	8000dd6 <modbus_send+0xa2>
 8000dc6:	f000 fae1 	bl	800138c <HAL_GetTick>
 8000dca:	0002      	movs	r2, r0
 8000dcc:	4b0b      	ldr	r3, [pc, #44]	@ (8000dfc <modbus_send+0xc8>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	1ad3      	subs	r3, r2, r3
 8000dd2:	2b63      	cmp	r3, #99	@ 0x63
 8000dd4:	d9f2      	bls.n	8000dbc <modbus_send+0x88>
	if(tx_int)
 8000dd6:	4b0a      	ldr	r3, [pc, #40]	@ (8000e00 <modbus_send+0xcc>)
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	b2db      	uxtb	r3, r3
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d004      	beq.n	8000dea <modbus_send+0xb6>
	{
		tx_int = 0;
 8000de0:	4b07      	ldr	r3, [pc, #28]	@ (8000e00 <modbus_send+0xcc>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	701a      	strb	r2, [r3, #0]
		return HAL_OK;
 8000de6:	2300      	movs	r3, #0
 8000de8:	e000      	b.n	8000dec <modbus_send+0xb8>
	}
	else
	{
		return HAL_TIMEOUT;
 8000dea:	2303      	movs	r3, #3
	}
}
 8000dec:	0018      	movs	r0, r3
 8000dee:	46bd      	mov	sp, r7
 8000df0:	b004      	add	sp, #16
 8000df2:	bdb0      	pop	{r4, r5, r7, pc}
 8000df4:	20000230 	.word	0x20000230
 8000df8:	20000040 	.word	0x20000040
 8000dfc:	2000042c 	.word	0x2000042c
 8000e00:	2000043b 	.word	0x2000043b

08000e04 <modbus_rx>:

/*
	General Modbus check for reception function
 */
uint8_t modbus_rx()
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
	if(rx_int)
 8000e08:	4b08      	ldr	r3, [pc, #32]	@ (8000e2c <modbus_rx+0x28>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d004      	beq.n	8000e1c <modbus_rx+0x18>
	{
		rx_int = 0;
 8000e12:	4b06      	ldr	r3, [pc, #24]	@ (8000e2c <modbus_rx+0x28>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	701a      	strb	r2, [r3, #0]
		return 1;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	e004      	b.n	8000e26 <modbus_rx+0x22>
	}
	if(handle_chunk_miss() != HAL_OK)
 8000e1c:	f7ff fcfe 	bl	800081c <handle_chunk_miss>
	{
		// TODO: log the error when startup the UART back up
	}
	return rx_int;
 8000e20:	4b02      	ldr	r3, [pc, #8]	@ (8000e2c <modbus_rx+0x28>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	b2db      	uxtb	r3, r3
}
 8000e26:	0018      	movs	r0, r3
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	2000043a 	.word	0x2000043a

08000e30 <modbus_set_rx>:

/*
	General Modbus set chip in receive mode
 */
int8_t modbus_set_rx()
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
	int8_t status = HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rx_chunk, 6);
 8000e36:	490c      	ldr	r1, [pc, #48]	@ (8000e68 <modbus_set_rx+0x38>)
 8000e38:	4b0c      	ldr	r3, [pc, #48]	@ (8000e6c <modbus_set_rx+0x3c>)
 8000e3a:	2206      	movs	r2, #6
 8000e3c:	0018      	movs	r0, r3
 8000e3e:	f003 fbad 	bl	800459c <HAL_UARTEx_ReceiveToIdle_DMA>
 8000e42:	0003      	movs	r3, r0
 8000e44:	001a      	movs	r2, r3
 8000e46:	1dfb      	adds	r3, r7, #7
 8000e48:	701a      	strb	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8000e4a:	4b09      	ldr	r3, [pc, #36]	@ (8000e70 <modbus_set_rx+0x40>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	4b07      	ldr	r3, [pc, #28]	@ (8000e70 <modbus_set_rx+0x40>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	2104      	movs	r1, #4
 8000e56:	438a      	bics	r2, r1
 8000e58:	601a      	str	r2, [r3, #0]

	return status;
 8000e5a:	1dfb      	adds	r3, r7, #7
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	b25b      	sxtb	r3, r3
}
 8000e60:	0018      	movs	r0, r3
 8000e62:	46bd      	mov	sp, r7
 8000e64:	b002      	add	sp, #8
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	20000330 	.word	0x20000330
 8000e6c:	20000040 	.word	0x20000040
 8000e70:	200000d4 	.word	0x200000d4

08000e74 <modbus_change_baud_rate>:


// General Modbus Control Functions ------------------------------------------------------------

int8_t modbus_change_baud_rate()
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
	int8_t status = 0;
 8000e7a:	1dfb      	adds	r3, r7, #7
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	701a      	strb	r2, [r3, #0]

	switch(holding_register_database[1])
 8000e80:	4b2c      	ldr	r3, [pc, #176]	@ (8000f34 <modbus_change_baud_rate+0xc0>)
 8000e82:	885b      	ldrh	r3, [r3, #2]
 8000e84:	2b09      	cmp	r3, #9
 8000e86:	d82c      	bhi.n	8000ee2 <modbus_change_baud_rate+0x6e>
 8000e88:	009a      	lsls	r2, r3, #2
 8000e8a:	4b2b      	ldr	r3, [pc, #172]	@ (8000f38 <modbus_change_baud_rate+0xc4>)
 8000e8c:	18d3      	adds	r3, r2, r3
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	469f      	mov	pc, r3
	{
		case BAUD_RATE_4800:
		{
			huart1.Init.BaudRate = 4800;
 8000e92:	4b2a      	ldr	r3, [pc, #168]	@ (8000f3c <modbus_change_baud_rate+0xc8>)
 8000e94:	2296      	movs	r2, #150	@ 0x96
 8000e96:	0152      	lsls	r2, r2, #5
 8000e98:	605a      	str	r2, [r3, #4]
			break;
 8000e9a:	e033      	b.n	8000f04 <modbus_change_baud_rate+0x90>
		}
		case BAUD_RATE_9600:
		{
			huart1.Init.BaudRate = 9600;
 8000e9c:	4b27      	ldr	r3, [pc, #156]	@ (8000f3c <modbus_change_baud_rate+0xc8>)
 8000e9e:	2296      	movs	r2, #150	@ 0x96
 8000ea0:	0192      	lsls	r2, r2, #6
 8000ea2:	605a      	str	r2, [r3, #4]
			break;
 8000ea4:	e02e      	b.n	8000f04 <modbus_change_baud_rate+0x90>
		}
		case BAUD_RATE_19200:
		{
			huart1.Init.BaudRate = 19200;
 8000ea6:	4b25      	ldr	r3, [pc, #148]	@ (8000f3c <modbus_change_baud_rate+0xc8>)
 8000ea8:	2296      	movs	r2, #150	@ 0x96
 8000eaa:	01d2      	lsls	r2, r2, #7
 8000eac:	605a      	str	r2, [r3, #4]
			break;
 8000eae:	e029      	b.n	8000f04 <modbus_change_baud_rate+0x90>
		}
		case BAUD_RATE_38400:
		{
			huart1.Init.BaudRate = 38400;
 8000eb0:	4b22      	ldr	r3, [pc, #136]	@ (8000f3c <modbus_change_baud_rate+0xc8>)
 8000eb2:	2296      	movs	r2, #150	@ 0x96
 8000eb4:	0212      	lsls	r2, r2, #8
 8000eb6:	605a      	str	r2, [r3, #4]
			break;
 8000eb8:	e024      	b.n	8000f04 <modbus_change_baud_rate+0x90>
		}
		case BAUD_RATE_57600:
		{
			huart1.Init.BaudRate = 57600;
 8000eba:	4b20      	ldr	r3, [pc, #128]	@ (8000f3c <modbus_change_baud_rate+0xc8>)
 8000ebc:	22e1      	movs	r2, #225	@ 0xe1
 8000ebe:	0212      	lsls	r2, r2, #8
 8000ec0:	605a      	str	r2, [r3, #4]
			break;
 8000ec2:	e01f      	b.n	8000f04 <modbus_change_baud_rate+0x90>
		}
		case BAUD_RATE_115200:
		{
			huart1.Init.BaudRate = 115200;
 8000ec4:	4b1d      	ldr	r3, [pc, #116]	@ (8000f3c <modbus_change_baud_rate+0xc8>)
 8000ec6:	22e1      	movs	r2, #225	@ 0xe1
 8000ec8:	0252      	lsls	r2, r2, #9
 8000eca:	605a      	str	r2, [r3, #4]
			break;
 8000ecc:	e01a      	b.n	8000f04 <modbus_change_baud_rate+0x90>
		}
		case BAUD_RATE_128000:
		{
			huart1.Init.BaudRate = 128000;
 8000ece:	4b1b      	ldr	r3, [pc, #108]	@ (8000f3c <modbus_change_baud_rate+0xc8>)
 8000ed0:	22fa      	movs	r2, #250	@ 0xfa
 8000ed2:	0252      	lsls	r2, r2, #9
 8000ed4:	605a      	str	r2, [r3, #4]
			break;
 8000ed6:	e015      	b.n	8000f04 <modbus_change_baud_rate+0x90>
		}
		case BAUD_RATE_256000:
		{
			huart1.Init.BaudRate = 256000;
 8000ed8:	4b18      	ldr	r3, [pc, #96]	@ (8000f3c <modbus_change_baud_rate+0xc8>)
 8000eda:	22fa      	movs	r2, #250	@ 0xfa
 8000edc:	0292      	lsls	r2, r2, #10
 8000ede:	605a      	str	r2, [r3, #4]
			break;
 8000ee0:	e010      	b.n	8000f04 <modbus_change_baud_rate+0x90>
		}
		default:
		{
			holding_register_database[1] = BAUD_RATE_9600;
 8000ee2:	4b14      	ldr	r3, [pc, #80]	@ (8000f34 <modbus_change_baud_rate+0xc0>)
 8000ee4:	2203      	movs	r2, #3
 8000ee6:	805a      	strh	r2, [r3, #2]
			huart1.Init.BaudRate = 9600;
 8000ee8:	4b14      	ldr	r3, [pc, #80]	@ (8000f3c <modbus_change_baud_rate+0xc8>)
 8000eea:	2296      	movs	r2, #150	@ 0x96
 8000eec:	0192      	lsls	r2, r2, #6
 8000eee:	605a      	str	r2, [r3, #4]
			status = UART_SetConfig(&huart1);
 8000ef0:	4b12      	ldr	r3, [pc, #72]	@ (8000f3c <modbus_change_baud_rate+0xc8>)
 8000ef2:	0018      	movs	r0, r3
 8000ef4:	f002 fa02 	bl	80032fc <UART_SetConfig>
 8000ef8:	0003      	movs	r3, r0
 8000efa:	001a      	movs	r2, r3
 8000efc:	1dfb      	adds	r3, r7, #7
 8000efe:	701a      	strb	r2, [r3, #0]
			if(status == HAL_OK)
			{
				//HAL_UART_Abort_IT(&huart1);
			}
			return MB_ILLEGAL_DATA_VALUE;
 8000f00:	2306      	movs	r3, #6
 8000f02:	e013      	b.n	8000f2c <modbus_change_baud_rate+0xb8>
			break;
		}

	}
	status = UART_SetConfig(&huart1);
 8000f04:	4b0d      	ldr	r3, [pc, #52]	@ (8000f3c <modbus_change_baud_rate+0xc8>)
 8000f06:	0018      	movs	r0, r3
 8000f08:	f002 f9f8 	bl	80032fc <UART_SetConfig>
 8000f0c:	0003      	movs	r3, r0
 8000f0e:	001a      	movs	r2, r3
 8000f10:	1dfb      	adds	r3, r7, #7
 8000f12:	701a      	strb	r2, [r3, #0]
	if(status == HAL_OK)
	{
		//status = HAL_UART_Abort_IT(&huart1);
	}

	if(status != HAL_OK)
 8000f14:	1dfb      	adds	r3, r7, #7
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	b25b      	sxtb	r3, r3
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d003      	beq.n	8000f26 <modbus_change_baud_rate+0xb2>
	{
		return status;
 8000f1e:	1dfb      	adds	r3, r7, #7
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	b25b      	sxtb	r3, r3
 8000f24:	e002      	b.n	8000f2c <modbus_change_baud_rate+0xb8>
	}

	//status = HAL_UART_Receive_IT(huart, pData, Size)

	return status;
 8000f26:	1dfb      	adds	r3, r7, #7
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	b25b      	sxtb	r3, r3
}
 8000f2c:	0018      	movs	r0, r3
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	b002      	add	sp, #8
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	20000000 	.word	0x20000000
 8000f38:	080049ac 	.word	0x080049ac
 8000f3c:	20000040 	.word	0x20000040

08000f40 <crc_16>:
  }
}

// CRC Generation Function
uint16_t crc_16(uint8_t *data, uint8_t size)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	000a      	movs	r2, r1
 8000f4a:	1cfb      	adds	r3, r7, #3
 8000f4c:	701a      	strb	r2, [r3, #0]
	uint8_t crc_hi = 0xFF;
 8000f4e:	230f      	movs	r3, #15
 8000f50:	18fb      	adds	r3, r7, r3
 8000f52:	22ff      	movs	r2, #255	@ 0xff
 8000f54:	701a      	strb	r2, [r3, #0]
	uint8_t crc_low = 0xFF;
 8000f56:	230e      	movs	r3, #14
 8000f58:	18fb      	adds	r3, r7, r3
 8000f5a:	22ff      	movs	r2, #255	@ 0xff
 8000f5c:	701a      	strb	r2, [r3, #0]
	 unsigned int i; /* will index into CRC lookup */

	/* pass through message buffer */
	while (size--)
 8000f5e:	e019      	b.n	8000f94 <crc_16+0x54>
	{
		i = crc_low ^ *data++; /* calculate the CRC  */
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	1c5a      	adds	r2, r3, #1
 8000f64:	607a      	str	r2, [r7, #4]
 8000f66:	781a      	ldrb	r2, [r3, #0]
 8000f68:	200e      	movs	r0, #14
 8000f6a:	183b      	adds	r3, r7, r0
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	4053      	eors	r3, r2
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	60bb      	str	r3, [r7, #8]
		crc_low = crc_hi ^ table_crc_hi[i];
 8000f74:	4a13      	ldr	r2, [pc, #76]	@ (8000fc4 <crc_16+0x84>)
 8000f76:	68bb      	ldr	r3, [r7, #8]
 8000f78:	18d3      	adds	r3, r2, r3
 8000f7a:	7819      	ldrb	r1, [r3, #0]
 8000f7c:	183b      	adds	r3, r7, r0
 8000f7e:	200f      	movs	r0, #15
 8000f80:	183a      	adds	r2, r7, r0
 8000f82:	7812      	ldrb	r2, [r2, #0]
 8000f84:	404a      	eors	r2, r1
 8000f86:	701a      	strb	r2, [r3, #0]
		crc_hi = table_crc_lo[i];
 8000f88:	183b      	adds	r3, r7, r0
 8000f8a:	490f      	ldr	r1, [pc, #60]	@ (8000fc8 <crc_16+0x88>)
 8000f8c:	68ba      	ldr	r2, [r7, #8]
 8000f8e:	188a      	adds	r2, r1, r2
 8000f90:	7812      	ldrb	r2, [r2, #0]
 8000f92:	701a      	strb	r2, [r3, #0]
	while (size--)
 8000f94:	1cfb      	adds	r3, r7, #3
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	1cfa      	adds	r2, r7, #3
 8000f9a:	1e59      	subs	r1, r3, #1
 8000f9c:	7011      	strb	r1, [r2, #0]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d1de      	bne.n	8000f60 <crc_16+0x20>
	}

	return (crc_hi << 8 | crc_low);
 8000fa2:	230f      	movs	r3, #15
 8000fa4:	18fb      	adds	r3, r7, r3
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	021b      	lsls	r3, r3, #8
 8000faa:	b21a      	sxth	r2, r3
 8000fac:	230e      	movs	r3, #14
 8000fae:	18fb      	adds	r3, r7, r3
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	b21b      	sxth	r3, r3
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	b21b      	sxth	r3, r3
 8000fb8:	b29b      	uxth	r3, r3
}
 8000fba:	0018      	movs	r0, r3
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	b004      	add	sp, #16
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	46c0      	nop			@ (mov r8, r8)
 8000fc4:	080047ac 	.word	0x080047ac
 8000fc8:	080048ac 	.word	0x080048ac

08000fcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fd2:	4b0f      	ldr	r3, [pc, #60]	@ (8001010 <HAL_MspInit+0x44>)
 8000fd4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000fd6:	4b0e      	ldr	r3, [pc, #56]	@ (8001010 <HAL_MspInit+0x44>)
 8000fd8:	2101      	movs	r1, #1
 8000fda:	430a      	orrs	r2, r1
 8000fdc:	641a      	str	r2, [r3, #64]	@ 0x40
 8000fde:	4b0c      	ldr	r3, [pc, #48]	@ (8001010 <HAL_MspInit+0x44>)
 8000fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	607b      	str	r3, [r7, #4]
 8000fe8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fea:	4b09      	ldr	r3, [pc, #36]	@ (8001010 <HAL_MspInit+0x44>)
 8000fec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000fee:	4b08      	ldr	r3, [pc, #32]	@ (8001010 <HAL_MspInit+0x44>)
 8000ff0:	2180      	movs	r1, #128	@ 0x80
 8000ff2:	0549      	lsls	r1, r1, #21
 8000ff4:	430a      	orrs	r2, r1
 8000ff6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000ff8:	4b05      	ldr	r3, [pc, #20]	@ (8001010 <HAL_MspInit+0x44>)
 8000ffa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000ffc:	2380      	movs	r3, #128	@ 0x80
 8000ffe:	055b      	lsls	r3, r3, #21
 8001000:	4013      	ands	r3, r2
 8001002:	603b      	str	r3, [r7, #0]
 8001004:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001006:	46c0      	nop			@ (mov r8, r8)
 8001008:	46bd      	mov	sp, r7
 800100a:	b002      	add	sp, #8
 800100c:	bd80      	pop	{r7, pc}
 800100e:	46c0      	nop			@ (mov r8, r8)
 8001010:	40021000 	.word	0x40021000

08001014 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001014:	b590      	push	{r4, r7, lr}
 8001016:	b095      	sub	sp, #84	@ 0x54
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101c:	233c      	movs	r3, #60	@ 0x3c
 800101e:	18fb      	adds	r3, r7, r3
 8001020:	0018      	movs	r0, r3
 8001022:	2314      	movs	r3, #20
 8001024:	001a      	movs	r2, r3
 8001026:	2100      	movs	r1, #0
 8001028:	f003 fb7e 	bl	8004728 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800102c:	241c      	movs	r4, #28
 800102e:	193b      	adds	r3, r7, r4
 8001030:	0018      	movs	r0, r3
 8001032:	2320      	movs	r3, #32
 8001034:	001a      	movs	r2, r3
 8001036:	2100      	movs	r1, #0
 8001038:	f003 fb76 	bl	8004728 <memset>
  if(huart->Instance==USART1)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a5f      	ldr	r2, [pc, #380]	@ (80011c0 <HAL_UART_MspInit+0x1ac>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d000      	beq.n	8001048 <HAL_UART_MspInit+0x34>
 8001046:	e0b6      	b.n	80011b6 <HAL_UART_MspInit+0x1a2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001048:	193b      	adds	r3, r7, r4
 800104a:	2201      	movs	r2, #1
 800104c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800104e:	193b      	adds	r3, r7, r4
 8001050:	2200      	movs	r2, #0
 8001052:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001054:	193b      	adds	r3, r7, r4
 8001056:	0018      	movs	r0, r3
 8001058:	f001 fb12 	bl	8002680 <HAL_RCCEx_PeriphCLKConfig>
 800105c:	1e03      	subs	r3, r0, #0
 800105e:	d001      	beq.n	8001064 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8001060:	f7ff fb1e 	bl	80006a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001064:	4b57      	ldr	r3, [pc, #348]	@ (80011c4 <HAL_UART_MspInit+0x1b0>)
 8001066:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001068:	4b56      	ldr	r3, [pc, #344]	@ (80011c4 <HAL_UART_MspInit+0x1b0>)
 800106a:	2180      	movs	r1, #128	@ 0x80
 800106c:	01c9      	lsls	r1, r1, #7
 800106e:	430a      	orrs	r2, r1
 8001070:	641a      	str	r2, [r3, #64]	@ 0x40
 8001072:	4b54      	ldr	r3, [pc, #336]	@ (80011c4 <HAL_UART_MspInit+0x1b0>)
 8001074:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001076:	2380      	movs	r3, #128	@ 0x80
 8001078:	01db      	lsls	r3, r3, #7
 800107a:	4013      	ands	r3, r2
 800107c:	61bb      	str	r3, [r7, #24]
 800107e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001080:	4b50      	ldr	r3, [pc, #320]	@ (80011c4 <HAL_UART_MspInit+0x1b0>)
 8001082:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001084:	4b4f      	ldr	r3, [pc, #316]	@ (80011c4 <HAL_UART_MspInit+0x1b0>)
 8001086:	2104      	movs	r1, #4
 8001088:	430a      	orrs	r2, r1
 800108a:	635a      	str	r2, [r3, #52]	@ 0x34
 800108c:	4b4d      	ldr	r3, [pc, #308]	@ (80011c4 <HAL_UART_MspInit+0x1b0>)
 800108e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001090:	2204      	movs	r2, #4
 8001092:	4013      	ands	r3, r2
 8001094:	617b      	str	r3, [r7, #20]
 8001096:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001098:	4b4a      	ldr	r3, [pc, #296]	@ (80011c4 <HAL_UART_MspInit+0x1b0>)
 800109a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800109c:	4b49      	ldr	r3, [pc, #292]	@ (80011c4 <HAL_UART_MspInit+0x1b0>)
 800109e:	2102      	movs	r1, #2
 80010a0:	430a      	orrs	r2, r1
 80010a2:	635a      	str	r2, [r3, #52]	@ 0x34
 80010a4:	4b47      	ldr	r3, [pc, #284]	@ (80011c4 <HAL_UART_MspInit+0x1b0>)
 80010a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010a8:	2202      	movs	r2, #2
 80010aa:	4013      	ands	r3, r2
 80010ac:	613b      	str	r3, [r7, #16]
 80010ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b0:	4b44      	ldr	r3, [pc, #272]	@ (80011c4 <HAL_UART_MspInit+0x1b0>)
 80010b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80010b4:	4b43      	ldr	r3, [pc, #268]	@ (80011c4 <HAL_UART_MspInit+0x1b0>)
 80010b6:	2101      	movs	r1, #1
 80010b8:	430a      	orrs	r2, r1
 80010ba:	635a      	str	r2, [r3, #52]	@ 0x34
 80010bc:	4b41      	ldr	r3, [pc, #260]	@ (80011c4 <HAL_UART_MspInit+0x1b0>)
 80010be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010c0:	2201      	movs	r2, #1
 80010c2:	4013      	ands	r3, r2
 80010c4:	60fb      	str	r3, [r7, #12]
 80010c6:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC14-OSCX_IN(PC14)     ------> USART1_TX
    PB2     ------> USART1_RX
    PA12 [PA10]     ------> USART1_DE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80010c8:	213c      	movs	r1, #60	@ 0x3c
 80010ca:	187b      	adds	r3, r7, r1
 80010cc:	2280      	movs	r2, #128	@ 0x80
 80010ce:	01d2      	lsls	r2, r2, #7
 80010d0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d2:	000c      	movs	r4, r1
 80010d4:	193b      	adds	r3, r7, r4
 80010d6:	2202      	movs	r2, #2
 80010d8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010da:	193b      	adds	r3, r7, r4
 80010dc:	2200      	movs	r2, #0
 80010de:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e0:	193b      	adds	r3, r7, r4
 80010e2:	2200      	movs	r2, #0
 80010e4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 80010e6:	193b      	adds	r3, r7, r4
 80010e8:	2200      	movs	r2, #0
 80010ea:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010ec:	193b      	adds	r3, r7, r4
 80010ee:	4a36      	ldr	r2, [pc, #216]	@ (80011c8 <HAL_UART_MspInit+0x1b4>)
 80010f0:	0019      	movs	r1, r3
 80010f2:	0010      	movs	r0, r2
 80010f4:	f000 fd86 	bl	8001c04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80010f8:	193b      	adds	r3, r7, r4
 80010fa:	2204      	movs	r2, #4
 80010fc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fe:	193b      	adds	r3, r7, r4
 8001100:	2202      	movs	r2, #2
 8001102:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001104:	193b      	adds	r3, r7, r4
 8001106:	2200      	movs	r2, #0
 8001108:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110a:	193b      	adds	r3, r7, r4
 800110c:	2200      	movs	r2, #0
 800110e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8001110:	193b      	adds	r3, r7, r4
 8001112:	2200      	movs	r2, #0
 8001114:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001116:	193b      	adds	r3, r7, r4
 8001118:	4a2c      	ldr	r2, [pc, #176]	@ (80011cc <HAL_UART_MspInit+0x1b8>)
 800111a:	0019      	movs	r1, r3
 800111c:	0010      	movs	r0, r2
 800111e:	f000 fd71 	bl	8001c04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001122:	0021      	movs	r1, r4
 8001124:	187b      	adds	r3, r7, r1
 8001126:	2280      	movs	r2, #128	@ 0x80
 8001128:	0152      	lsls	r2, r2, #5
 800112a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112c:	187b      	adds	r3, r7, r1
 800112e:	2202      	movs	r2, #2
 8001130:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001132:	187b      	adds	r3, r7, r1
 8001134:	2200      	movs	r2, #0
 8001136:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001138:	187b      	adds	r3, r7, r1
 800113a:	2200      	movs	r2, #0
 800113c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800113e:	187b      	adds	r3, r7, r1
 8001140:	2201      	movs	r2, #1
 8001142:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001144:	187a      	adds	r2, r7, r1
 8001146:	23a0      	movs	r3, #160	@ 0xa0
 8001148:	05db      	lsls	r3, r3, #23
 800114a:	0011      	movs	r1, r2
 800114c:	0018      	movs	r0, r3
 800114e:	f000 fd59 	bl	8001c04 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8001152:	4b1f      	ldr	r3, [pc, #124]	@ (80011d0 <HAL_UART_MspInit+0x1bc>)
 8001154:	4a1f      	ldr	r2, [pc, #124]	@ (80011d4 <HAL_UART_MspInit+0x1c0>)
 8001156:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001158:	4b1d      	ldr	r3, [pc, #116]	@ (80011d0 <HAL_UART_MspInit+0x1bc>)
 800115a:	2232      	movs	r2, #50	@ 0x32
 800115c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800115e:	4b1c      	ldr	r3, [pc, #112]	@ (80011d0 <HAL_UART_MspInit+0x1bc>)
 8001160:	2200      	movs	r2, #0
 8001162:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001164:	4b1a      	ldr	r3, [pc, #104]	@ (80011d0 <HAL_UART_MspInit+0x1bc>)
 8001166:	2200      	movs	r2, #0
 8001168:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800116a:	4b19      	ldr	r3, [pc, #100]	@ (80011d0 <HAL_UART_MspInit+0x1bc>)
 800116c:	2280      	movs	r2, #128	@ 0x80
 800116e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001170:	4b17      	ldr	r3, [pc, #92]	@ (80011d0 <HAL_UART_MspInit+0x1bc>)
 8001172:	2200      	movs	r2, #0
 8001174:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001176:	4b16      	ldr	r3, [pc, #88]	@ (80011d0 <HAL_UART_MspInit+0x1bc>)
 8001178:	2200      	movs	r2, #0
 800117a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800117c:	4b14      	ldr	r3, [pc, #80]	@ (80011d0 <HAL_UART_MspInit+0x1bc>)
 800117e:	2200      	movs	r2, #0
 8001180:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001182:	4b13      	ldr	r3, [pc, #76]	@ (80011d0 <HAL_UART_MspInit+0x1bc>)
 8001184:	2200      	movs	r2, #0
 8001186:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001188:	4b11      	ldr	r3, [pc, #68]	@ (80011d0 <HAL_UART_MspInit+0x1bc>)
 800118a:	0018      	movs	r0, r3
 800118c:	f000 fa0a 	bl	80015a4 <HAL_DMA_Init>
 8001190:	1e03      	subs	r3, r0, #0
 8001192:	d001      	beq.n	8001198 <HAL_UART_MspInit+0x184>
    {
      Error_Handler();
 8001194:	f7ff fa84 	bl	80006a0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2180      	movs	r1, #128	@ 0x80
 800119c:	4a0c      	ldr	r2, [pc, #48]	@ (80011d0 <HAL_UART_MspInit+0x1bc>)
 800119e:	505a      	str	r2, [r3, r1]
 80011a0:	4b0b      	ldr	r3, [pc, #44]	@ (80011d0 <HAL_UART_MspInit+0x1bc>)
 80011a2:	687a      	ldr	r2, [r7, #4]
 80011a4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80011a6:	2200      	movs	r2, #0
 80011a8:	2100      	movs	r1, #0
 80011aa:	201b      	movs	r0, #27
 80011ac:	f000 f9c8 	bl	8001540 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80011b0:	201b      	movs	r0, #27
 80011b2:	f000 f9da 	bl	800156a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80011b6:	46c0      	nop			@ (mov r8, r8)
 80011b8:	46bd      	mov	sp, r7
 80011ba:	b015      	add	sp, #84	@ 0x54
 80011bc:	bd90      	pop	{r4, r7, pc}
 80011be:	46c0      	nop			@ (mov r8, r8)
 80011c0:	40013800 	.word	0x40013800
 80011c4:	40021000 	.word	0x40021000
 80011c8:	50000800 	.word	0x50000800
 80011cc:	50000400 	.word	0x50000400
 80011d0:	200000d4 	.word	0x200000d4
 80011d4:	40020008 	.word	0x40020008

080011d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011dc:	46c0      	nop			@ (mov r8, r8)
 80011de:	e7fd      	b.n	80011dc <NMI_Handler+0x4>

080011e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011e4:	46c0      	nop			@ (mov r8, r8)
 80011e6:	e7fd      	b.n	80011e4 <HardFault_Handler+0x4>

080011e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011ec:	46c0      	nop			@ (mov r8, r8)
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011f2:	b580      	push	{r7, lr}
 80011f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011f6:	46c0      	nop			@ (mov r8, r8)
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}

080011fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001200:	f000 f8b2 	bl	8001368 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001204:	46c0      	nop			@ (mov r8, r8)
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
	...

0800120c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001210:	4b03      	ldr	r3, [pc, #12]	@ (8001220 <DMA1_Channel1_IRQHandler+0x14>)
 8001212:	0018      	movs	r0, r3
 8001214:	f000 fbb4 	bl	8001980 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001218:	46c0      	nop			@ (mov r8, r8)
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	46c0      	nop			@ (mov r8, r8)
 8001220:	200000d4 	.word	0x200000d4

08001224 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 interrupt.
  */
void USART1_IRQHandler(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001228:	4b03      	ldr	r3, [pc, #12]	@ (8001238 <USART1_IRQHandler+0x14>)
 800122a:	0018      	movs	r0, r3
 800122c:	f001 fd00 	bl	8002c30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001230:	46c0      	nop			@ (mov r8, r8)
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	46c0      	nop			@ (mov r8, r8)
 8001238:	20000040 	.word	0x20000040

0800123c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001240:	4b03      	ldr	r3, [pc, #12]	@ (8001250 <SystemInit+0x14>)
 8001242:	2280      	movs	r2, #128	@ 0x80
 8001244:	0512      	lsls	r2, r2, #20
 8001246:	609a      	str	r2, [r3, #8]
#endif
}
 8001248:	46c0      	nop			@ (mov r8, r8)
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	46c0      	nop			@ (mov r8, r8)
 8001250:	e000ed00 	.word	0xe000ed00

08001254 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001254:	480d      	ldr	r0, [pc, #52]	@ (800128c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001256:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001258:	f7ff fff0 	bl	800123c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800125c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800125e:	e003      	b.n	8001268 <LoopCopyDataInit>

08001260 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001260:	4b0b      	ldr	r3, [pc, #44]	@ (8001290 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8001262:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001264:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001266:	3104      	adds	r1, #4

08001268 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001268:	480a      	ldr	r0, [pc, #40]	@ (8001294 <LoopForever+0xa>)
  ldr r3, =_edata
 800126a:	4b0b      	ldr	r3, [pc, #44]	@ (8001298 <LoopForever+0xe>)
  adds r2, r0, r1
 800126c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800126e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001270:	d3f6      	bcc.n	8001260 <CopyDataInit>
  ldr r2, =_sbss
 8001272:	4a0a      	ldr	r2, [pc, #40]	@ (800129c <LoopForever+0x12>)
  b LoopFillZerobss
 8001274:	e002      	b.n	800127c <LoopFillZerobss>

08001276 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001276:	2300      	movs	r3, #0
  str  r3, [r2]
 8001278:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800127a:	3204      	adds	r2, #4

0800127c <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 800127c:	4b08      	ldr	r3, [pc, #32]	@ (80012a0 <LoopForever+0x16>)
  cmp r2, r3
 800127e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001280:	d3f9      	bcc.n	8001276 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8001282:	f003 fa59 	bl	8004738 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001286:	f7ff f8b5 	bl	80003f4 <main>

0800128a <LoopForever>:

LoopForever:
    b LoopForever
 800128a:	e7fe      	b.n	800128a <LoopForever>
  ldr   r0, =_estack
 800128c:	20006000 	.word	0x20006000
  ldr r3, =_sidata
 8001290:	08004a64 	.word	0x08004a64
  ldr r0, =_sdata
 8001294:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001298:	20000024 	.word	0x20000024
  ldr r2, =_sbss
 800129c:	20000024 	.word	0x20000024
  ldr r3, = _ebss
 80012a0:	20000440 	.word	0x20000440

080012a4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012a4:	e7fe      	b.n	80012a4 <ADC1_IRQHandler>

080012a6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b082      	sub	sp, #8
 80012aa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012ac:	1dfb      	adds	r3, r7, #7
 80012ae:	2200      	movs	r2, #0
 80012b0:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012b2:	2003      	movs	r0, #3
 80012b4:	f000 f80e 	bl	80012d4 <HAL_InitTick>
 80012b8:	1e03      	subs	r3, r0, #0
 80012ba:	d003      	beq.n	80012c4 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 80012bc:	1dfb      	adds	r3, r7, #7
 80012be:	2201      	movs	r2, #1
 80012c0:	701a      	strb	r2, [r3, #0]
 80012c2:	e001      	b.n	80012c8 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80012c4:	f7ff fe82 	bl	8000fcc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012c8:	1dfb      	adds	r3, r7, #7
 80012ca:	781b      	ldrb	r3, [r3, #0]
}
 80012cc:	0018      	movs	r0, r3
 80012ce:	46bd      	mov	sp, r7
 80012d0:	b002      	add	sp, #8
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012d4:	b590      	push	{r4, r7, lr}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80012dc:	230f      	movs	r3, #15
 80012de:	18fb      	adds	r3, r7, r3
 80012e0:	2200      	movs	r2, #0
 80012e2:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 80012e4:	4b1d      	ldr	r3, [pc, #116]	@ (800135c <HAL_InitTick+0x88>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d02b      	beq.n	8001344 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 80012ec:	4b1c      	ldr	r3, [pc, #112]	@ (8001360 <HAL_InitTick+0x8c>)
 80012ee:	681c      	ldr	r4, [r3, #0]
 80012f0:	4b1a      	ldr	r3, [pc, #104]	@ (800135c <HAL_InitTick+0x88>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	0019      	movs	r1, r3
 80012f6:	23fa      	movs	r3, #250	@ 0xfa
 80012f8:	0098      	lsls	r0, r3, #2
 80012fa:	f7fe ff05 	bl	8000108 <__udivsi3>
 80012fe:	0003      	movs	r3, r0
 8001300:	0019      	movs	r1, r3
 8001302:	0020      	movs	r0, r4
 8001304:	f7fe ff00 	bl	8000108 <__udivsi3>
 8001308:	0003      	movs	r3, r0
 800130a:	0018      	movs	r0, r3
 800130c:	f000 f93d 	bl	800158a <HAL_SYSTICK_Config>
 8001310:	1e03      	subs	r3, r0, #0
 8001312:	d112      	bne.n	800133a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2b03      	cmp	r3, #3
 8001318:	d80a      	bhi.n	8001330 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800131a:	6879      	ldr	r1, [r7, #4]
 800131c:	2301      	movs	r3, #1
 800131e:	425b      	negs	r3, r3
 8001320:	2200      	movs	r2, #0
 8001322:	0018      	movs	r0, r3
 8001324:	f000 f90c 	bl	8001540 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001328:	4b0e      	ldr	r3, [pc, #56]	@ (8001364 <HAL_InitTick+0x90>)
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	601a      	str	r2, [r3, #0]
 800132e:	e00d      	b.n	800134c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001330:	230f      	movs	r3, #15
 8001332:	18fb      	adds	r3, r7, r3
 8001334:	2201      	movs	r2, #1
 8001336:	701a      	strb	r2, [r3, #0]
 8001338:	e008      	b.n	800134c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800133a:	230f      	movs	r3, #15
 800133c:	18fb      	adds	r3, r7, r3
 800133e:	2201      	movs	r2, #1
 8001340:	701a      	strb	r2, [r3, #0]
 8001342:	e003      	b.n	800134c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001344:	230f      	movs	r3, #15
 8001346:	18fb      	adds	r3, r7, r3
 8001348:	2201      	movs	r2, #1
 800134a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800134c:	230f      	movs	r3, #15
 800134e:	18fb      	adds	r3, r7, r3
 8001350:	781b      	ldrb	r3, [r3, #0]
}
 8001352:	0018      	movs	r0, r3
 8001354:	46bd      	mov	sp, r7
 8001356:	b005      	add	sp, #20
 8001358:	bd90      	pop	{r4, r7, pc}
 800135a:	46c0      	nop			@ (mov r8, r8)
 800135c:	20000020 	.word	0x20000020
 8001360:	20000018 	.word	0x20000018
 8001364:	2000001c 	.word	0x2000001c

08001368 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800136c:	4b05      	ldr	r3, [pc, #20]	@ (8001384 <HAL_IncTick+0x1c>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	001a      	movs	r2, r3
 8001372:	4b05      	ldr	r3, [pc, #20]	@ (8001388 <HAL_IncTick+0x20>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	18d2      	adds	r2, r2, r3
 8001378:	4b03      	ldr	r3, [pc, #12]	@ (8001388 <HAL_IncTick+0x20>)
 800137a:	601a      	str	r2, [r3, #0]
}
 800137c:	46c0      	nop			@ (mov r8, r8)
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	46c0      	nop			@ (mov r8, r8)
 8001384:	20000020 	.word	0x20000020
 8001388:	2000043c 	.word	0x2000043c

0800138c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  return uwTick;
 8001390:	4b02      	ldr	r3, [pc, #8]	@ (800139c <HAL_GetTick+0x10>)
 8001392:	681b      	ldr	r3, [r3, #0]
}
 8001394:	0018      	movs	r0, r3
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	46c0      	nop			@ (mov r8, r8)
 800139c:	2000043c 	.word	0x2000043c

080013a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013a8:	f7ff fff0 	bl	800138c <HAL_GetTick>
 80013ac:	0003      	movs	r3, r0
 80013ae:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	3301      	adds	r3, #1
 80013b8:	d005      	beq.n	80013c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013ba:	4b0a      	ldr	r3, [pc, #40]	@ (80013e4 <HAL_Delay+0x44>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	001a      	movs	r2, r3
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	189b      	adds	r3, r3, r2
 80013c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013c6:	46c0      	nop			@ (mov r8, r8)
 80013c8:	f7ff ffe0 	bl	800138c <HAL_GetTick>
 80013cc:	0002      	movs	r2, r0
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	68fa      	ldr	r2, [r7, #12]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d8f7      	bhi.n	80013c8 <HAL_Delay+0x28>
  {
  }
}
 80013d8:	46c0      	nop			@ (mov r8, r8)
 80013da:	46c0      	nop			@ (mov r8, r8)
 80013dc:	46bd      	mov	sp, r7
 80013de:	b004      	add	sp, #16
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	46c0      	nop			@ (mov r8, r8)
 80013e4:	20000020 	.word	0x20000020

080013e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	0002      	movs	r2, r0
 80013f0:	1dfb      	adds	r3, r7, #7
 80013f2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80013f4:	1dfb      	adds	r3, r7, #7
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	2b7f      	cmp	r3, #127	@ 0x7f
 80013fa:	d809      	bhi.n	8001410 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013fc:	1dfb      	adds	r3, r7, #7
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	001a      	movs	r2, r3
 8001402:	231f      	movs	r3, #31
 8001404:	401a      	ands	r2, r3
 8001406:	4b04      	ldr	r3, [pc, #16]	@ (8001418 <__NVIC_EnableIRQ+0x30>)
 8001408:	2101      	movs	r1, #1
 800140a:	4091      	lsls	r1, r2
 800140c:	000a      	movs	r2, r1
 800140e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001410:	46c0      	nop			@ (mov r8, r8)
 8001412:	46bd      	mov	sp, r7
 8001414:	b002      	add	sp, #8
 8001416:	bd80      	pop	{r7, pc}
 8001418:	e000e100 	.word	0xe000e100

0800141c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800141c:	b590      	push	{r4, r7, lr}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	0002      	movs	r2, r0
 8001424:	6039      	str	r1, [r7, #0]
 8001426:	1dfb      	adds	r3, r7, #7
 8001428:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800142a:	1dfb      	adds	r3, r7, #7
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	2b7f      	cmp	r3, #127	@ 0x7f
 8001430:	d828      	bhi.n	8001484 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001432:	4a2f      	ldr	r2, [pc, #188]	@ (80014f0 <__NVIC_SetPriority+0xd4>)
 8001434:	1dfb      	adds	r3, r7, #7
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	b25b      	sxtb	r3, r3
 800143a:	089b      	lsrs	r3, r3, #2
 800143c:	33c0      	adds	r3, #192	@ 0xc0
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	589b      	ldr	r3, [r3, r2]
 8001442:	1dfa      	adds	r2, r7, #7
 8001444:	7812      	ldrb	r2, [r2, #0]
 8001446:	0011      	movs	r1, r2
 8001448:	2203      	movs	r2, #3
 800144a:	400a      	ands	r2, r1
 800144c:	00d2      	lsls	r2, r2, #3
 800144e:	21ff      	movs	r1, #255	@ 0xff
 8001450:	4091      	lsls	r1, r2
 8001452:	000a      	movs	r2, r1
 8001454:	43d2      	mvns	r2, r2
 8001456:	401a      	ands	r2, r3
 8001458:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	019b      	lsls	r3, r3, #6
 800145e:	22ff      	movs	r2, #255	@ 0xff
 8001460:	401a      	ands	r2, r3
 8001462:	1dfb      	adds	r3, r7, #7
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	0018      	movs	r0, r3
 8001468:	2303      	movs	r3, #3
 800146a:	4003      	ands	r3, r0
 800146c:	00db      	lsls	r3, r3, #3
 800146e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001470:	481f      	ldr	r0, [pc, #124]	@ (80014f0 <__NVIC_SetPriority+0xd4>)
 8001472:	1dfb      	adds	r3, r7, #7
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	b25b      	sxtb	r3, r3
 8001478:	089b      	lsrs	r3, r3, #2
 800147a:	430a      	orrs	r2, r1
 800147c:	33c0      	adds	r3, #192	@ 0xc0
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001482:	e031      	b.n	80014e8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001484:	4a1b      	ldr	r2, [pc, #108]	@ (80014f4 <__NVIC_SetPriority+0xd8>)
 8001486:	1dfb      	adds	r3, r7, #7
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	0019      	movs	r1, r3
 800148c:	230f      	movs	r3, #15
 800148e:	400b      	ands	r3, r1
 8001490:	3b08      	subs	r3, #8
 8001492:	089b      	lsrs	r3, r3, #2
 8001494:	3306      	adds	r3, #6
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	18d3      	adds	r3, r2, r3
 800149a:	3304      	adds	r3, #4
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	1dfa      	adds	r2, r7, #7
 80014a0:	7812      	ldrb	r2, [r2, #0]
 80014a2:	0011      	movs	r1, r2
 80014a4:	2203      	movs	r2, #3
 80014a6:	400a      	ands	r2, r1
 80014a8:	00d2      	lsls	r2, r2, #3
 80014aa:	21ff      	movs	r1, #255	@ 0xff
 80014ac:	4091      	lsls	r1, r2
 80014ae:	000a      	movs	r2, r1
 80014b0:	43d2      	mvns	r2, r2
 80014b2:	401a      	ands	r2, r3
 80014b4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	019b      	lsls	r3, r3, #6
 80014ba:	22ff      	movs	r2, #255	@ 0xff
 80014bc:	401a      	ands	r2, r3
 80014be:	1dfb      	adds	r3, r7, #7
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	0018      	movs	r0, r3
 80014c4:	2303      	movs	r3, #3
 80014c6:	4003      	ands	r3, r0
 80014c8:	00db      	lsls	r3, r3, #3
 80014ca:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014cc:	4809      	ldr	r0, [pc, #36]	@ (80014f4 <__NVIC_SetPriority+0xd8>)
 80014ce:	1dfb      	adds	r3, r7, #7
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	001c      	movs	r4, r3
 80014d4:	230f      	movs	r3, #15
 80014d6:	4023      	ands	r3, r4
 80014d8:	3b08      	subs	r3, #8
 80014da:	089b      	lsrs	r3, r3, #2
 80014dc:	430a      	orrs	r2, r1
 80014de:	3306      	adds	r3, #6
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	18c3      	adds	r3, r0, r3
 80014e4:	3304      	adds	r3, #4
 80014e6:	601a      	str	r2, [r3, #0]
}
 80014e8:	46c0      	nop			@ (mov r8, r8)
 80014ea:	46bd      	mov	sp, r7
 80014ec:	b003      	add	sp, #12
 80014ee:	bd90      	pop	{r4, r7, pc}
 80014f0:	e000e100 	.word	0xe000e100
 80014f4:	e000ed00 	.word	0xe000ed00

080014f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	1e5a      	subs	r2, r3, #1
 8001504:	2380      	movs	r3, #128	@ 0x80
 8001506:	045b      	lsls	r3, r3, #17
 8001508:	429a      	cmp	r2, r3
 800150a:	d301      	bcc.n	8001510 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800150c:	2301      	movs	r3, #1
 800150e:	e010      	b.n	8001532 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001510:	4b0a      	ldr	r3, [pc, #40]	@ (800153c <SysTick_Config+0x44>)
 8001512:	687a      	ldr	r2, [r7, #4]
 8001514:	3a01      	subs	r2, #1
 8001516:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001518:	2301      	movs	r3, #1
 800151a:	425b      	negs	r3, r3
 800151c:	2103      	movs	r1, #3
 800151e:	0018      	movs	r0, r3
 8001520:	f7ff ff7c 	bl	800141c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001524:	4b05      	ldr	r3, [pc, #20]	@ (800153c <SysTick_Config+0x44>)
 8001526:	2200      	movs	r2, #0
 8001528:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800152a:	4b04      	ldr	r3, [pc, #16]	@ (800153c <SysTick_Config+0x44>)
 800152c:	2207      	movs	r2, #7
 800152e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001530:	2300      	movs	r3, #0
}
 8001532:	0018      	movs	r0, r3
 8001534:	46bd      	mov	sp, r7
 8001536:	b002      	add	sp, #8
 8001538:	bd80      	pop	{r7, pc}
 800153a:	46c0      	nop			@ (mov r8, r8)
 800153c:	e000e010 	.word	0xe000e010

08001540 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
 8001546:	60b9      	str	r1, [r7, #8]
 8001548:	607a      	str	r2, [r7, #4]
 800154a:	210f      	movs	r1, #15
 800154c:	187b      	adds	r3, r7, r1
 800154e:	1c02      	adds	r2, r0, #0
 8001550:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001552:	68ba      	ldr	r2, [r7, #8]
 8001554:	187b      	adds	r3, r7, r1
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	b25b      	sxtb	r3, r3
 800155a:	0011      	movs	r1, r2
 800155c:	0018      	movs	r0, r3
 800155e:	f7ff ff5d 	bl	800141c <__NVIC_SetPriority>
}
 8001562:	46c0      	nop			@ (mov r8, r8)
 8001564:	46bd      	mov	sp, r7
 8001566:	b004      	add	sp, #16
 8001568:	bd80      	pop	{r7, pc}

0800156a <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800156a:	b580      	push	{r7, lr}
 800156c:	b082      	sub	sp, #8
 800156e:	af00      	add	r7, sp, #0
 8001570:	0002      	movs	r2, r0
 8001572:	1dfb      	adds	r3, r7, #7
 8001574:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001576:	1dfb      	adds	r3, r7, #7
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	b25b      	sxtb	r3, r3
 800157c:	0018      	movs	r0, r3
 800157e:	f7ff ff33 	bl	80013e8 <__NVIC_EnableIRQ>
}
 8001582:	46c0      	nop			@ (mov r8, r8)
 8001584:	46bd      	mov	sp, r7
 8001586:	b002      	add	sp, #8
 8001588:	bd80      	pop	{r7, pc}

0800158a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	b082      	sub	sp, #8
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	0018      	movs	r0, r3
 8001596:	f7ff ffaf 	bl	80014f8 <SysTick_Config>
 800159a:	0003      	movs	r3, r0
}
 800159c:	0018      	movs	r0, r3
 800159e:	46bd      	mov	sp, r7
 80015a0:	b002      	add	sp, #8
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <HAL_DMA_Init>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d101      	bne.n	80015b6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e077      	b.n	80016a6 <HAL_DMA_Init+0x102>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* calculation of the channel index */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a3d      	ldr	r2, [pc, #244]	@ (80016b0 <HAL_DMA_Init+0x10c>)
 80015bc:	4694      	mov	ip, r2
 80015be:	4463      	add	r3, ip
 80015c0:	2114      	movs	r1, #20
 80015c2:	0018      	movs	r0, r3
 80015c4:	f7fe fda0 	bl	8000108 <__udivsi3>
 80015c8:	0003      	movs	r3, r0
                                                                                (uint32_t)DMA1_Channel1)) << 2U;
 80015ca:	009a      	lsls	r2, r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2225      	movs	r2, #37	@ 0x25
 80015d4:	2102      	movs	r1, #2
 80015d6:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4934      	ldr	r1, [pc, #208]	@ (80016b4 <HAL_DMA_Init+0x110>)
 80015e4:	400a      	ands	r2, r1
 80015e6:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	6819      	ldr	r1, [r3, #0]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	689a      	ldr	r2, [r3, #8]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	68db      	ldr	r3, [r3, #12]
 80015f6:	431a      	orrs	r2, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	691b      	ldr	r3, [r3, #16]
 80015fc:	431a      	orrs	r2, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	695b      	ldr	r3, [r3, #20]
 8001602:	431a      	orrs	r2, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	699b      	ldr	r3, [r3, #24]
 8001608:	431a      	orrs	r2, r3
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	69db      	ldr	r3, [r3, #28]
 800160e:	431a      	orrs	r2, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6a1b      	ldr	r3, [r3, #32]
 8001614:	431a      	orrs	r2, r3
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	430a      	orrs	r2, r1
 800161c:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	0018      	movs	r0, r3
 8001622:	f000 fa9f 	bl	8001b64 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	689a      	ldr	r2, [r3, #8]
 800162a:	2380      	movs	r3, #128	@ 0x80
 800162c:	01db      	lsls	r3, r3, #7
 800162e:	429a      	cmp	r2, r3
 8001630:	d102      	bne.n	8001638 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2200      	movs	r2, #0
 8001636:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	685a      	ldr	r2, [r3, #4]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001640:	21ff      	movs	r1, #255	@ 0xff
 8001642:	400a      	ands	r2, r1
 8001644:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800164e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d011      	beq.n	800167c <HAL_DMA_Init+0xd8>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	2b04      	cmp	r3, #4
 800165e:	d80d      	bhi.n	800167c <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	0018      	movs	r0, r3
 8001664:	f000 faaa 	bl	8001bbc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001674:	687a      	ldr	r2, [r7, #4]
 8001676:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001678:	605a      	str	r2, [r3, #4]
 800167a:	e008      	b.n	800168e <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2200      	movs	r2, #0
 8001680:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2200      	movs	r2, #0
 8001686:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2200      	movs	r2, #0
 800168c:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2200      	movs	r2, #0
 8001692:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2225      	movs	r2, #37	@ 0x25
 8001698:	2101      	movs	r1, #1
 800169a:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2224      	movs	r2, #36	@ 0x24
 80016a0:	2100      	movs	r1, #0
 80016a2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80016a4:	2300      	movs	r3, #0
}
 80016a6:	0018      	movs	r0, r3
 80016a8:	46bd      	mov	sp, r7
 80016aa:	b002      	add	sp, #8
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	46c0      	nop			@ (mov r8, r8)
 80016b0:	bffdfff8 	.word	0xbffdfff8
 80016b4:	ffff800f 	.word	0xffff800f

080016b8 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b086      	sub	sp, #24
 80016bc:	af00      	add	r7, sp, #0
 80016be:	60f8      	str	r0, [r7, #12]
 80016c0:	60b9      	str	r1, [r7, #8]
 80016c2:	607a      	str	r2, [r7, #4]
 80016c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80016c6:	2317      	movs	r3, #23
 80016c8:	18fb      	adds	r3, r7, r3
 80016ca:	2200      	movs	r2, #0
 80016cc:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	2224      	movs	r2, #36	@ 0x24
 80016d2:	5c9b      	ldrb	r3, [r3, r2]
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d101      	bne.n	80016dc <HAL_DMA_Start_IT+0x24>
 80016d8:	2302      	movs	r3, #2
 80016da:	e070      	b.n	80017be <HAL_DMA_Start_IT+0x106>
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	2224      	movs	r2, #36	@ 0x24
 80016e0:	2101      	movs	r1, #1
 80016e2:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	2225      	movs	r2, #37	@ 0x25
 80016e8:	5c9b      	ldrb	r3, [r3, r2]
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d157      	bne.n	80017a0 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	2225      	movs	r2, #37	@ 0x25
 80016f4:	2102      	movs	r1, #2
 80016f6:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	2200      	movs	r2, #0
 80016fc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2101      	movs	r1, #1
 800170a:	438a      	bics	r2, r1
 800170c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	687a      	ldr	r2, [r7, #4]
 8001712:	68b9      	ldr	r1, [r7, #8]
 8001714:	68f8      	ldr	r0, [r7, #12]
 8001716:	f000 f9e5 	bl	8001ae4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171e:	2b00      	cmp	r3, #0
 8001720:	d008      	beq.n	8001734 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	210e      	movs	r1, #14
 800172e:	430a      	orrs	r2, r1
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	e00f      	b.n	8001754 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	2104      	movs	r1, #4
 8001740:	438a      	bics	r2, r1
 8001742:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	210a      	movs	r1, #10
 8001750:	430a      	orrs	r2, r1
 8001752:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	2380      	movs	r3, #128	@ 0x80
 800175c:	025b      	lsls	r3, r3, #9
 800175e:	4013      	ands	r3, r2
 8001760:	d008      	beq.n	8001774 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800176c:	2180      	movs	r1, #128	@ 0x80
 800176e:	0049      	lsls	r1, r1, #1
 8001770:	430a      	orrs	r2, r1
 8001772:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001778:	2b00      	cmp	r3, #0
 800177a:	d008      	beq.n	800178e <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001786:	2180      	movs	r1, #128	@ 0x80
 8001788:	0049      	lsls	r1, r1, #1
 800178a:	430a      	orrs	r2, r1
 800178c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2101      	movs	r1, #1
 800179a:	430a      	orrs	r2, r1
 800179c:	601a      	str	r2, [r3, #0]
 800179e:	e007      	b.n	80017b0 <HAL_DMA_Start_IT+0xf8>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	2224      	movs	r2, #36	@ 0x24
 80017a4:	2100      	movs	r1, #0
 80017a6:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 80017a8:	2317      	movs	r3, #23
 80017aa:	18fb      	adds	r3, r7, r3
 80017ac:	2202      	movs	r2, #2
 80017ae:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hdma);
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	2224      	movs	r2, #36	@ 0x24
 80017b4:	2100      	movs	r1, #0
 80017b6:	5499      	strb	r1, [r3, r2]

  return status;
 80017b8:	2317      	movs	r3, #23
 80017ba:	18fb      	adds	r3, r7, r3
 80017bc:	781b      	ldrb	r3, [r3, #0]
}
 80017be:	0018      	movs	r0, r3
 80017c0:	46bd      	mov	sp, r7
 80017c2:	b006      	add	sp, #24
 80017c4:	bd80      	pop	{r7, pc}
	...

080017c8 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d101      	bne.n	80017da <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e050      	b.n	800187c <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2225      	movs	r2, #37	@ 0x25
 80017de:	5c9b      	ldrb	r3, [r3, r2]
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d008      	beq.n	80017f8 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2204      	movs	r2, #4
 80017ea:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2224      	movs	r2, #36	@ 0x24
 80017f0:	2100      	movs	r1, #0
 80017f2:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e041      	b.n	800187c <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	210e      	movs	r1, #14
 8001804:	438a      	bics	r2, r1
 8001806:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001812:	491c      	ldr	r1, [pc, #112]	@ (8001884 <HAL_DMA_Abort+0xbc>)
 8001814:	400a      	ands	r2, r1
 8001816:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	2101      	movs	r1, #1
 8001824:	438a      	bics	r2, r1
 8001826:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1cU)));
 8001828:	4b17      	ldr	r3, [pc, #92]	@ (8001888 <HAL_DMA_Abort+0xc0>)
 800182a:	6859      	ldr	r1, [r3, #4]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001830:	221c      	movs	r2, #28
 8001832:	4013      	ands	r3, r2
 8001834:	2201      	movs	r2, #1
 8001836:	409a      	lsls	r2, r3
 8001838:	4b13      	ldr	r3, [pc, #76]	@ (8001888 <HAL_DMA_Abort+0xc0>)
 800183a:	430a      	orrs	r2, r1
 800183c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001846:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800184c:	2b00      	cmp	r3, #0
 800184e:	d00c      	beq.n	800186a <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800185a:	490a      	ldr	r1, [pc, #40]	@ (8001884 <HAL_DMA_Abort+0xbc>)
 800185c:	400a      	ands	r2, r1
 800185e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001868:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2225      	movs	r2, #37	@ 0x25
 800186e:	2101      	movs	r1, #1
 8001870:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2224      	movs	r2, #36	@ 0x24
 8001876:	2100      	movs	r1, #0
 8001878:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 800187a:	2300      	movs	r3, #0
}
 800187c:	0018      	movs	r0, r3
 800187e:	46bd      	mov	sp, r7
 8001880:	b002      	add	sp, #8
 8001882:	bd80      	pop	{r7, pc}
 8001884:	fffffeff 	.word	0xfffffeff
 8001888:	40020000 	.word	0x40020000

0800188c <HAL_DMA_Abort_IT>:
  * @param  hdma    pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001894:	230f      	movs	r3, #15
 8001896:	18fb      	adds	r3, r7, r3
 8001898:	2200      	movs	r2, #0
 800189a:	701a      	strb	r2, [r3, #0]

  /* Process Unlocked/locked */
  __HAL_UNLOCK(hdma);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2224      	movs	r2, #36	@ 0x24
 80018a0:	2100      	movs	r1, #0
 80018a2:	5499      	strb	r1, [r3, r2]
  __HAL_LOCK(hdma);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2224      	movs	r2, #36	@ 0x24
 80018a8:	5c9b      	ldrb	r3, [r3, r2]
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d101      	bne.n	80018b2 <HAL_DMA_Abort_IT+0x26>
 80018ae:	2302      	movs	r3, #2
 80018b0:	e05e      	b.n	8001970 <HAL_DMA_Abort_IT+0xe4>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2224      	movs	r2, #36	@ 0x24
 80018b6:	2101      	movs	r1, #1
 80018b8:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2225      	movs	r2, #37	@ 0x25
 80018be:	5c9b      	ldrb	r3, [r3, r2]
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d007      	beq.n	80018d6 <HAL_DMA_Abort_IT+0x4a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2204      	movs	r2, #4
 80018ca:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80018cc:	230f      	movs	r3, #15
 80018ce:	18fb      	adds	r3, r7, r3
 80018d0:	2201      	movs	r2, #1
 80018d2:	701a      	strb	r2, [r3, #0]
 80018d4:	e049      	b.n	800196a <HAL_DMA_Abort_IT+0xde>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	210e      	movs	r1, #14
 80018e2:	438a      	bics	r2, r1
 80018e4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	2101      	movs	r1, #1
 80018f2:	438a      	bics	r2, r1
 80018f4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001900:	491d      	ldr	r1, [pc, #116]	@ (8001978 <HAL_DMA_Abort_IT+0xec>)
 8001902:	400a      	ands	r2, r1
 8001904:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 8001906:	4b1d      	ldr	r3, [pc, #116]	@ (800197c <HAL_DMA_Abort_IT+0xf0>)
 8001908:	6859      	ldr	r1, [r3, #4]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800190e:	221c      	movs	r2, #28
 8001910:	4013      	ands	r3, r2
 8001912:	2201      	movs	r2, #1
 8001914:	409a      	lsls	r2, r3
 8001916:	4b19      	ldr	r3, [pc, #100]	@ (800197c <HAL_DMA_Abort_IT+0xf0>)
 8001918:	430a      	orrs	r2, r1
 800191a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001920:	687a      	ldr	r2, [r7, #4]
 8001922:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001924:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800192a:	2b00      	cmp	r3, #0
 800192c:	d00c      	beq.n	8001948 <HAL_DMA_Abort_IT+0xbc>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001938:	490f      	ldr	r1, [pc, #60]	@ (8001978 <HAL_DMA_Abort_IT+0xec>)
 800193a:	400a      	ands	r2, r1
 800193c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001946:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2225      	movs	r2, #37	@ 0x25
 800194c:	2101      	movs	r1, #1
 800194e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2224      	movs	r2, #36	@ 0x24
 8001954:	2100      	movs	r1, #0
 8001956:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800195c:	2b00      	cmp	r3, #0
 800195e:	d004      	beq.n	800196a <HAL_DMA_Abort_IT+0xde>
    {
      hdma->XferAbortCallback(hdma);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001964:	687a      	ldr	r2, [r7, #4]
 8001966:	0010      	movs	r0, r2
 8001968:	4798      	blx	r3
    }
  }
  return status;
 800196a:	230f      	movs	r3, #15
 800196c:	18fb      	adds	r3, r7, r3
 800196e:	781b      	ldrb	r3, [r3, #0]
}
 8001970:	0018      	movs	r0, r3
 8001972:	46bd      	mov	sp, r7
 8001974:	b004      	add	sp, #16
 8001976:	bd80      	pop	{r7, pc}
 8001978:	fffffeff 	.word	0xfffffeff
 800197c:	40020000 	.word	0x40020000

08001980 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = DMA1->ISR;
 8001988:	4b55      	ldr	r3, [pc, #340]	@ (8001ae0 <HAL_DMA_IRQHandler+0x160>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800199a:	221c      	movs	r2, #28
 800199c:	4013      	ands	r3, r2
 800199e:	2204      	movs	r2, #4
 80019a0:	409a      	lsls	r2, r3
 80019a2:	0013      	movs	r3, r2
 80019a4:	68fa      	ldr	r2, [r7, #12]
 80019a6:	4013      	ands	r3, r2
 80019a8:	d027      	beq.n	80019fa <HAL_DMA_IRQHandler+0x7a>
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	2204      	movs	r2, #4
 80019ae:	4013      	ands	r3, r2
 80019b0:	d023      	beq.n	80019fa <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2220      	movs	r2, #32
 80019ba:	4013      	ands	r3, r2
 80019bc:	d107      	bne.n	80019ce <HAL_DMA_IRQHandler+0x4e>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2104      	movs	r1, #4
 80019ca:	438a      	bics	r2, r1
 80019cc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 80019ce:	4b44      	ldr	r3, [pc, #272]	@ (8001ae0 <HAL_DMA_IRQHandler+0x160>)
 80019d0:	6859      	ldr	r1, [r3, #4]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d6:	221c      	movs	r2, #28
 80019d8:	4013      	ands	r3, r2
 80019da:	2204      	movs	r2, #4
 80019dc:	409a      	lsls	r2, r3
 80019de:	4b40      	ldr	r3, [pc, #256]	@ (8001ae0 <HAL_DMA_IRQHandler+0x160>)
 80019e0:	430a      	orrs	r2, r1
 80019e2:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d100      	bne.n	80019ee <HAL_DMA_IRQHandler+0x6e>
 80019ec:	e073      	b.n	8001ad6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	0010      	movs	r0, r2
 80019f6:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80019f8:	e06d      	b.n	8001ad6 <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019fe:	221c      	movs	r2, #28
 8001a00:	4013      	ands	r3, r2
 8001a02:	2202      	movs	r2, #2
 8001a04:	409a      	lsls	r2, r3
 8001a06:	0013      	movs	r3, r2
 8001a08:	68fa      	ldr	r2, [r7, #12]
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	d02e      	beq.n	8001a6c <HAL_DMA_IRQHandler+0xec>
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	2202      	movs	r2, #2
 8001a12:	4013      	ands	r3, r2
 8001a14:	d02a      	beq.n	8001a6c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2220      	movs	r2, #32
 8001a1e:	4013      	ands	r3, r2
 8001a20:	d10b      	bne.n	8001a3a <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	210a      	movs	r1, #10
 8001a2e:	438a      	bics	r2, r1
 8001a30:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2225      	movs	r2, #37	@ 0x25
 8001a36:	2101      	movs	r1, #1
 8001a38:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 8001a3a:	4b29      	ldr	r3, [pc, #164]	@ (8001ae0 <HAL_DMA_IRQHandler+0x160>)
 8001a3c:	6859      	ldr	r1, [r3, #4]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a42:	221c      	movs	r2, #28
 8001a44:	4013      	ands	r3, r2
 8001a46:	2202      	movs	r2, #2
 8001a48:	409a      	lsls	r2, r3
 8001a4a:	4b25      	ldr	r3, [pc, #148]	@ (8001ae0 <HAL_DMA_IRQHandler+0x160>)
 8001a4c:	430a      	orrs	r2, r1
 8001a4e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2224      	movs	r2, #36	@ 0x24
 8001a54:	2100      	movs	r1, #0
 8001a56:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d03a      	beq.n	8001ad6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	0010      	movs	r0, r2
 8001a68:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001a6a:	e034      	b.n	8001ad6 <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a70:	221c      	movs	r2, #28
 8001a72:	4013      	ands	r3, r2
 8001a74:	2208      	movs	r2, #8
 8001a76:	409a      	lsls	r2, r3
 8001a78:	0013      	movs	r3, r2
 8001a7a:	68fa      	ldr	r2, [r7, #12]
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	d02b      	beq.n	8001ad8 <HAL_DMA_IRQHandler+0x158>
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	2208      	movs	r2, #8
 8001a84:	4013      	ands	r3, r2
 8001a86:	d027      	beq.n	8001ad8 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	210e      	movs	r1, #14
 8001a94:	438a      	bics	r2, r1
 8001a96:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8001a98:	4b11      	ldr	r3, [pc, #68]	@ (8001ae0 <HAL_DMA_IRQHandler+0x160>)
 8001a9a:	6859      	ldr	r1, [r3, #4]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa0:	221c      	movs	r2, #28
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	409a      	lsls	r2, r3
 8001aa8:	4b0d      	ldr	r3, [pc, #52]	@ (8001ae0 <HAL_DMA_IRQHandler+0x160>)
 8001aaa:	430a      	orrs	r2, r1
 8001aac:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2225      	movs	r2, #37	@ 0x25
 8001ab8:	2101      	movs	r1, #1
 8001aba:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2224      	movs	r2, #36	@ 0x24
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d005      	beq.n	8001ad8 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	0010      	movs	r0, r2
 8001ad4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001ad6:	46c0      	nop			@ (mov r8, r8)
 8001ad8:	46c0      	nop			@ (mov r8, r8)
}
 8001ada:	46bd      	mov	sp, r7
 8001adc:	b004      	add	sp, #16
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	40020000 	.word	0x40020000

08001ae4 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	60b9      	str	r1, [r7, #8]
 8001aee:	607a      	str	r2, [r7, #4]
 8001af0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001af6:	68fa      	ldr	r2, [r7, #12]
 8001af8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001afa:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d004      	beq.n	8001b0e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b08:	68fa      	ldr	r2, [r7, #12]
 8001b0a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001b0c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8001b0e:	4b14      	ldr	r3, [pc, #80]	@ (8001b60 <DMA_SetConfig+0x7c>)
 8001b10:	6859      	ldr	r1, [r3, #4]
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b16:	221c      	movs	r2, #28
 8001b18:	4013      	ands	r3, r2
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	409a      	lsls	r2, r3
 8001b1e:	4b10      	ldr	r3, [pc, #64]	@ (8001b60 <DMA_SetConfig+0x7c>)
 8001b20:	430a      	orrs	r2, r1
 8001b22:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	683a      	ldr	r2, [r7, #0]
 8001b2a:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	2b10      	cmp	r3, #16
 8001b32:	d108      	bne.n	8001b46 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	68ba      	ldr	r2, [r7, #8]
 8001b42:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001b44:	e007      	b.n	8001b56 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	68ba      	ldr	r2, [r7, #8]
 8001b4c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	60da      	str	r2, [r3, #12]
}
 8001b56:	46c0      	nop			@ (mov r8, r8)
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	b004      	add	sp, #16
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	46c0      	nop			@ (mov r8, r8)
 8001b60:	40020000 	.word	0x40020000

08001b64 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	001a      	movs	r2, r3
 8001b72:	23ff      	movs	r3, #255	@ 0xff
 8001b74:	4013      	ands	r3, r2
 8001b76:	3b08      	subs	r3, #8
 8001b78:	2114      	movs	r1, #20
 8001b7a:	0018      	movs	r0, r3
 8001b7c:	f7fe fac4 	bl	8000108 <__udivsi3>
 8001b80:	0003      	movs	r3, r0
 8001b82:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
                                                             ((hdma->ChannelIndex >> 2U) * \
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b88:	089b      	lsrs	r3, r3, #2
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 8001b8a:	4a0a      	ldr	r2, [pc, #40]	@ (8001bb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8001b8c:	4694      	mov	ip, r2
 8001b8e:	4463      	add	r3, ip
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	001a      	movs	r2, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	645a      	str	r2, [r3, #68]	@ 0x44
                                                              ((uint32_t)DMAMUX1_Channel1 - \
                                                               (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	4a07      	ldr	r2, [pc, #28]	@ (8001bb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8001b9c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	221c      	movs	r2, #28
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	409a      	lsls	r2, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8001bac:	46c0      	nop			@ (mov r8, r8)
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	b004      	add	sp, #16
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	10008200 	.word	0x10008200
 8001bb8:	40020880 	.word	0x40020880

08001bbc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	22ff      	movs	r2, #255	@ 0xff
 8001bca:	4013      	ands	r3, r2
 8001bcc:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	4a0a      	ldr	r2, [pc, #40]	@ (8001bfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001bd2:	4694      	mov	ip, r2
 8001bd4:	4463      	add	r3, ip
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	001a      	movs	r2, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	651a      	str	r2, [r3, #80]	@ 0x50
                                                                    ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a07      	ldr	r2, [pc, #28]	@ (8001c00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001be2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	3b01      	subs	r3, #1
 8001be8:	2203      	movs	r2, #3
 8001bea:	4013      	ands	r3, r2
 8001bec:	2201      	movs	r2, #1
 8001bee:	409a      	lsls	r2, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8001bf4:	46c0      	nop			@ (mov r8, r8)
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	b004      	add	sp, #16
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	1000823f 	.word	0x1000823f
 8001c00:	40020940 	.word	0x40020940

08001c04 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b086      	sub	sp, #24
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001c12:	e153      	b.n	8001ebc <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	2101      	movs	r1, #1
 8001c1a:	693a      	ldr	r2, [r7, #16]
 8001c1c:	4091      	lsls	r1, r2
 8001c1e:	000a      	movs	r2, r1
 8001c20:	4013      	ands	r3, r2
 8001c22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d100      	bne.n	8001c2c <HAL_GPIO_Init+0x28>
 8001c2a:	e144      	b.n	8001eb6 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	d003      	beq.n	8001c3c <HAL_GPIO_Init+0x38>
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	2b12      	cmp	r3, #18
 8001c3a:	d125      	bne.n	8001c88 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	08da      	lsrs	r2, r3, #3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	3208      	adds	r2, #8
 8001c44:	0092      	lsls	r2, r2, #2
 8001c46:	58d3      	ldr	r3, [r2, r3]
 8001c48:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	2207      	movs	r2, #7
 8001c4e:	4013      	ands	r3, r2
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	220f      	movs	r2, #15
 8001c54:	409a      	lsls	r2, r3
 8001c56:	0013      	movs	r3, r2
 8001c58:	43da      	mvns	r2, r3
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	691b      	ldr	r3, [r3, #16]
 8001c64:	220f      	movs	r2, #15
 8001c66:	401a      	ands	r2, r3
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	2107      	movs	r1, #7
 8001c6c:	400b      	ands	r3, r1
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	409a      	lsls	r2, r3
 8001c72:	0013      	movs	r3, r2
 8001c74:	697a      	ldr	r2, [r7, #20]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	08da      	lsrs	r2, r3, #3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	3208      	adds	r2, #8
 8001c82:	0092      	lsls	r2, r2, #2
 8001c84:	6979      	ldr	r1, [r7, #20]
 8001c86:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	2203      	movs	r2, #3
 8001c94:	409a      	lsls	r2, r3
 8001c96:	0013      	movs	r3, r2
 8001c98:	43da      	mvns	r2, r3
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	2203      	movs	r2, #3
 8001ca6:	401a      	ands	r2, r3
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	005b      	lsls	r3, r3, #1
 8001cac:	409a      	lsls	r2, r3
 8001cae:	0013      	movs	r3, r2
 8001cb0:	697a      	ldr	r2, [r7, #20]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	697a      	ldr	r2, [r7, #20]
 8001cba:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d00b      	beq.n	8001cdc <HAL_GPIO_Init+0xd8>
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d007      	beq.n	8001cdc <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cd0:	2b11      	cmp	r3, #17
 8001cd2:	d003      	beq.n	8001cdc <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	2b12      	cmp	r3, #18
 8001cda:	d130      	bne.n	8001d3e <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	2203      	movs	r2, #3
 8001ce8:	409a      	lsls	r2, r3
 8001cea:	0013      	movs	r3, r2
 8001cec:	43da      	mvns	r2, r3
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	68da      	ldr	r2, [r3, #12]
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	409a      	lsls	r2, r3
 8001cfe:	0013      	movs	r3, r2
 8001d00:	697a      	ldr	r2, [r7, #20]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	697a      	ldr	r2, [r7, #20]
 8001d0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d12:	2201      	movs	r2, #1
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	409a      	lsls	r2, r3
 8001d18:	0013      	movs	r3, r2
 8001d1a:	43da      	mvns	r2, r3
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	4013      	ands	r3, r2
 8001d20:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	091b      	lsrs	r3, r3, #4
 8001d28:	2201      	movs	r2, #1
 8001d2a:	401a      	ands	r2, r3
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	409a      	lsls	r2, r3
 8001d30:	0013      	movs	r3, r2
 8001d32:	697a      	ldr	r2, [r7, #20]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	697a      	ldr	r2, [r7, #20]
 8001d3c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	2b03      	cmp	r3, #3
 8001d44:	d017      	beq.n	8001d76 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	68db      	ldr	r3, [r3, #12]
 8001d4a:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	005b      	lsls	r3, r3, #1
 8001d50:	2203      	movs	r2, #3
 8001d52:	409a      	lsls	r2, r3
 8001d54:	0013      	movs	r3, r2
 8001d56:	43da      	mvns	r2, r3
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	689a      	ldr	r2, [r3, #8]
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	409a      	lsls	r2, r3
 8001d68:	0013      	movs	r3, r2
 8001d6a:	697a      	ldr	r2, [r7, #20]
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	697a      	ldr	r2, [r7, #20]
 8001d74:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	685a      	ldr	r2, [r3, #4]
 8001d7a:	2380      	movs	r3, #128	@ 0x80
 8001d7c:	055b      	lsls	r3, r3, #21
 8001d7e:	4013      	ands	r3, r2
 8001d80:	d100      	bne.n	8001d84 <HAL_GPIO_Init+0x180>
 8001d82:	e098      	b.n	8001eb6 <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001d84:	4a53      	ldr	r2, [pc, #332]	@ (8001ed4 <HAL_GPIO_Init+0x2d0>)
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	089b      	lsrs	r3, r3, #2
 8001d8a:	3318      	adds	r3, #24
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	589b      	ldr	r3, [r3, r2]
 8001d90:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	2203      	movs	r2, #3
 8001d96:	4013      	ands	r3, r2
 8001d98:	00db      	lsls	r3, r3, #3
 8001d9a:	220f      	movs	r2, #15
 8001d9c:	409a      	lsls	r2, r3
 8001d9e:	0013      	movs	r3, r2
 8001da0:	43da      	mvns	r2, r3
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	4013      	ands	r3, r2
 8001da6:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	23a0      	movs	r3, #160	@ 0xa0
 8001dac:	05db      	lsls	r3, r3, #23
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d019      	beq.n	8001de6 <HAL_GPIO_Init+0x1e2>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4a48      	ldr	r2, [pc, #288]	@ (8001ed8 <HAL_GPIO_Init+0x2d4>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d013      	beq.n	8001de2 <HAL_GPIO_Init+0x1de>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a47      	ldr	r2, [pc, #284]	@ (8001edc <HAL_GPIO_Init+0x2d8>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d00d      	beq.n	8001dde <HAL_GPIO_Init+0x1da>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4a46      	ldr	r2, [pc, #280]	@ (8001ee0 <HAL_GPIO_Init+0x2dc>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d007      	beq.n	8001dda <HAL_GPIO_Init+0x1d6>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a45      	ldr	r2, [pc, #276]	@ (8001ee4 <HAL_GPIO_Init+0x2e0>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d101      	bne.n	8001dd6 <HAL_GPIO_Init+0x1d2>
 8001dd2:	2305      	movs	r3, #5
 8001dd4:	e008      	b.n	8001de8 <HAL_GPIO_Init+0x1e4>
 8001dd6:	2306      	movs	r3, #6
 8001dd8:	e006      	b.n	8001de8 <HAL_GPIO_Init+0x1e4>
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e004      	b.n	8001de8 <HAL_GPIO_Init+0x1e4>
 8001dde:	2302      	movs	r3, #2
 8001de0:	e002      	b.n	8001de8 <HAL_GPIO_Init+0x1e4>
 8001de2:	2301      	movs	r3, #1
 8001de4:	e000      	b.n	8001de8 <HAL_GPIO_Init+0x1e4>
 8001de6:	2300      	movs	r3, #0
 8001de8:	693a      	ldr	r2, [r7, #16]
 8001dea:	2103      	movs	r1, #3
 8001dec:	400a      	ands	r2, r1
 8001dee:	00d2      	lsls	r2, r2, #3
 8001df0:	4093      	lsls	r3, r2
 8001df2:	697a      	ldr	r2, [r7, #20]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001df8:	4936      	ldr	r1, [pc, #216]	@ (8001ed4 <HAL_GPIO_Init+0x2d0>)
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	089b      	lsrs	r3, r3, #2
 8001dfe:	3318      	adds	r3, #24
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	697a      	ldr	r2, [r7, #20]
 8001e04:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8001e06:	4a33      	ldr	r2, [pc, #204]	@ (8001ed4 <HAL_GPIO_Init+0x2d0>)
 8001e08:	2380      	movs	r3, #128	@ 0x80
 8001e0a:	58d3      	ldr	r3, [r2, r3]
 8001e0c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	43da      	mvns	r2, r3
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	4013      	ands	r3, r2
 8001e16:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	685a      	ldr	r2, [r3, #4]
 8001e1c:	2380      	movs	r3, #128	@ 0x80
 8001e1e:	025b      	lsls	r3, r3, #9
 8001e20:	4013      	ands	r3, r2
 8001e22:	d003      	beq.n	8001e2c <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 8001e24:	697a      	ldr	r2, [r7, #20]
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001e2c:	4929      	ldr	r1, [pc, #164]	@ (8001ed4 <HAL_GPIO_Init+0x2d0>)
 8001e2e:	2280      	movs	r2, #128	@ 0x80
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8001e34:	4a27      	ldr	r2, [pc, #156]	@ (8001ed4 <HAL_GPIO_Init+0x2d0>)
 8001e36:	2384      	movs	r3, #132	@ 0x84
 8001e38:	58d3      	ldr	r3, [r2, r3]
 8001e3a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	43da      	mvns	r2, r3
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	4013      	ands	r3, r2
 8001e44:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	685a      	ldr	r2, [r3, #4]
 8001e4a:	2380      	movs	r3, #128	@ 0x80
 8001e4c:	029b      	lsls	r3, r3, #10
 8001e4e:	4013      	ands	r3, r2
 8001e50:	d003      	beq.n	8001e5a <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 8001e52:	697a      	ldr	r2, [r7, #20]
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8001e5a:	491e      	ldr	r1, [pc, #120]	@ (8001ed4 <HAL_GPIO_Init+0x2d0>)
 8001e5c:	2284      	movs	r2, #132	@ 0x84
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001e62:	4b1c      	ldr	r3, [pc, #112]	@ (8001ed4 <HAL_GPIO_Init+0x2d0>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	43da      	mvns	r2, r3
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	4013      	ands	r3, r2
 8001e70:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	685a      	ldr	r2, [r3, #4]
 8001e76:	2380      	movs	r3, #128	@ 0x80
 8001e78:	035b      	lsls	r3, r3, #13
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	d003      	beq.n	8001e86 <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 8001e7e:	697a      	ldr	r2, [r7, #20]
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8001e86:	4b13      	ldr	r3, [pc, #76]	@ (8001ed4 <HAL_GPIO_Init+0x2d0>)
 8001e88:	697a      	ldr	r2, [r7, #20]
 8001e8a:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8001e8c:	4b11      	ldr	r3, [pc, #68]	@ (8001ed4 <HAL_GPIO_Init+0x2d0>)
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	43da      	mvns	r2, r3
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	4013      	ands	r3, r2
 8001e9a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685a      	ldr	r2, [r3, #4]
 8001ea0:	2380      	movs	r3, #128	@ 0x80
 8001ea2:	039b      	lsls	r3, r3, #14
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	d003      	beq.n	8001eb0 <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 8001ea8:	697a      	ldr	r2, [r7, #20]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8001eb0:	4b08      	ldr	r3, [pc, #32]	@ (8001ed4 <HAL_GPIO_Init+0x2d0>)
 8001eb2:	697a      	ldr	r2, [r7, #20]
 8001eb4:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	3301      	adds	r3, #1
 8001eba:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	40da      	lsrs	r2, r3
 8001ec4:	1e13      	subs	r3, r2, #0
 8001ec6:	d000      	beq.n	8001eca <HAL_GPIO_Init+0x2c6>
 8001ec8:	e6a4      	b.n	8001c14 <HAL_GPIO_Init+0x10>
  }
}
 8001eca:	46c0      	nop			@ (mov r8, r8)
 8001ecc:	46c0      	nop			@ (mov r8, r8)
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	b006      	add	sp, #24
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	40021800 	.word	0x40021800
 8001ed8:	50000400 	.word	0x50000400
 8001edc:	50000800 	.word	0x50000800
 8001ee0:	50000c00 	.word	0x50000c00
 8001ee4:	50001400 	.word	0x50001400

08001ee8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b086      	sub	sp, #24
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d101      	bne.n	8001efa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e20f      	b.n	800231a <HAL_RCC_OscConfig+0x432>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	2201      	movs	r2, #1
 8001f00:	4013      	ands	r3, r2
 8001f02:	d100      	bne.n	8001f06 <HAL_RCC_OscConfig+0x1e>
 8001f04:	e069      	b.n	8001fda <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f06:	4bc8      	ldr	r3, [pc, #800]	@ (8002228 <HAL_RCC_OscConfig+0x340>)
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	2238      	movs	r2, #56	@ 0x38
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	2b08      	cmp	r3, #8
 8001f14:	d105      	bne.n	8001f22 <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d15d      	bne.n	8001fda <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e1fb      	b.n	800231a <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685a      	ldr	r2, [r3, #4]
 8001f26:	2380      	movs	r3, #128	@ 0x80
 8001f28:	025b      	lsls	r3, r3, #9
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d107      	bne.n	8001f3e <HAL_RCC_OscConfig+0x56>
 8001f2e:	4bbe      	ldr	r3, [pc, #760]	@ (8002228 <HAL_RCC_OscConfig+0x340>)
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	4bbd      	ldr	r3, [pc, #756]	@ (8002228 <HAL_RCC_OscConfig+0x340>)
 8001f34:	2180      	movs	r1, #128	@ 0x80
 8001f36:	0249      	lsls	r1, r1, #9
 8001f38:	430a      	orrs	r2, r1
 8001f3a:	601a      	str	r2, [r3, #0]
 8001f3c:	e020      	b.n	8001f80 <HAL_RCC_OscConfig+0x98>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685a      	ldr	r2, [r3, #4]
 8001f42:	23a0      	movs	r3, #160	@ 0xa0
 8001f44:	02db      	lsls	r3, r3, #11
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d10e      	bne.n	8001f68 <HAL_RCC_OscConfig+0x80>
 8001f4a:	4bb7      	ldr	r3, [pc, #732]	@ (8002228 <HAL_RCC_OscConfig+0x340>)
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	4bb6      	ldr	r3, [pc, #728]	@ (8002228 <HAL_RCC_OscConfig+0x340>)
 8001f50:	2180      	movs	r1, #128	@ 0x80
 8001f52:	02c9      	lsls	r1, r1, #11
 8001f54:	430a      	orrs	r2, r1
 8001f56:	601a      	str	r2, [r3, #0]
 8001f58:	4bb3      	ldr	r3, [pc, #716]	@ (8002228 <HAL_RCC_OscConfig+0x340>)
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	4bb2      	ldr	r3, [pc, #712]	@ (8002228 <HAL_RCC_OscConfig+0x340>)
 8001f5e:	2180      	movs	r1, #128	@ 0x80
 8001f60:	0249      	lsls	r1, r1, #9
 8001f62:	430a      	orrs	r2, r1
 8001f64:	601a      	str	r2, [r3, #0]
 8001f66:	e00b      	b.n	8001f80 <HAL_RCC_OscConfig+0x98>
 8001f68:	4baf      	ldr	r3, [pc, #700]	@ (8002228 <HAL_RCC_OscConfig+0x340>)
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	4bae      	ldr	r3, [pc, #696]	@ (8002228 <HAL_RCC_OscConfig+0x340>)
 8001f6e:	49af      	ldr	r1, [pc, #700]	@ (800222c <HAL_RCC_OscConfig+0x344>)
 8001f70:	400a      	ands	r2, r1
 8001f72:	601a      	str	r2, [r3, #0]
 8001f74:	4bac      	ldr	r3, [pc, #688]	@ (8002228 <HAL_RCC_OscConfig+0x340>)
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	4bab      	ldr	r3, [pc, #684]	@ (8002228 <HAL_RCC_OscConfig+0x340>)
 8001f7a:	49ad      	ldr	r1, [pc, #692]	@ (8002230 <HAL_RCC_OscConfig+0x348>)
 8001f7c:	400a      	ands	r2, r1
 8001f7e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d014      	beq.n	8001fb2 <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f88:	f7ff fa00 	bl	800138c <HAL_GetTick>
 8001f8c:	0003      	movs	r3, r0
 8001f8e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f90:	e008      	b.n	8001fa4 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001f92:	f7ff f9fb 	bl	800138c <HAL_GetTick>
 8001f96:	0002      	movs	r2, r0
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	2b64      	cmp	r3, #100	@ 0x64
 8001f9e:	d901      	bls.n	8001fa4 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	e1ba      	b.n	800231a <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fa4:	4ba0      	ldr	r3, [pc, #640]	@ (8002228 <HAL_RCC_OscConfig+0x340>)
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	2380      	movs	r3, #128	@ 0x80
 8001faa:	029b      	lsls	r3, r3, #10
 8001fac:	4013      	ands	r3, r2
 8001fae:	d0f0      	beq.n	8001f92 <HAL_RCC_OscConfig+0xaa>
 8001fb0:	e013      	b.n	8001fda <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb2:	f7ff f9eb 	bl	800138c <HAL_GetTick>
 8001fb6:	0003      	movs	r3, r0
 8001fb8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001fba:	e008      	b.n	8001fce <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001fbc:	f7ff f9e6 	bl	800138c <HAL_GetTick>
 8001fc0:	0002      	movs	r2, r0
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	2b64      	cmp	r3, #100	@ 0x64
 8001fc8:	d901      	bls.n	8001fce <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e1a5      	b.n	800231a <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001fce:	4b96      	ldr	r3, [pc, #600]	@ (8002228 <HAL_RCC_OscConfig+0x340>)
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	2380      	movs	r3, #128	@ 0x80
 8001fd4:	029b      	lsls	r3, r3, #10
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	d1f0      	bne.n	8001fbc <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	2202      	movs	r2, #2
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	d100      	bne.n	8001fe6 <HAL_RCC_OscConfig+0xfe>
 8001fe4:	e086      	b.n	80020f4 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fe6:	4b90      	ldr	r3, [pc, #576]	@ (8002228 <HAL_RCC_OscConfig+0x340>)
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	2238      	movs	r2, #56	@ 0x38
 8001fec:	4013      	ands	r3, r2
 8001fee:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d12f      	bne.n	8002056 <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	68db      	ldr	r3, [r3, #12]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d101      	bne.n	8002002 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e18b      	b.n	800231a <HAL_RCC_OscConfig+0x432>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002002:	4b89      	ldr	r3, [pc, #548]	@ (8002228 <HAL_RCC_OscConfig+0x340>)
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	4a8b      	ldr	r2, [pc, #556]	@ (8002234 <HAL_RCC_OscConfig+0x34c>)
 8002008:	4013      	ands	r3, r2
 800200a:	0019      	movs	r1, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	695b      	ldr	r3, [r3, #20]
 8002010:	021a      	lsls	r2, r3, #8
 8002012:	4b85      	ldr	r3, [pc, #532]	@ (8002228 <HAL_RCC_OscConfig+0x340>)
 8002014:	430a      	orrs	r2, r1
 8002016:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d112      	bne.n	8002044 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800201e:	4b82      	ldr	r3, [pc, #520]	@ (8002228 <HAL_RCC_OscConfig+0x340>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a85      	ldr	r2, [pc, #532]	@ (8002238 <HAL_RCC_OscConfig+0x350>)
 8002024:	4013      	ands	r3, r2
 8002026:	0019      	movs	r1, r3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	691a      	ldr	r2, [r3, #16]
 800202c:	4b7e      	ldr	r3, [pc, #504]	@ (8002228 <HAL_RCC_OscConfig+0x340>)
 800202e:	430a      	orrs	r2, r1
 8002030:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002032:	4b7d      	ldr	r3, [pc, #500]	@ (8002228 <HAL_RCC_OscConfig+0x340>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	0adb      	lsrs	r3, r3, #11
 8002038:	2207      	movs	r2, #7
 800203a:	4013      	ands	r3, r2
 800203c:	4a7f      	ldr	r2, [pc, #508]	@ (800223c <HAL_RCC_OscConfig+0x354>)
 800203e:	40da      	lsrs	r2, r3
 8002040:	4b7f      	ldr	r3, [pc, #508]	@ (8002240 <HAL_RCC_OscConfig+0x358>)
 8002042:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002044:	4b7f      	ldr	r3, [pc, #508]	@ (8002244 <HAL_RCC_OscConfig+0x35c>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	0018      	movs	r0, r3
 800204a:	f7ff f943 	bl	80012d4 <HAL_InitTick>
 800204e:	1e03      	subs	r3, r0, #0
 8002050:	d050      	beq.n	80020f4 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e161      	b.n	800231a <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	68db      	ldr	r3, [r3, #12]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d030      	beq.n	80020c0 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800205e:	4b72      	ldr	r3, [pc, #456]	@ (8002228 <HAL_RCC_OscConfig+0x340>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a75      	ldr	r2, [pc, #468]	@ (8002238 <HAL_RCC_OscConfig+0x350>)
 8002064:	4013      	ands	r3, r2
 8002066:	0019      	movs	r1, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	691a      	ldr	r2, [r3, #16]
 800206c:	4b6e      	ldr	r3, [pc, #440]	@ (8002228 <HAL_RCC_OscConfig+0x340>)
 800206e:	430a      	orrs	r2, r1
 8002070:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8002072:	4b6d      	ldr	r3, [pc, #436]	@ (8002228 <HAL_RCC_OscConfig+0x340>)
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	4b6c      	ldr	r3, [pc, #432]	@ (8002228 <HAL_RCC_OscConfig+0x340>)
 8002078:	2180      	movs	r1, #128	@ 0x80
 800207a:	0049      	lsls	r1, r1, #1
 800207c:	430a      	orrs	r2, r1
 800207e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002080:	f7ff f984 	bl	800138c <HAL_GetTick>
 8002084:	0003      	movs	r3, r0
 8002086:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002088:	e008      	b.n	800209c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800208a:	f7ff f97f 	bl	800138c <HAL_GetTick>
 800208e:	0002      	movs	r2, r0
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	2b02      	cmp	r3, #2
 8002096:	d901      	bls.n	800209c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002098:	2303      	movs	r3, #3
 800209a:	e13e      	b.n	800231a <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800209c:	4b62      	ldr	r3, [pc, #392]	@ (8002228 <HAL_RCC_OscConfig+0x340>)
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	2380      	movs	r3, #128	@ 0x80
 80020a2:	00db      	lsls	r3, r3, #3
 80020a4:	4013      	ands	r3, r2
 80020a6:	d0f0      	beq.n	800208a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020a8:	4b5f      	ldr	r3, [pc, #380]	@ (8002228 <HAL_RCC_OscConfig+0x340>)
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	4a61      	ldr	r2, [pc, #388]	@ (8002234 <HAL_RCC_OscConfig+0x34c>)
 80020ae:	4013      	ands	r3, r2
 80020b0:	0019      	movs	r1, r3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	695b      	ldr	r3, [r3, #20]
 80020b6:	021a      	lsls	r2, r3, #8
 80020b8:	4b5b      	ldr	r3, [pc, #364]	@ (8002228 <HAL_RCC_OscConfig+0x340>)
 80020ba:	430a      	orrs	r2, r1
 80020bc:	605a      	str	r2, [r3, #4]
 80020be:	e019      	b.n	80020f4 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 80020c0:	4b59      	ldr	r3, [pc, #356]	@ (8002228 <HAL_RCC_OscConfig+0x340>)
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	4b58      	ldr	r3, [pc, #352]	@ (8002228 <HAL_RCC_OscConfig+0x340>)
 80020c6:	4960      	ldr	r1, [pc, #384]	@ (8002248 <HAL_RCC_OscConfig+0x360>)
 80020c8:	400a      	ands	r2, r1
 80020ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020cc:	f7ff f95e 	bl	800138c <HAL_GetTick>
 80020d0:	0003      	movs	r3, r0
 80020d2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020d4:	e008      	b.n	80020e8 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80020d6:	f7ff f959 	bl	800138c <HAL_GetTick>
 80020da:	0002      	movs	r2, r0
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d901      	bls.n	80020e8 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80020e4:	2303      	movs	r3, #3
 80020e6:	e118      	b.n	800231a <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020e8:	4b4f      	ldr	r3, [pc, #316]	@ (8002228 <HAL_RCC_OscConfig+0x340>)
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	2380      	movs	r3, #128	@ 0x80
 80020ee:	00db      	lsls	r3, r3, #3
 80020f0:	4013      	ands	r3, r2
 80020f2:	d1f0      	bne.n	80020d6 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2208      	movs	r2, #8
 80020fa:	4013      	ands	r3, r2
 80020fc:	d042      	beq.n	8002184 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80020fe:	4b4a      	ldr	r3, [pc, #296]	@ (8002228 <HAL_RCC_OscConfig+0x340>)
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	2238      	movs	r2, #56	@ 0x38
 8002104:	4013      	ands	r3, r2
 8002106:	2b18      	cmp	r3, #24
 8002108:	d105      	bne.n	8002116 <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	699b      	ldr	r3, [r3, #24]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d138      	bne.n	8002184 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e101      	b.n	800231a <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	699b      	ldr	r3, [r3, #24]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d019      	beq.n	8002152 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800211e:	4b42      	ldr	r3, [pc, #264]	@ (8002228 <HAL_RCC_OscConfig+0x340>)
 8002120:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002122:	4b41      	ldr	r3, [pc, #260]	@ (8002228 <HAL_RCC_OscConfig+0x340>)
 8002124:	2101      	movs	r1, #1
 8002126:	430a      	orrs	r2, r1
 8002128:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800212a:	f7ff f92f 	bl	800138c <HAL_GetTick>
 800212e:	0003      	movs	r3, r0
 8002130:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002132:	e008      	b.n	8002146 <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002134:	f7ff f92a 	bl	800138c <HAL_GetTick>
 8002138:	0002      	movs	r2, r0
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	2b02      	cmp	r3, #2
 8002140:	d901      	bls.n	8002146 <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e0e9      	b.n	800231a <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002146:	4b38      	ldr	r3, [pc, #224]	@ (8002228 <HAL_RCC_OscConfig+0x340>)
 8002148:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800214a:	2202      	movs	r2, #2
 800214c:	4013      	ands	r3, r2
 800214e:	d0f1      	beq.n	8002134 <HAL_RCC_OscConfig+0x24c>
 8002150:	e018      	b.n	8002184 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002152:	4b35      	ldr	r3, [pc, #212]	@ (8002228 <HAL_RCC_OscConfig+0x340>)
 8002154:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002156:	4b34      	ldr	r3, [pc, #208]	@ (8002228 <HAL_RCC_OscConfig+0x340>)
 8002158:	2101      	movs	r1, #1
 800215a:	438a      	bics	r2, r1
 800215c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800215e:	f7ff f915 	bl	800138c <HAL_GetTick>
 8002162:	0003      	movs	r3, r0
 8002164:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8002166:	e008      	b.n	800217a <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002168:	f7ff f910 	bl	800138c <HAL_GetTick>
 800216c:	0002      	movs	r2, r0
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	2b02      	cmp	r3, #2
 8002174:	d901      	bls.n	800217a <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e0cf      	b.n	800231a <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 800217a:	4b2b      	ldr	r3, [pc, #172]	@ (8002228 <HAL_RCC_OscConfig+0x340>)
 800217c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800217e:	2202      	movs	r2, #2
 8002180:	4013      	ands	r3, r2
 8002182:	d1f1      	bne.n	8002168 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2204      	movs	r2, #4
 800218a:	4013      	ands	r3, r2
 800218c:	d100      	bne.n	8002190 <HAL_RCC_OscConfig+0x2a8>
 800218e:	e084      	b.n	800229a <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002190:	230f      	movs	r3, #15
 8002192:	18fb      	adds	r3, r7, r3
 8002194:	2200      	movs	r2, #0
 8002196:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002198:	4b23      	ldr	r3, [pc, #140]	@ (8002228 <HAL_RCC_OscConfig+0x340>)
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	2238      	movs	r2, #56	@ 0x38
 800219e:	4013      	ands	r3, r2
 80021a0:	2b20      	cmp	r3, #32
 80021a2:	d106      	bne.n	80021b2 <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d000      	beq.n	80021ae <HAL_RCC_OscConfig+0x2c6>
 80021ac:	e075      	b.n	800229a <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e0b3      	b.n	800231a <HAL_RCC_OscConfig+0x432>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d106      	bne.n	80021c8 <HAL_RCC_OscConfig+0x2e0>
 80021ba:	4b1b      	ldr	r3, [pc, #108]	@ (8002228 <HAL_RCC_OscConfig+0x340>)
 80021bc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80021be:	4b1a      	ldr	r3, [pc, #104]	@ (8002228 <HAL_RCC_OscConfig+0x340>)
 80021c0:	2101      	movs	r1, #1
 80021c2:	430a      	orrs	r2, r1
 80021c4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80021c6:	e01c      	b.n	8002202 <HAL_RCC_OscConfig+0x31a>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	2b05      	cmp	r3, #5
 80021ce:	d10c      	bne.n	80021ea <HAL_RCC_OscConfig+0x302>
 80021d0:	4b15      	ldr	r3, [pc, #84]	@ (8002228 <HAL_RCC_OscConfig+0x340>)
 80021d2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80021d4:	4b14      	ldr	r3, [pc, #80]	@ (8002228 <HAL_RCC_OscConfig+0x340>)
 80021d6:	2104      	movs	r1, #4
 80021d8:	430a      	orrs	r2, r1
 80021da:	65da      	str	r2, [r3, #92]	@ 0x5c
 80021dc:	4b12      	ldr	r3, [pc, #72]	@ (8002228 <HAL_RCC_OscConfig+0x340>)
 80021de:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80021e0:	4b11      	ldr	r3, [pc, #68]	@ (8002228 <HAL_RCC_OscConfig+0x340>)
 80021e2:	2101      	movs	r1, #1
 80021e4:	430a      	orrs	r2, r1
 80021e6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80021e8:	e00b      	b.n	8002202 <HAL_RCC_OscConfig+0x31a>
 80021ea:	4b0f      	ldr	r3, [pc, #60]	@ (8002228 <HAL_RCC_OscConfig+0x340>)
 80021ec:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80021ee:	4b0e      	ldr	r3, [pc, #56]	@ (8002228 <HAL_RCC_OscConfig+0x340>)
 80021f0:	2101      	movs	r1, #1
 80021f2:	438a      	bics	r2, r1
 80021f4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80021f6:	4b0c      	ldr	r3, [pc, #48]	@ (8002228 <HAL_RCC_OscConfig+0x340>)
 80021f8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80021fa:	4b0b      	ldr	r3, [pc, #44]	@ (8002228 <HAL_RCC_OscConfig+0x340>)
 80021fc:	2104      	movs	r1, #4
 80021fe:	438a      	bics	r2, r1
 8002200:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d028      	beq.n	800225c <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800220a:	f7ff f8bf 	bl	800138c <HAL_GetTick>
 800220e:	0003      	movs	r3, r0
 8002210:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002212:	e01d      	b.n	8002250 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002214:	f7ff f8ba 	bl	800138c <HAL_GetTick>
 8002218:	0002      	movs	r2, r0
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	4a0b      	ldr	r2, [pc, #44]	@ (800224c <HAL_RCC_OscConfig+0x364>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d915      	bls.n	8002250 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8002224:	2303      	movs	r3, #3
 8002226:	e078      	b.n	800231a <HAL_RCC_OscConfig+0x432>
 8002228:	40021000 	.word	0x40021000
 800222c:	fffeffff 	.word	0xfffeffff
 8002230:	fffbffff 	.word	0xfffbffff
 8002234:	ffff80ff 	.word	0xffff80ff
 8002238:	ffffc7ff 	.word	0xffffc7ff
 800223c:	02dc6c00 	.word	0x02dc6c00
 8002240:	20000018 	.word	0x20000018
 8002244:	2000001c 	.word	0x2000001c
 8002248:	fffffeff 	.word	0xfffffeff
 800224c:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002250:	4b34      	ldr	r3, [pc, #208]	@ (8002324 <HAL_RCC_OscConfig+0x43c>)
 8002252:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002254:	2202      	movs	r2, #2
 8002256:	4013      	ands	r3, r2
 8002258:	d0dc      	beq.n	8002214 <HAL_RCC_OscConfig+0x32c>
 800225a:	e013      	b.n	8002284 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800225c:	f7ff f896 	bl	800138c <HAL_GetTick>
 8002260:	0003      	movs	r3, r0
 8002262:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8002264:	e009      	b.n	800227a <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002266:	f7ff f891 	bl	800138c <HAL_GetTick>
 800226a:	0002      	movs	r2, r0
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	4a2d      	ldr	r2, [pc, #180]	@ (8002328 <HAL_RCC_OscConfig+0x440>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d901      	bls.n	800227a <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	e04f      	b.n	800231a <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 800227a:	4b2a      	ldr	r3, [pc, #168]	@ (8002324 <HAL_RCC_OscConfig+0x43c>)
 800227c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800227e:	2202      	movs	r2, #2
 8002280:	4013      	ands	r3, r2
 8002282:	d1f0      	bne.n	8002266 <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002284:	230f      	movs	r3, #15
 8002286:	18fb      	adds	r3, r7, r3
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	2b01      	cmp	r3, #1
 800228c:	d105      	bne.n	800229a <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800228e:	4b25      	ldr	r3, [pc, #148]	@ (8002324 <HAL_RCC_OscConfig+0x43c>)
 8002290:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002292:	4b24      	ldr	r3, [pc, #144]	@ (8002324 <HAL_RCC_OscConfig+0x43c>)
 8002294:	4925      	ldr	r1, [pc, #148]	@ (800232c <HAL_RCC_OscConfig+0x444>)
 8002296:	400a      	ands	r2, r1
 8002298:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_CR_HSIUSB48ON)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	2210      	movs	r2, #16
 80022a0:	4013      	ands	r3, r2
 80022a2:	d039      	beq.n	8002318 <HAL_RCC_OscConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	69db      	ldr	r3, [r3, #28]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d01b      	beq.n	80022e4 <HAL_RCC_OscConfig+0x3fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80022ac:	4b1d      	ldr	r3, [pc, #116]	@ (8002324 <HAL_RCC_OscConfig+0x43c>)
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	4b1c      	ldr	r3, [pc, #112]	@ (8002324 <HAL_RCC_OscConfig+0x43c>)
 80022b2:	2180      	movs	r1, #128	@ 0x80
 80022b4:	03c9      	lsls	r1, r1, #15
 80022b6:	430a      	orrs	r2, r1
 80022b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022ba:	f7ff f867 	bl	800138c <HAL_GetTick>
 80022be:	0003      	movs	r3, r0
 80022c0:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 80022c2:	e008      	b.n	80022d6 <HAL_RCC_OscConfig+0x3ee>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80022c4:	f7ff f862 	bl	800138c <HAL_GetTick>
 80022c8:	0002      	movs	r2, r0
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e021      	b.n	800231a <HAL_RCC_OscConfig+0x432>
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 80022d6:	4b13      	ldr	r3, [pc, #76]	@ (8002324 <HAL_RCC_OscConfig+0x43c>)
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	2380      	movs	r3, #128	@ 0x80
 80022dc:	041b      	lsls	r3, r3, #16
 80022de:	4013      	ands	r3, r2
 80022e0:	d0f0      	beq.n	80022c4 <HAL_RCC_OscConfig+0x3dc>
 80022e2:	e019      	b.n	8002318 <HAL_RCC_OscConfig+0x430>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80022e4:	4b0f      	ldr	r3, [pc, #60]	@ (8002324 <HAL_RCC_OscConfig+0x43c>)
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	4b0e      	ldr	r3, [pc, #56]	@ (8002324 <HAL_RCC_OscConfig+0x43c>)
 80022ea:	4911      	ldr	r1, [pc, #68]	@ (8002330 <HAL_RCC_OscConfig+0x448>)
 80022ec:	400a      	ands	r2, r1
 80022ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022f0:	f7ff f84c 	bl	800138c <HAL_GetTick>
 80022f4:	0003      	movs	r3, r0
 80022f6:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) != 0U)
 80022f8:	e008      	b.n	800230c <HAL_RCC_OscConfig+0x424>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80022fa:	f7ff f847 	bl	800138c <HAL_GetTick>
 80022fe:	0002      	movs	r2, r0
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	2b02      	cmp	r3, #2
 8002306:	d901      	bls.n	800230c <HAL_RCC_OscConfig+0x424>
        {
          return HAL_TIMEOUT;
 8002308:	2303      	movs	r3, #3
 800230a:	e006      	b.n	800231a <HAL_RCC_OscConfig+0x432>
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) != 0U)
 800230c:	4b05      	ldr	r3, [pc, #20]	@ (8002324 <HAL_RCC_OscConfig+0x43c>)
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	2380      	movs	r3, #128	@ 0x80
 8002312:	041b      	lsls	r3, r3, #16
 8002314:	4013      	ands	r3, r2
 8002316:	d1f0      	bne.n	80022fa <HAL_RCC_OscConfig+0x412>
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 8002318:	2300      	movs	r3, #0
}
 800231a:	0018      	movs	r0, r3
 800231c:	46bd      	mov	sp, r7
 800231e:	b006      	add	sp, #24
 8002320:	bd80      	pop	{r7, pc}
 8002322:	46c0      	nop			@ (mov r8, r8)
 8002324:	40021000 	.word	0x40021000
 8002328:	00001388 	.word	0x00001388
 800232c:	efffffff 	.word	0xefffffff
 8002330:	ffbfffff 	.word	0xffbfffff

08002334 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d101      	bne.n	8002348 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e0f6      	b.n	8002536 <HAL_RCC_ClockConfig+0x202>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002348:	4b7d      	ldr	r3, [pc, #500]	@ (8002540 <HAL_RCC_ClockConfig+0x20c>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2207      	movs	r2, #7
 800234e:	4013      	ands	r3, r2
 8002350:	683a      	ldr	r2, [r7, #0]
 8002352:	429a      	cmp	r2, r3
 8002354:	d91e      	bls.n	8002394 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002356:	4b7a      	ldr	r3, [pc, #488]	@ (8002540 <HAL_RCC_ClockConfig+0x20c>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	2207      	movs	r2, #7
 800235c:	4393      	bics	r3, r2
 800235e:	0019      	movs	r1, r3
 8002360:	4b77      	ldr	r3, [pc, #476]	@ (8002540 <HAL_RCC_ClockConfig+0x20c>)
 8002362:	683a      	ldr	r2, [r7, #0]
 8002364:	430a      	orrs	r2, r1
 8002366:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002368:	f7ff f810 	bl	800138c <HAL_GetTick>
 800236c:	0003      	movs	r3, r0
 800236e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002370:	e009      	b.n	8002386 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002372:	f7ff f80b 	bl	800138c <HAL_GetTick>
 8002376:	0002      	movs	r2, r0
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	4a71      	ldr	r2, [pc, #452]	@ (8002544 <HAL_RCC_ClockConfig+0x210>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d901      	bls.n	8002386 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e0d7      	b.n	8002536 <HAL_RCC_ClockConfig+0x202>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002386:	4b6e      	ldr	r3, [pc, #440]	@ (8002540 <HAL_RCC_ClockConfig+0x20c>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2207      	movs	r2, #7
 800238c:	4013      	ands	r3, r2
 800238e:	683a      	ldr	r2, [r7, #0]
 8002390:	429a      	cmp	r2, r3
 8002392:	d1ee      	bne.n	8002372 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2202      	movs	r2, #2
 800239a:	4013      	ands	r3, r2
 800239c:	d017      	beq.n	80023ce <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	2204      	movs	r2, #4
 80023a4:	4013      	ands	r3, r2
 80023a6:	d008      	beq.n	80023ba <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80023a8:	4b67      	ldr	r3, [pc, #412]	@ (8002548 <HAL_RCC_ClockConfig+0x214>)
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	4a67      	ldr	r2, [pc, #412]	@ (800254c <HAL_RCC_ClockConfig+0x218>)
 80023ae:	401a      	ands	r2, r3
 80023b0:	4b65      	ldr	r3, [pc, #404]	@ (8002548 <HAL_RCC_ClockConfig+0x214>)
 80023b2:	21b0      	movs	r1, #176	@ 0xb0
 80023b4:	0109      	lsls	r1, r1, #4
 80023b6:	430a      	orrs	r2, r1
 80023b8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023ba:	4b63      	ldr	r3, [pc, #396]	@ (8002548 <HAL_RCC_ClockConfig+0x214>)
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	4a64      	ldr	r2, [pc, #400]	@ (8002550 <HAL_RCC_ClockConfig+0x21c>)
 80023c0:	4013      	ands	r3, r2
 80023c2:	0019      	movs	r1, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	68da      	ldr	r2, [r3, #12]
 80023c8:	4b5f      	ldr	r3, [pc, #380]	@ (8002548 <HAL_RCC_ClockConfig+0x214>)
 80023ca:	430a      	orrs	r2, r1
 80023cc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2201      	movs	r2, #1
 80023d4:	4013      	ands	r3, r2
 80023d6:	d100      	bne.n	80023da <HAL_RCC_ClockConfig+0xa6>
 80023d8:	e061      	b.n	800249e <HAL_RCC_ClockConfig+0x16a>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 80023da:	4b5b      	ldr	r3, [pc, #364]	@ (8002548 <HAL_RCC_ClockConfig+0x214>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	221c      	movs	r2, #28
 80023e0:	4393      	bics	r3, r2
 80023e2:	0019      	movs	r1, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	689a      	ldr	r2, [r3, #8]
 80023e8:	4b57      	ldr	r3, [pc, #348]	@ (8002548 <HAL_RCC_ClockConfig+0x214>)
 80023ea:	430a      	orrs	r2, r1
 80023ec:	601a      	str	r2, [r3, #0]
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d107      	bne.n	8002406 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023f6:	4b54      	ldr	r3, [pc, #336]	@ (8002548 <HAL_RCC_ClockConfig+0x214>)
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	2380      	movs	r3, #128	@ 0x80
 80023fc:	029b      	lsls	r3, r3, #10
 80023fe:	4013      	ands	r3, r2
 8002400:	d12b      	bne.n	800245a <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e097      	b.n	8002536 <HAL_RCC_ClockConfig+0x202>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d107      	bne.n	800241e <HAL_RCC_ClockConfig+0xea>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800240e:	4b4e      	ldr	r3, [pc, #312]	@ (8002548 <HAL_RCC_ClockConfig+0x214>)
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	2380      	movs	r3, #128	@ 0x80
 8002414:	00db      	lsls	r3, r3, #3
 8002416:	4013      	ands	r3, r2
 8002418:	d11f      	bne.n	800245a <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e08b      	b.n	8002536 <HAL_RCC_ClockConfig+0x202>
      }
    }
#if defined(RCC_HSI48_SUPPORT)
    /* HSIUSB48 is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSIUSB48)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	2b02      	cmp	r3, #2
 8002424:	d107      	bne.n	8002436 <HAL_RCC_ClockConfig+0x102>
    {
      /* Check the HSIUSB48 ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 8002426:	4b48      	ldr	r3, [pc, #288]	@ (8002548 <HAL_RCC_ClockConfig+0x214>)
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	2380      	movs	r3, #128	@ 0x80
 800242c:	041b      	lsls	r3, r3, #16
 800242e:	4013      	ands	r3, r2
 8002430:	d113      	bne.n	800245a <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e07f      	b.n	8002536 <HAL_RCC_ClockConfig+0x202>
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	2b03      	cmp	r3, #3
 800243c:	d106      	bne.n	800244c <HAL_RCC_ClockConfig+0x118>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800243e:	4b42      	ldr	r3, [pc, #264]	@ (8002548 <HAL_RCC_ClockConfig+0x214>)
 8002440:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002442:	2202      	movs	r2, #2
 8002444:	4013      	ands	r3, r2
 8002446:	d108      	bne.n	800245a <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e074      	b.n	8002536 <HAL_RCC_ClockConfig+0x202>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800244c:	4b3e      	ldr	r3, [pc, #248]	@ (8002548 <HAL_RCC_ClockConfig+0x214>)
 800244e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002450:	2202      	movs	r2, #2
 8002452:	4013      	ands	r3, r2
 8002454:	d101      	bne.n	800245a <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e06d      	b.n	8002536 <HAL_RCC_ClockConfig+0x202>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800245a:	4b3b      	ldr	r3, [pc, #236]	@ (8002548 <HAL_RCC_ClockConfig+0x214>)
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	2207      	movs	r2, #7
 8002460:	4393      	bics	r3, r2
 8002462:	0019      	movs	r1, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685a      	ldr	r2, [r3, #4]
 8002468:	4b37      	ldr	r3, [pc, #220]	@ (8002548 <HAL_RCC_ClockConfig+0x214>)
 800246a:	430a      	orrs	r2, r1
 800246c:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800246e:	f7fe ff8d 	bl	800138c <HAL_GetTick>
 8002472:	0003      	movs	r3, r0
 8002474:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002476:	e009      	b.n	800248c <HAL_RCC_ClockConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002478:	f7fe ff88 	bl	800138c <HAL_GetTick>
 800247c:	0002      	movs	r2, r0
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	4a30      	ldr	r2, [pc, #192]	@ (8002544 <HAL_RCC_ClockConfig+0x210>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d901      	bls.n	800248c <HAL_RCC_ClockConfig+0x158>
      {
        return HAL_TIMEOUT;
 8002488:	2303      	movs	r3, #3
 800248a:	e054      	b.n	8002536 <HAL_RCC_ClockConfig+0x202>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800248c:	4b2e      	ldr	r3, [pc, #184]	@ (8002548 <HAL_RCC_ClockConfig+0x214>)
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	2238      	movs	r2, #56	@ 0x38
 8002492:	401a      	ands	r2, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	00db      	lsls	r3, r3, #3
 800249a:	429a      	cmp	r2, r3
 800249c:	d1ec      	bne.n	8002478 <HAL_RCC_ClockConfig+0x144>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800249e:	4b28      	ldr	r3, [pc, #160]	@ (8002540 <HAL_RCC_ClockConfig+0x20c>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2207      	movs	r2, #7
 80024a4:	4013      	ands	r3, r2
 80024a6:	683a      	ldr	r2, [r7, #0]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d21e      	bcs.n	80024ea <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ac:	4b24      	ldr	r3, [pc, #144]	@ (8002540 <HAL_RCC_ClockConfig+0x20c>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	2207      	movs	r2, #7
 80024b2:	4393      	bics	r3, r2
 80024b4:	0019      	movs	r1, r3
 80024b6:	4b22      	ldr	r3, [pc, #136]	@ (8002540 <HAL_RCC_ClockConfig+0x20c>)
 80024b8:	683a      	ldr	r2, [r7, #0]
 80024ba:	430a      	orrs	r2, r1
 80024bc:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80024be:	f7fe ff65 	bl	800138c <HAL_GetTick>
 80024c2:	0003      	movs	r3, r0
 80024c4:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80024c6:	e009      	b.n	80024dc <HAL_RCC_ClockConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80024c8:	f7fe ff60 	bl	800138c <HAL_GetTick>
 80024cc:	0002      	movs	r2, r0
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	4a1c      	ldr	r2, [pc, #112]	@ (8002544 <HAL_RCC_ClockConfig+0x210>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d901      	bls.n	80024dc <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_TIMEOUT;
 80024d8:	2303      	movs	r3, #3
 80024da:	e02c      	b.n	8002536 <HAL_RCC_ClockConfig+0x202>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80024dc:	4b18      	ldr	r3, [pc, #96]	@ (8002540 <HAL_RCC_ClockConfig+0x20c>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2207      	movs	r2, #7
 80024e2:	4013      	ands	r3, r2
 80024e4:	683a      	ldr	r2, [r7, #0]
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d1ee      	bne.n	80024c8 <HAL_RCC_ClockConfig+0x194>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2204      	movs	r2, #4
 80024f0:	4013      	ands	r3, r2
 80024f2:	d009      	beq.n	8002508 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80024f4:	4b14      	ldr	r3, [pc, #80]	@ (8002548 <HAL_RCC_ClockConfig+0x214>)
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	4a16      	ldr	r2, [pc, #88]	@ (8002554 <HAL_RCC_ClockConfig+0x220>)
 80024fa:	4013      	ands	r3, r2
 80024fc:	0019      	movs	r1, r3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	691a      	ldr	r2, [r3, #16]
 8002502:	4b11      	ldr	r3, [pc, #68]	@ (8002548 <HAL_RCC_ClockConfig+0x214>)
 8002504:	430a      	orrs	r2, r1
 8002506:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002508:	f000 f82c 	bl	8002564 <HAL_RCC_GetSysClockFreq>
 800250c:	0001      	movs	r1, r0
 800250e:	4b0e      	ldr	r3, [pc, #56]	@ (8002548 <HAL_RCC_ClockConfig+0x214>)
 8002510:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002512:	0a1b      	lsrs	r3, r3, #8
 8002514:	220f      	movs	r2, #15
 8002516:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002518:	4b0f      	ldr	r3, [pc, #60]	@ (8002558 <HAL_RCC_ClockConfig+0x224>)
 800251a:	0092      	lsls	r2, r2, #2
 800251c:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800251e:	221f      	movs	r2, #31
 8002520:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002522:	000a      	movs	r2, r1
 8002524:	40da      	lsrs	r2, r3
 8002526:	4b0d      	ldr	r3, [pc, #52]	@ (800255c <HAL_RCC_ClockConfig+0x228>)
 8002528:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800252a:	4b0d      	ldr	r3, [pc, #52]	@ (8002560 <HAL_RCC_ClockConfig+0x22c>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	0018      	movs	r0, r3
 8002530:	f7fe fed0 	bl	80012d4 <HAL_InitTick>
 8002534:	0003      	movs	r3, r0
}
 8002536:	0018      	movs	r0, r3
 8002538:	46bd      	mov	sp, r7
 800253a:	b004      	add	sp, #16
 800253c:	bd80      	pop	{r7, pc}
 800253e:	46c0      	nop			@ (mov r8, r8)
 8002540:	40022000 	.word	0x40022000
 8002544:	00001388 	.word	0x00001388
 8002548:	40021000 	.word	0x40021000
 800254c:	ffff84ff 	.word	0xffff84ff
 8002550:	fffff0ff 	.word	0xfffff0ff
 8002554:	ffff8fff 	.word	0xffff8fff
 8002558:	080049d4 	.word	0x080049d4
 800255c:	20000018 	.word	0x20000018
 8002560:	2000001c 	.word	0x2000001c

08002564 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
 800256a:	4b27      	ldr	r3, [pc, #156]	@ (8002608 <HAL_RCC_GetSysClockFreq+0xa4>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	089b      	lsrs	r3, r3, #2
 8002570:	2207      	movs	r2, #7
 8002572:	4013      	ands	r3, r2
 8002574:	3301      	adds	r3, #1
 8002576:	60bb      	str	r3, [r7, #8]
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002578:	4b23      	ldr	r3, [pc, #140]	@ (8002608 <HAL_RCC_GetSysClockFreq+0xa4>)
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	2238      	movs	r2, #56	@ 0x38
 800257e:	4013      	ands	r3, r2
 8002580:	d10f      	bne.n	80025a2 <HAL_RCC_GetSysClockFreq+0x3e>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002582:	4b21      	ldr	r3, [pc, #132]	@ (8002608 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	0adb      	lsrs	r3, r3, #11
 8002588:	2207      	movs	r2, #7
 800258a:	4013      	ands	r3, r2
 800258c:	2201      	movs	r2, #1
 800258e:	409a      	lsls	r2, r3
 8002590:	0013      	movs	r3, r2
 8002592:	607b      	str	r3, [r7, #4]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002594:	6879      	ldr	r1, [r7, #4]
 8002596:	481d      	ldr	r0, [pc, #116]	@ (800260c <HAL_RCC_GetSysClockFreq+0xa8>)
 8002598:	f7fd fdb6 	bl	8000108 <__udivsi3>
 800259c:	0003      	movs	r3, r0
 800259e:	60fb      	str	r3, [r7, #12]
 80025a0:	e027      	b.n	80025f2 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80025a2:	4b19      	ldr	r3, [pc, #100]	@ (8002608 <HAL_RCC_GetSysClockFreq+0xa4>)
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	2238      	movs	r2, #56	@ 0x38
 80025a8:	4013      	ands	r3, r2
 80025aa:	2b08      	cmp	r3, #8
 80025ac:	d102      	bne.n	80025b4 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80025ae:	4b18      	ldr	r3, [pc, #96]	@ (8002610 <HAL_RCC_GetSysClockFreq+0xac>)
 80025b0:	60fb      	str	r3, [r7, #12]
 80025b2:	e01e      	b.n	80025f2 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80025b4:	4b14      	ldr	r3, [pc, #80]	@ (8002608 <HAL_RCC_GetSysClockFreq+0xa4>)
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	2238      	movs	r2, #56	@ 0x38
 80025ba:	4013      	ands	r3, r2
 80025bc:	2b20      	cmp	r3, #32
 80025be:	d103      	bne.n	80025c8 <HAL_RCC_GetSysClockFreq+0x64>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80025c0:	2380      	movs	r3, #128	@ 0x80
 80025c2:	021b      	lsls	r3, r3, #8
 80025c4:	60fb      	str	r3, [r7, #12]
 80025c6:	e014      	b.n	80025f2 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80025c8:	4b0f      	ldr	r3, [pc, #60]	@ (8002608 <HAL_RCC_GetSysClockFreq+0xa4>)
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	2238      	movs	r2, #56	@ 0x38
 80025ce:	4013      	ands	r3, r2
 80025d0:	2b18      	cmp	r3, #24
 80025d2:	d103      	bne.n	80025dc <HAL_RCC_GetSysClockFreq+0x78>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80025d4:	23fa      	movs	r3, #250	@ 0xfa
 80025d6:	01db      	lsls	r3, r3, #7
 80025d8:	60fb      	str	r3, [r7, #12]
 80025da:	e00a      	b.n	80025f2 <HAL_RCC_GetSysClockFreq+0x8e>
  }
#if defined(RCC_HSI48_SUPPORT)
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI48)
 80025dc:	4b0a      	ldr	r3, [pc, #40]	@ (8002608 <HAL_RCC_GetSysClockFreq+0xa4>)
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	2238      	movs	r2, #56	@ 0x38
 80025e2:	4013      	ands	r3, r2
 80025e4:	2b10      	cmp	r3, #16
 80025e6:	d102      	bne.n	80025ee <HAL_RCC_GetSysClockFreq+0x8a>
  {
    /* HSI48 used as system clock source */
    sysclockfreq = HSI48_VALUE;
 80025e8:	4b08      	ldr	r3, [pc, #32]	@ (800260c <HAL_RCC_GetSysClockFreq+0xa8>)
 80025ea:	60fb      	str	r3, [r7, #12]
 80025ec:	e001      	b.n	80025f2 <HAL_RCC_GetSysClockFreq+0x8e>
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 80025ee:	2300      	movs	r3, #0
 80025f0:	60fb      	str	r3, [r7, #12]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
 80025f2:	68b9      	ldr	r1, [r7, #8]
 80025f4:	68f8      	ldr	r0, [r7, #12]
 80025f6:	f7fd fd87 	bl	8000108 <__udivsi3>
 80025fa:	0003      	movs	r3, r0
 80025fc:	60fb      	str	r3, [r7, #12]
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 80025fe:	68fb      	ldr	r3, [r7, #12]
}
 8002600:	0018      	movs	r0, r3
 8002602:	46bd      	mov	sp, r7
 8002604:	b004      	add	sp, #16
 8002606:	bd80      	pop	{r7, pc}
 8002608:	40021000 	.word	0x40021000
 800260c:	02dc6c00 	.word	0x02dc6c00
 8002610:	007a1200 	.word	0x007a1200

08002614 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	af00      	add	r7, sp, #0
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002618:	f7ff ffa4 	bl	8002564 <HAL_RCC_GetSysClockFreq>
 800261c:	0001      	movs	r1, r0
 800261e:	4b09      	ldr	r3, [pc, #36]	@ (8002644 <HAL_RCC_GetHCLKFreq+0x30>)
 8002620:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002622:	0a1b      	lsrs	r3, r3, #8
 8002624:	220f      	movs	r2, #15
 8002626:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002628:	4b07      	ldr	r3, [pc, #28]	@ (8002648 <HAL_RCC_GetHCLKFreq+0x34>)
 800262a:	0092      	lsls	r2, r2, #2
 800262c:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800262e:	221f      	movs	r2, #31
 8002630:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002632:	000a      	movs	r2, r1
 8002634:	40da      	lsrs	r2, r3
 8002636:	4b05      	ldr	r3, [pc, #20]	@ (800264c <HAL_RCC_GetHCLKFreq+0x38>)
 8002638:	601a      	str	r2, [r3, #0]
  return SystemCoreClock;
 800263a:	4b04      	ldr	r3, [pc, #16]	@ (800264c <HAL_RCC_GetHCLKFreq+0x38>)
 800263c:	681b      	ldr	r3, [r3, #0]
}
 800263e:	0018      	movs	r0, r3
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	40021000 	.word	0x40021000
 8002648:	080049d4 	.word	0x080049d4
 800264c:	20000018 	.word	0x20000018

08002650 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8002654:	f7ff ffde 	bl	8002614 <HAL_RCC_GetHCLKFreq>
 8002658:	0001      	movs	r1, r0
 800265a:	4b07      	ldr	r3, [pc, #28]	@ (8002678 <HAL_RCC_GetPCLK1Freq+0x28>)
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	0b1b      	lsrs	r3, r3, #12
 8002660:	2207      	movs	r2, #7
 8002662:	401a      	ands	r2, r3
 8002664:	4b05      	ldr	r3, [pc, #20]	@ (800267c <HAL_RCC_GetPCLK1Freq+0x2c>)
 8002666:	0092      	lsls	r2, r2, #2
 8002668:	58d3      	ldr	r3, [r2, r3]
 800266a:	221f      	movs	r2, #31
 800266c:	4013      	ands	r3, r2
 800266e:	40d9      	lsrs	r1, r3
 8002670:	000b      	movs	r3, r1
}
 8002672:	0018      	movs	r0, r3
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	40021000 	.word	0x40021000
 800267c:	08004a14 	.word	0x08004a14

08002680 <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b086      	sub	sp, #24
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002688:	2313      	movs	r3, #19
 800268a:	18fb      	adds	r3, r7, r3
 800268c:	2200      	movs	r2, #0
 800268e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002690:	2312      	movs	r3, #18
 8002692:	18fb      	adds	r3, r7, r3
 8002694:	2200      	movs	r2, #0
 8002696:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2240      	movs	r2, #64	@ 0x40
 800269e:	4013      	ands	r3, r2
 80026a0:	d100      	bne.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x24>
 80026a2:	e079      	b.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026a4:	2011      	movs	r0, #17
 80026a6:	183b      	adds	r3, r7, r0
 80026a8:	2200      	movs	r2, #0
 80026aa:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026ac:	4b6a      	ldr	r3, [pc, #424]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80026ae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80026b0:	2380      	movs	r3, #128	@ 0x80
 80026b2:	055b      	lsls	r3, r3, #21
 80026b4:	4013      	ands	r3, r2
 80026b6:	d110      	bne.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026b8:	4b67      	ldr	r3, [pc, #412]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80026ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80026bc:	4b66      	ldr	r3, [pc, #408]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80026be:	2180      	movs	r1, #128	@ 0x80
 80026c0:	0549      	lsls	r1, r1, #21
 80026c2:	430a      	orrs	r2, r1
 80026c4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80026c6:	4b64      	ldr	r3, [pc, #400]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80026c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80026ca:	2380      	movs	r3, #128	@ 0x80
 80026cc:	055b      	lsls	r3, r3, #21
 80026ce:	4013      	ands	r3, r2
 80026d0:	60bb      	str	r3, [r7, #8]
 80026d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026d4:	183b      	adds	r3, r7, r0
 80026d6:	2201      	movs	r2, #1
 80026d8:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 80026da:	4b5f      	ldr	r3, [pc, #380]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80026dc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80026de:	23c0      	movs	r3, #192	@ 0xc0
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	4013      	ands	r3, r2
 80026e4:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d019      	beq.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	69db      	ldr	r3, [r3, #28]
 80026f0:	697a      	ldr	r2, [r7, #20]
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d014      	beq.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 80026f6:	4b58      	ldr	r3, [pc, #352]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80026f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026fa:	4a58      	ldr	r2, [pc, #352]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80026fc:	4013      	ands	r3, r2
 80026fe:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002700:	4b55      	ldr	r3, [pc, #340]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002702:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002704:	4b54      	ldr	r3, [pc, #336]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002706:	2180      	movs	r1, #128	@ 0x80
 8002708:	0249      	lsls	r1, r1, #9
 800270a:	430a      	orrs	r2, r1
 800270c:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 800270e:	4b52      	ldr	r3, [pc, #328]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002710:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002712:	4b51      	ldr	r3, [pc, #324]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002714:	4952      	ldr	r1, [pc, #328]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002716:	400a      	ands	r2, r1
 8002718:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 800271a:	4b4f      	ldr	r3, [pc, #316]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800271c:	697a      	ldr	r2, [r7, #20]
 800271e:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	2201      	movs	r2, #1
 8002724:	4013      	ands	r3, r2
 8002726:	d016      	beq.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002728:	f7fe fe30 	bl	800138c <HAL_GetTick>
 800272c:	0003      	movs	r3, r0
 800272e:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002730:	e00c      	b.n	800274c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002732:	f7fe fe2b 	bl	800138c <HAL_GetTick>
 8002736:	0002      	movs	r2, r0
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	4a49      	ldr	r2, [pc, #292]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d904      	bls.n	800274c <HAL_RCCEx_PeriphCLKConfig+0xcc>
        {
          ret = HAL_TIMEOUT;
 8002742:	2313      	movs	r3, #19
 8002744:	18fb      	adds	r3, r7, r3
 8002746:	2203      	movs	r2, #3
 8002748:	701a      	strb	r2, [r3, #0]
          break;
 800274a:	e004      	b.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0xd6>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800274c:	4b42      	ldr	r3, [pc, #264]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800274e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002750:	2202      	movs	r2, #2
 8002752:	4013      	ands	r3, r2
 8002754:	d0ed      	beq.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    if (ret == HAL_OK)
 8002756:	2313      	movs	r3, #19
 8002758:	18fb      	adds	r3, r7, r3
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d10a      	bne.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0xf6>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002760:	4b3d      	ldr	r3, [pc, #244]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002762:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002764:	4a3d      	ldr	r2, [pc, #244]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8002766:	4013      	ands	r3, r2
 8002768:	0019      	movs	r1, r3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	69da      	ldr	r2, [r3, #28]
 800276e:	4b3a      	ldr	r3, [pc, #232]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002770:	430a      	orrs	r2, r1
 8002772:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002774:	e005      	b.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x102>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002776:	2312      	movs	r3, #18
 8002778:	18fb      	adds	r3, r7, r3
 800277a:	2213      	movs	r2, #19
 800277c:	18ba      	adds	r2, r7, r2
 800277e:	7812      	ldrb	r2, [r2, #0]
 8002780:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002782:	2311      	movs	r3, #17
 8002784:	18fb      	adds	r3, r7, r3
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	2b01      	cmp	r3, #1
 800278a:	d105      	bne.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800278c:	4b32      	ldr	r3, [pc, #200]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800278e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002790:	4b31      	ldr	r3, [pc, #196]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002792:	4935      	ldr	r1, [pc, #212]	@ (8002868 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002794:	400a      	ands	r2, r1
 8002796:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2201      	movs	r2, #1
 800279e:	4013      	ands	r3, r2
 80027a0:	d009      	beq.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027a2:	4b2d      	ldr	r3, [pc, #180]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80027a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027a6:	2203      	movs	r2, #3
 80027a8:	4393      	bics	r3, r2
 80027aa:	0019      	movs	r1, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	689a      	ldr	r2, [r3, #8]
 80027b0:	4b29      	ldr	r3, [pc, #164]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80027b2:	430a      	orrs	r2, r1
 80027b4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	2202      	movs	r2, #2
 80027bc:	4013      	ands	r3, r2
 80027be:	d009      	beq.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027c0:	4b25      	ldr	r3, [pc, #148]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80027c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027c4:	4a29      	ldr	r2, [pc, #164]	@ (800286c <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80027c6:	4013      	ands	r3, r2
 80027c8:	0019      	movs	r1, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	68da      	ldr	r2, [r3, #12]
 80027ce:	4b22      	ldr	r3, [pc, #136]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80027d0:	430a      	orrs	r2, r1
 80027d2:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2220      	movs	r2, #32
 80027da:	4013      	ands	r3, r2
 80027dc:	d008      	beq.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80027de:	4b1e      	ldr	r3, [pc, #120]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80027e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	0899      	lsrs	r1, r3, #2
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	699a      	ldr	r2, [r3, #24]
 80027ea:	4b1b      	ldr	r3, [pc, #108]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80027ec:	430a      	orrs	r2, r1
 80027ee:	655a      	str	r2, [r3, #84]	@ 0x54

  }
#if defined (USB_DRD_FS)
  /*-------------------------- USB clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2208      	movs	r2, #8
 80027f6:	4013      	ands	r3, r2
 80027f8:	d009      	beq.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80027fa:	4b17      	ldr	r3, [pc, #92]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80027fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027fe:	4a1c      	ldr	r2, [pc, #112]	@ (8002870 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8002800:	4013      	ands	r3, r2
 8002802:	0019      	movs	r1, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	695a      	ldr	r2, [r3, #20]
 8002808:	4b13      	ldr	r3, [pc, #76]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800280a:	430a      	orrs	r2, r1
 800280c:	659a      	str	r2, [r3, #88]	@ 0x58

  }
#endif /* USB_DRD_FS */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	2204      	movs	r2, #4
 8002814:	4013      	ands	r3, r2
 8002816:	d009      	beq.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002818:	4b0f      	ldr	r3, [pc, #60]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800281a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800281c:	4a15      	ldr	r2, [pc, #84]	@ (8002874 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 800281e:	4013      	ands	r3, r2
 8002820:	0019      	movs	r1, r3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	691a      	ldr	r2, [r3, #16]
 8002826:	4b0c      	ldr	r3, [pc, #48]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002828:	430a      	orrs	r2, r1
 800282a:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2280      	movs	r2, #128	@ 0x80
 8002832:	4013      	ands	r3, r2
 8002834:	d009      	beq.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8002836:	4b08      	ldr	r3, [pc, #32]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	22e0      	movs	r2, #224	@ 0xe0
 800283c:	4393      	bics	r3, r2
 800283e:	0019      	movs	r1, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	685a      	ldr	r2, [r3, #4]
 8002844:	4b04      	ldr	r3, [pc, #16]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002846:	430a      	orrs	r2, r1
 8002848:	601a      	str	r2, [r3, #0]
  }
  return status;
 800284a:	2312      	movs	r3, #18
 800284c:	18fb      	adds	r3, r7, r3
 800284e:	781b      	ldrb	r3, [r3, #0]
}
 8002850:	0018      	movs	r0, r3
 8002852:	46bd      	mov	sp, r7
 8002854:	b006      	add	sp, #24
 8002856:	bd80      	pop	{r7, pc}
 8002858:	40021000 	.word	0x40021000
 800285c:	fffffcff 	.word	0xfffffcff
 8002860:	fffeffff 	.word	0xfffeffff
 8002864:	00001388 	.word	0x00001388
 8002868:	efffffff 	.word	0xefffffff
 800286c:	ffffcfff 	.word	0xffffcfff
 8002870:	ffffefff 	.word	0xffffefff
 8002874:	ffff3fff 	.word	0xffff3fff

08002878 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b08c      	sub	sp, #48	@ 0x30
 800287c:	af00      	add	r7, sp, #0
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	60b9      	str	r1, [r7, #8]
 8002882:	1dbb      	adds	r3, r7, #6
 8002884:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2288      	movs	r2, #136	@ 0x88
 800288a:	589b      	ldr	r3, [r3, r2]
 800288c:	2b20      	cmp	r3, #32
 800288e:	d000      	beq.n	8002892 <HAL_UART_Transmit_IT+0x1a>
 8002890:	e08d      	b.n	80029ae <HAL_UART_Transmit_IT+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d003      	beq.n	80028a0 <HAL_UART_Transmit_IT+0x28>
 8002898:	1dbb      	adds	r3, r7, #6
 800289a:	881b      	ldrh	r3, [r3, #0]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d101      	bne.n	80028a4 <HAL_UART_Transmit_IT+0x2c>
    {
      return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e085      	b.n	80029b0 <HAL_UART_Transmit_IT+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	689a      	ldr	r2, [r3, #8]
 80028a8:	2380      	movs	r3, #128	@ 0x80
 80028aa:	015b      	lsls	r3, r3, #5
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d109      	bne.n	80028c4 <HAL_UART_Transmit_IT+0x4c>
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	691b      	ldr	r3, [r3, #16]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d105      	bne.n	80028c4 <HAL_UART_Transmit_IT+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	2201      	movs	r2, #1
 80028bc:	4013      	ands	r3, r2
 80028be:	d001      	beq.n	80028c4 <HAL_UART_Transmit_IT+0x4c>
      {
        return  HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e075      	b.n	80029b0 <HAL_UART_Transmit_IT+0x138>
      }
    }

    huart->pTxBuffPtr  = pData;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	68ba      	ldr	r2, [r7, #8]
 80028c8:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	1dba      	adds	r2, r7, #6
 80028ce:	2154      	movs	r1, #84	@ 0x54
 80028d0:	8812      	ldrh	r2, [r2, #0]
 80028d2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	1dba      	adds	r2, r7, #6
 80028d8:	2156      	movs	r1, #86	@ 0x56
 80028da:	8812      	ldrh	r2, [r2, #0]
 80028dc:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2200      	movs	r2, #0
 80028e2:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2290      	movs	r2, #144	@ 0x90
 80028e8:	2100      	movs	r1, #0
 80028ea:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2288      	movs	r2, #136	@ 0x88
 80028f0:	2121      	movs	r1, #33	@ 0x21
 80028f2:	5099      	str	r1, [r3, r2]

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80028f8:	2380      	movs	r3, #128	@ 0x80
 80028fa:	059b      	lsls	r3, r3, #22
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d12a      	bne.n	8002956 <HAL_UART_Transmit_IT+0xde>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	689a      	ldr	r2, [r3, #8]
 8002904:	2380      	movs	r3, #128	@ 0x80
 8002906:	015b      	lsls	r3, r3, #5
 8002908:	429a      	cmp	r2, r3
 800290a:	d107      	bne.n	800291c <HAL_UART_Transmit_IT+0xa4>
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	691b      	ldr	r3, [r3, #16]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d103      	bne.n	800291c <HAL_UART_Transmit_IT+0xa4>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	4a28      	ldr	r2, [pc, #160]	@ (80029b8 <HAL_UART_Transmit_IT+0x140>)
 8002918:	679a      	str	r2, [r3, #120]	@ 0x78
 800291a:	e002      	b.n	8002922 <HAL_UART_Transmit_IT+0xaa>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	4a27      	ldr	r2, [pc, #156]	@ (80029bc <HAL_UART_Transmit_IT+0x144>)
 8002920:	679a      	str	r2, [r3, #120]	@ 0x78
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002922:	f3ef 8310 	mrs	r3, PRIMASK
 8002926:	61fb      	str	r3, [r7, #28]
  return(result);
 8002928:	69fb      	ldr	r3, [r7, #28]
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800292a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800292c:	2301      	movs	r3, #1
 800292e:	623b      	str	r3, [r7, #32]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002930:	6a3b      	ldr	r3, [r7, #32]
 8002932:	f383 8810 	msr	PRIMASK, r3
}
 8002936:	46c0      	nop			@ (mov r8, r8)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	689a      	ldr	r2, [r3, #8]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	2180      	movs	r1, #128	@ 0x80
 8002944:	0409      	lsls	r1, r1, #16
 8002946:	430a      	orrs	r2, r1
 8002948:	609a      	str	r2, [r3, #8]
 800294a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800294c:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800294e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002950:	f383 8810 	msr	PRIMASK, r3
}
 8002954:	e029      	b.n	80029aa <HAL_UART_Transmit_IT+0x132>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	689a      	ldr	r2, [r3, #8]
 800295a:	2380      	movs	r3, #128	@ 0x80
 800295c:	015b      	lsls	r3, r3, #5
 800295e:	429a      	cmp	r2, r3
 8002960:	d107      	bne.n	8002972 <HAL_UART_Transmit_IT+0xfa>
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	691b      	ldr	r3, [r3, #16]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d103      	bne.n	8002972 <HAL_UART_Transmit_IT+0xfa>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	4a14      	ldr	r2, [pc, #80]	@ (80029c0 <HAL_UART_Transmit_IT+0x148>)
 800296e:	679a      	str	r2, [r3, #120]	@ 0x78
 8002970:	e002      	b.n	8002978 <HAL_UART_Transmit_IT+0x100>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	4a13      	ldr	r2, [pc, #76]	@ (80029c4 <HAL_UART_Transmit_IT+0x14c>)
 8002976:	679a      	str	r2, [r3, #120]	@ 0x78
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002978:	f3ef 8310 	mrs	r3, PRIMASK
 800297c:	613b      	str	r3, [r7, #16]
  return(result);
 800297e:	693b      	ldr	r3, [r7, #16]
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8002980:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002982:	2301      	movs	r3, #1
 8002984:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	f383 8810 	msr	PRIMASK, r3
}
 800298c:	46c0      	nop			@ (mov r8, r8)
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2180      	movs	r1, #128	@ 0x80
 800299a:	430a      	orrs	r2, r1
 800299c:	601a      	str	r2, [r3, #0]
 800299e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029a0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029a2:	69bb      	ldr	r3, [r7, #24]
 80029a4:	f383 8810 	msr	PRIMASK, r3
}
 80029a8:	46c0      	nop			@ (mov r8, r8)
    }

    return HAL_OK;
 80029aa:	2300      	movs	r3, #0
 80029ac:	e000      	b.n	80029b0 <HAL_UART_Transmit_IT+0x138>
  }
  else
  {
    return HAL_BUSY;
 80029ae:	2302      	movs	r3, #2
  }
}
 80029b0:	0018      	movs	r0, r3
 80029b2:	46bd      	mov	sp, r7
 80029b4:	b00c      	add	sp, #48	@ 0x30
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	080041c5 	.word	0x080041c5
 80029bc:	080040d9 	.word	0x080040d9
 80029c0:	08004019 	.word	0x08004019
 80029c4:	08003f65 	.word	0x08003f65

080029c8 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b098      	sub	sp, #96	@ 0x60
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt = 1U;
 80029d0:	2301      	movs	r3, #1
 80029d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80029d4:	f3ef 8310 	mrs	r3, PRIMASK
 80029d8:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80029da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

  /* Disable interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_TCIE | USART_CR1_RXNEIE_RXFNEIE |
 80029dc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80029de:	2301      	movs	r3, #1
 80029e0:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029e4:	f383 8810 	msr	PRIMASK, r3
}
 80029e8:	46c0      	nop			@ (mov r8, r8)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	498a      	ldr	r1, [pc, #552]	@ (8002c20 <HAL_UART_Abort_IT+0x258>)
 80029f6:	400a      	ands	r2, r1
 80029f8:	601a      	str	r2, [r3, #0]
 80029fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80029fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a00:	f383 8810 	msr	PRIMASK, r3
}
 8002a04:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002a06:	f3ef 8310 	mrs	r3, PRIMASK
 8002a0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8002a0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
                                          USART_CR1_TXEIE_TXFNFIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
 8002a0e:	657b      	str	r3, [r7, #84]	@ 0x54
 8002a10:	2301      	movs	r3, #1
 8002a12:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a16:	f383 8810 	msr	PRIMASK, r3
}
 8002a1a:	46c0      	nop			@ (mov r8, r8)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	689a      	ldr	r2, [r3, #8]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	497f      	ldr	r1, [pc, #508]	@ (8002c24 <HAL_UART_Abort_IT+0x25c>)
 8002a28:	400a      	ands	r2, r1
 8002a2a:	609a      	str	r2, [r3, #8]
 8002a2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a2e:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a32:	f383 8810 	msr	PRIMASK, r3
}
 8002a36:	46c0      	nop			@ (mov r8, r8)

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d118      	bne.n	8002a72 <HAL_UART_Abort_IT+0xaa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002a40:	f3ef 8310 	mrs	r3, PRIMASK
 8002a44:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8002a48:	653b      	str	r3, [r7, #80]	@ 0x50
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a50:	f383 8810 	msr	PRIMASK, r3
}
 8002a54:	46c0      	nop			@ (mov r8, r8)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2110      	movs	r1, #16
 8002a62:	438a      	bics	r2, r1
 8002a64:	601a      	str	r2, [r3, #0]
 8002a66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002a68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a6c:	f383 8810 	msr	PRIMASK, r3
}
 8002a70:	46c0      	nop			@ (mov r8, r8)

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d00f      	beq.n	8002a9a <HAL_UART_Abort_IT+0xd2>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	2280      	movs	r2, #128	@ 0x80
 8002a82:	4013      	ands	r3, r2
 8002a84:	2b80      	cmp	r3, #128	@ 0x80
 8002a86:	d104      	bne.n	8002a92 <HAL_UART_Abort_IT+0xca>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002a8c:	4a66      	ldr	r2, [pc, #408]	@ (8002c28 <HAL_UART_Abort_IT+0x260>)
 8002a8e:	639a      	str	r2, [r3, #56]	@ 0x38
 8002a90:	e003      	b.n	8002a9a <HAL_UART_Abort_IT+0xd2>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002a96:	2200      	movs	r2, #0
 8002a98:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2280      	movs	r2, #128	@ 0x80
 8002a9e:	589b      	ldr	r3, [r3, r2]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d011      	beq.n	8002ac8 <HAL_UART_Abort_IT+0x100>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	2240      	movs	r2, #64	@ 0x40
 8002aac:	4013      	ands	r3, r2
 8002aae:	2b40      	cmp	r3, #64	@ 0x40
 8002ab0:	d105      	bne.n	8002abe <HAL_UART_Abort_IT+0xf6>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2280      	movs	r2, #128	@ 0x80
 8002ab6:	589b      	ldr	r3, [r3, r2]
 8002ab8:	4a5c      	ldr	r2, [pc, #368]	@ (8002c2c <HAL_UART_Abort_IT+0x264>)
 8002aba:	639a      	str	r2, [r3, #56]	@ 0x38
 8002abc:	e004      	b.n	8002ac8 <HAL_UART_Abort_IT+0x100>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2280      	movs	r2, #128	@ 0x80
 8002ac2:	589b      	ldr	r3, [r3, r2]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	2280      	movs	r2, #128	@ 0x80
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	2b80      	cmp	r3, #128	@ 0x80
 8002ad4:	d12a      	bne.n	8002b2c <HAL_UART_Abort_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002ad6:	f3ef 8310 	mrs	r3, PRIMASK
 8002ada:	61bb      	str	r3, [r7, #24]
  return(result);
 8002adc:	69bb      	ldr	r3, [r7, #24]
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002ade:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	f383 8810 	msr	PRIMASK, r3
}
 8002aea:	46c0      	nop			@ (mov r8, r8)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	689a      	ldr	r2, [r3, #8]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	2180      	movs	r1, #128	@ 0x80
 8002af8:	438a      	bics	r2, r1
 8002afa:	609a      	str	r2, [r3, #8]
 8002afc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002afe:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b00:	6a3b      	ldr	r3, [r7, #32]
 8002b02:	f383 8810 	msr	PRIMASK, r3
}
 8002b06:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d00d      	beq.n	8002b2c <HAL_UART_Abort_IT+0x164>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002b14:	0018      	movs	r0, r3
 8002b16:	f7fe feb9 	bl	800188c <HAL_DMA_Abort_IT>
 8002b1a:	1e03      	subs	r3, r0, #0
 8002b1c:	d004      	beq.n	8002b28 <HAL_UART_Abort_IT+0x160>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002b22:	2200      	movs	r2, #0
 8002b24:	639a      	str	r2, [r3, #56]	@ 0x38
 8002b26:	e001      	b.n	8002b2c <HAL_UART_Abort_IT+0x164>
      }
      else
      {
        abortcplt = 0U;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	65fb      	str	r3, [r7, #92]	@ 0x5c
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	2240      	movs	r2, #64	@ 0x40
 8002b34:	4013      	ands	r3, r2
 8002b36:	2b40      	cmp	r3, #64	@ 0x40
 8002b38:	d12f      	bne.n	8002b9a <HAL_UART_Abort_IT+0x1d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002b3a:	f3ef 8310 	mrs	r3, PRIMASK
 8002b3e:	60fb      	str	r3, [r7, #12]
  return(result);
 8002b40:	68fb      	ldr	r3, [r7, #12]
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b42:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002b44:	2301      	movs	r3, #1
 8002b46:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	f383 8810 	msr	PRIMASK, r3
}
 8002b4e:	46c0      	nop			@ (mov r8, r8)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	689a      	ldr	r2, [r3, #8]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2140      	movs	r1, #64	@ 0x40
 8002b5c:	438a      	bics	r2, r1
 8002b5e:	609a      	str	r2, [r3, #8]
 8002b60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b62:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	f383 8810 	msr	PRIMASK, r3
}
 8002b6a:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2280      	movs	r2, #128	@ 0x80
 8002b70:	589b      	ldr	r3, [r3, r2]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d011      	beq.n	8002b9a <HAL_UART_Abort_IT+0x1d2>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2280      	movs	r2, #128	@ 0x80
 8002b7a:	589b      	ldr	r3, [r3, r2]
 8002b7c:	0018      	movs	r0, r3
 8002b7e:	f7fe fe85 	bl	800188c <HAL_DMA_Abort_IT>
 8002b82:	1e03      	subs	r3, r0, #0
 8002b84:	d007      	beq.n	8002b96 <HAL_UART_Abort_IT+0x1ce>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2280      	movs	r2, #128	@ 0x80
 8002b8a:	589b      	ldr	r3, [r3, r2]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	639a      	str	r2, [r3, #56]	@ 0x38
        abortcplt = 1U;
 8002b90:	2301      	movs	r3, #1
 8002b92:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002b94:	e001      	b.n	8002b9a <HAL_UART_Abort_IT+0x1d2>
      }
      else
      {
        abortcplt = 0U;
 8002b96:	2300      	movs	r3, #0
 8002b98:	65fb      	str	r3, [r7, #92]	@ 0x5c
    }
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (abortcplt == 1U)
 8002b9a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d13a      	bne.n	8002c16 <HAL_UART_Abort_IT+0x24e>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0U;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2256      	movs	r2, #86	@ 0x56
 8002ba4:	2100      	movs	r1, #0
 8002ba6:	5299      	strh	r1, [r3, r2]
    huart->RxXferCount = 0U;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	225e      	movs	r2, #94	@ 0x5e
 8002bac:	2100      	movs	r1, #0
 8002bae:	5299      	strh	r1, [r3, r2]

    /* Clear ISR function pointers */
    huart->RxISR = NULL;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	675a      	str	r2, [r3, #116]	@ 0x74
    huart->TxISR = NULL;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Reset errorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2290      	movs	r2, #144	@ 0x90
 8002bc0:	2100      	movs	r1, #0
 8002bc2:	5099      	str	r1, [r3, r2]

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	220f      	movs	r2, #15
 8002bca:	621a      	str	r2, [r3, #32]

    /* Flush the whole TX FIFO (if needed) */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002bd0:	2380      	movs	r3, #128	@ 0x80
 8002bd2:	059b      	lsls	r3, r3, #22
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d107      	bne.n	8002be8 <HAL_UART_Abort_IT+0x220>
    {
      __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	699a      	ldr	r2, [r3, #24]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2110      	movs	r1, #16
 8002be4:	430a      	orrs	r2, r1
 8002be6:	619a      	str	r2, [r3, #24]
    }

    /* Discard the received data */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	699a      	ldr	r2, [r3, #24]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2108      	movs	r1, #8
 8002bf4:	430a      	orrs	r2, r1
 8002bf6:	619a      	str	r2, [r3, #24]

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2288      	movs	r2, #136	@ 0x88
 8002bfc:	2120      	movs	r1, #32
 8002bfe:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_READY;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	228c      	movs	r2, #140	@ 0x8c
 8002c04:	2120      	movs	r1, #32
 8002c06:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	0018      	movs	r0, r3
 8002c12:	f000 fb6b 	bl	80032ec <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8002c16:	2300      	movs	r3, #0
}
 8002c18:	0018      	movs	r0, r3
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	b018      	add	sp, #96	@ 0x60
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	fffffe1f 	.word	0xfffffe1f
 8002c24:	ef7ffffe 	.word	0xef7ffffe
 8002c28:	08003e53 	.word	0x08003e53
 8002c2c:	08003ee3 	.word	0x08003ee3

08002c30 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002c30:	b5b0      	push	{r4, r5, r7, lr}
 8002c32:	b0aa      	sub	sp, #168	@ 0xa8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	69db      	ldr	r3, [r3, #28]
 8002c3e:	22a4      	movs	r2, #164	@ 0xa4
 8002c40:	18b9      	adds	r1, r7, r2
 8002c42:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	20a0      	movs	r0, #160	@ 0xa0
 8002c4c:	1839      	adds	r1, r7, r0
 8002c4e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	249c      	movs	r4, #156	@ 0x9c
 8002c58:	1939      	adds	r1, r7, r4
 8002c5a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002c5c:	0011      	movs	r1, r2
 8002c5e:	18bb      	adds	r3, r7, r2
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4aa2      	ldr	r2, [pc, #648]	@ (8002eec <HAL_UART_IRQHandler+0x2bc>)
 8002c64:	4013      	ands	r3, r2
 8002c66:	2298      	movs	r2, #152	@ 0x98
 8002c68:	18bd      	adds	r5, r7, r2
 8002c6a:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8002c6c:	18bb      	adds	r3, r7, r2
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d11a      	bne.n	8002caa <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002c74:	187b      	adds	r3, r7, r1
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	2220      	movs	r2, #32
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	d015      	beq.n	8002caa <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002c7e:	183b      	adds	r3, r7, r0
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	2220      	movs	r2, #32
 8002c84:	4013      	ands	r3, r2
 8002c86:	d105      	bne.n	8002c94 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002c88:	193b      	adds	r3, r7, r4
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	2380      	movs	r3, #128	@ 0x80
 8002c8e:	055b      	lsls	r3, r3, #21
 8002c90:	4013      	ands	r3, r2
 8002c92:	d00a      	beq.n	8002caa <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d100      	bne.n	8002c9e <HAL_UART_IRQHandler+0x6e>
 8002c9c:	e2fb      	b.n	8003296 <HAL_UART_IRQHandler+0x666>
      {
        huart->RxISR(huart);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	0010      	movs	r0, r2
 8002ca6:	4798      	blx	r3
      }
      return;
 8002ca8:	e2f5      	b.n	8003296 <HAL_UART_IRQHandler+0x666>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002caa:	2398      	movs	r3, #152	@ 0x98
 8002cac:	18fb      	adds	r3, r7, r3
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d100      	bne.n	8002cb6 <HAL_UART_IRQHandler+0x86>
 8002cb4:	e122      	b.n	8002efc <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002cb6:	239c      	movs	r3, #156	@ 0x9c
 8002cb8:	18fb      	adds	r3, r7, r3
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a8c      	ldr	r2, [pc, #560]	@ (8002ef0 <HAL_UART_IRQHandler+0x2c0>)
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	d106      	bne.n	8002cd0 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002cc2:	23a0      	movs	r3, #160	@ 0xa0
 8002cc4:	18fb      	adds	r3, r7, r3
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a8a      	ldr	r2, [pc, #552]	@ (8002ef4 <HAL_UART_IRQHandler+0x2c4>)
 8002cca:	4013      	ands	r3, r2
 8002ccc:	d100      	bne.n	8002cd0 <HAL_UART_IRQHandler+0xa0>
 8002cce:	e115      	b.n	8002efc <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002cd0:	23a4      	movs	r3, #164	@ 0xa4
 8002cd2:	18fb      	adds	r3, r7, r3
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	4013      	ands	r3, r2
 8002cda:	d012      	beq.n	8002d02 <HAL_UART_IRQHandler+0xd2>
 8002cdc:	23a0      	movs	r3, #160	@ 0xa0
 8002cde:	18fb      	adds	r3, r7, r3
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	2380      	movs	r3, #128	@ 0x80
 8002ce4:	005b      	lsls	r3, r3, #1
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	d00b      	beq.n	8002d02 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2290      	movs	r2, #144	@ 0x90
 8002cf6:	589b      	ldr	r3, [r3, r2]
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	431a      	orrs	r2, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2190      	movs	r1, #144	@ 0x90
 8002d00:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002d02:	23a4      	movs	r3, #164	@ 0xa4
 8002d04:	18fb      	adds	r3, r7, r3
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	2202      	movs	r2, #2
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	d011      	beq.n	8002d32 <HAL_UART_IRQHandler+0x102>
 8002d0e:	239c      	movs	r3, #156	@ 0x9c
 8002d10:	18fb      	adds	r3, r7, r3
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2201      	movs	r2, #1
 8002d16:	4013      	ands	r3, r2
 8002d18:	d00b      	beq.n	8002d32 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2202      	movs	r2, #2
 8002d20:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2290      	movs	r2, #144	@ 0x90
 8002d26:	589b      	ldr	r3, [r3, r2]
 8002d28:	2204      	movs	r2, #4
 8002d2a:	431a      	orrs	r2, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2190      	movs	r1, #144	@ 0x90
 8002d30:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002d32:	23a4      	movs	r3, #164	@ 0xa4
 8002d34:	18fb      	adds	r3, r7, r3
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2204      	movs	r2, #4
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	d011      	beq.n	8002d62 <HAL_UART_IRQHandler+0x132>
 8002d3e:	239c      	movs	r3, #156	@ 0x9c
 8002d40:	18fb      	adds	r3, r7, r3
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2201      	movs	r2, #1
 8002d46:	4013      	ands	r3, r2
 8002d48:	d00b      	beq.n	8002d62 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	2204      	movs	r2, #4
 8002d50:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2290      	movs	r2, #144	@ 0x90
 8002d56:	589b      	ldr	r3, [r3, r2]
 8002d58:	2202      	movs	r2, #2
 8002d5a:	431a      	orrs	r2, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2190      	movs	r1, #144	@ 0x90
 8002d60:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002d62:	23a4      	movs	r3, #164	@ 0xa4
 8002d64:	18fb      	adds	r3, r7, r3
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2208      	movs	r2, #8
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	d017      	beq.n	8002d9e <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002d6e:	23a0      	movs	r3, #160	@ 0xa0
 8002d70:	18fb      	adds	r3, r7, r3
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2220      	movs	r2, #32
 8002d76:	4013      	ands	r3, r2
 8002d78:	d105      	bne.n	8002d86 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002d7a:	239c      	movs	r3, #156	@ 0x9c
 8002d7c:	18fb      	adds	r3, r7, r3
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a5b      	ldr	r2, [pc, #364]	@ (8002ef0 <HAL_UART_IRQHandler+0x2c0>)
 8002d82:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002d84:	d00b      	beq.n	8002d9e <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2208      	movs	r2, #8
 8002d8c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2290      	movs	r2, #144	@ 0x90
 8002d92:	589b      	ldr	r3, [r3, r2]
 8002d94:	2208      	movs	r2, #8
 8002d96:	431a      	orrs	r2, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2190      	movs	r1, #144	@ 0x90
 8002d9c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002d9e:	23a4      	movs	r3, #164	@ 0xa4
 8002da0:	18fb      	adds	r3, r7, r3
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	2380      	movs	r3, #128	@ 0x80
 8002da6:	011b      	lsls	r3, r3, #4
 8002da8:	4013      	ands	r3, r2
 8002daa:	d013      	beq.n	8002dd4 <HAL_UART_IRQHandler+0x1a4>
 8002dac:	23a0      	movs	r3, #160	@ 0xa0
 8002dae:	18fb      	adds	r3, r7, r3
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	2380      	movs	r3, #128	@ 0x80
 8002db4:	04db      	lsls	r3, r3, #19
 8002db6:	4013      	ands	r3, r2
 8002db8:	d00c      	beq.n	8002dd4 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	2280      	movs	r2, #128	@ 0x80
 8002dc0:	0112      	lsls	r2, r2, #4
 8002dc2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2290      	movs	r2, #144	@ 0x90
 8002dc8:	589b      	ldr	r3, [r3, r2]
 8002dca:	2220      	movs	r2, #32
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2190      	movs	r1, #144	@ 0x90
 8002dd2:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2290      	movs	r2, #144	@ 0x90
 8002dd8:	589b      	ldr	r3, [r3, r2]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d100      	bne.n	8002de0 <HAL_UART_IRQHandler+0x1b0>
 8002dde:	e25c      	b.n	800329a <HAL_UART_IRQHandler+0x66a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002de0:	23a4      	movs	r3, #164	@ 0xa4
 8002de2:	18fb      	adds	r3, r7, r3
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	2220      	movs	r2, #32
 8002de8:	4013      	ands	r3, r2
 8002dea:	d015      	beq.n	8002e18 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002dec:	23a0      	movs	r3, #160	@ 0xa0
 8002dee:	18fb      	adds	r3, r7, r3
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	2220      	movs	r2, #32
 8002df4:	4013      	ands	r3, r2
 8002df6:	d106      	bne.n	8002e06 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002df8:	239c      	movs	r3, #156	@ 0x9c
 8002dfa:	18fb      	adds	r3, r7, r3
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	2380      	movs	r3, #128	@ 0x80
 8002e00:	055b      	lsls	r3, r3, #21
 8002e02:	4013      	ands	r3, r2
 8002e04:	d008      	beq.n	8002e18 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d004      	beq.n	8002e18 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	0010      	movs	r0, r2
 8002e16:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2290      	movs	r2, #144	@ 0x90
 8002e1c:	589b      	ldr	r3, [r3, r2]
 8002e1e:	2194      	movs	r1, #148	@ 0x94
 8002e20:	187a      	adds	r2, r7, r1
 8002e22:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	2240      	movs	r2, #64	@ 0x40
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	2b40      	cmp	r3, #64	@ 0x40
 8002e30:	d004      	beq.n	8002e3c <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002e32:	187b      	adds	r3, r7, r1
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	2228      	movs	r2, #40	@ 0x28
 8002e38:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002e3a:	d04c      	beq.n	8002ed6 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	0018      	movs	r0, r3
 8002e40:	f000 fe8e 	bl	8003b60 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	2240      	movs	r2, #64	@ 0x40
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	2b40      	cmp	r3, #64	@ 0x40
 8002e50:	d13c      	bne.n	8002ecc <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002e52:	f3ef 8310 	mrs	r3, PRIMASK
 8002e56:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8002e58:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e5a:	2090      	movs	r0, #144	@ 0x90
 8002e5c:	183a      	adds	r2, r7, r0
 8002e5e:	6013      	str	r3, [r2, #0]
 8002e60:	2301      	movs	r3, #1
 8002e62:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e64:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002e66:	f383 8810 	msr	PRIMASK, r3
}
 8002e6a:	46c0      	nop			@ (mov r8, r8)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	689a      	ldr	r2, [r3, #8]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	2140      	movs	r1, #64	@ 0x40
 8002e78:	438a      	bics	r2, r1
 8002e7a:	609a      	str	r2, [r3, #8]
 8002e7c:	183b      	adds	r3, r7, r0
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e82:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002e84:	f383 8810 	msr	PRIMASK, r3
}
 8002e88:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2280      	movs	r2, #128	@ 0x80
 8002e8e:	589b      	ldr	r3, [r3, r2]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d016      	beq.n	8002ec2 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2280      	movs	r2, #128	@ 0x80
 8002e98:	589b      	ldr	r3, [r3, r2]
 8002e9a:	4a17      	ldr	r2, [pc, #92]	@ (8002ef8 <HAL_UART_IRQHandler+0x2c8>)
 8002e9c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2280      	movs	r2, #128	@ 0x80
 8002ea2:	589b      	ldr	r3, [r3, r2]
 8002ea4:	0018      	movs	r0, r3
 8002ea6:	f7fe fcf1 	bl	800188c <HAL_DMA_Abort_IT>
 8002eaa:	1e03      	subs	r3, r0, #0
 8002eac:	d01c      	beq.n	8002ee8 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2280      	movs	r2, #128	@ 0x80
 8002eb2:	589b      	ldr	r3, [r3, r2]
 8002eb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	2180      	movs	r1, #128	@ 0x80
 8002eba:	5852      	ldr	r2, [r2, r1]
 8002ebc:	0010      	movs	r0, r2
 8002ebe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ec0:	e012      	b.n	8002ee8 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	0018      	movs	r0, r3
 8002ec6:	f000 fa09 	bl	80032dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002eca:	e00d      	b.n	8002ee8 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	0018      	movs	r0, r3
 8002ed0:	f000 fa04 	bl	80032dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ed4:	e008      	b.n	8002ee8 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	0018      	movs	r0, r3
 8002eda:	f000 f9ff 	bl	80032dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2290      	movs	r2, #144	@ 0x90
 8002ee2:	2100      	movs	r1, #0
 8002ee4:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002ee6:	e1d8      	b.n	800329a <HAL_UART_IRQHandler+0x66a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ee8:	46c0      	nop			@ (mov r8, r8)
    return;
 8002eea:	e1d6      	b.n	800329a <HAL_UART_IRQHandler+0x66a>
 8002eec:	0000080f 	.word	0x0000080f
 8002ef0:	10000001 	.word	0x10000001
 8002ef4:	04000120 	.word	0x04000120
 8002ef8:	08003e25 	.word	0x08003e25

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d000      	beq.n	8002f06 <HAL_UART_IRQHandler+0x2d6>
 8002f04:	e15d      	b.n	80031c2 <HAL_UART_IRQHandler+0x592>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002f06:	23a4      	movs	r3, #164	@ 0xa4
 8002f08:	18fb      	adds	r3, r7, r3
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2210      	movs	r2, #16
 8002f0e:	4013      	ands	r3, r2
 8002f10:	d100      	bne.n	8002f14 <HAL_UART_IRQHandler+0x2e4>
 8002f12:	e156      	b.n	80031c2 <HAL_UART_IRQHandler+0x592>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002f14:	23a0      	movs	r3, #160	@ 0xa0
 8002f16:	18fb      	adds	r3, r7, r3
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	2210      	movs	r2, #16
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	d100      	bne.n	8002f22 <HAL_UART_IRQHandler+0x2f2>
 8002f20:	e14f      	b.n	80031c2 <HAL_UART_IRQHandler+0x592>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	2210      	movs	r2, #16
 8002f28:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	2240      	movs	r2, #64	@ 0x40
 8002f32:	4013      	ands	r3, r2
 8002f34:	2b40      	cmp	r3, #64	@ 0x40
 8002f36:	d000      	beq.n	8002f3a <HAL_UART_IRQHandler+0x30a>
 8002f38:	e0c3      	b.n	80030c2 <HAL_UART_IRQHandler+0x492>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2280      	movs	r2, #128	@ 0x80
 8002f3e:	589b      	ldr	r3, [r3, r2]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	685a      	ldr	r2, [r3, #4]
 8002f44:	217e      	movs	r1, #126	@ 0x7e
 8002f46:	187b      	adds	r3, r7, r1
 8002f48:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002f4a:	187b      	adds	r3, r7, r1
 8002f4c:	881b      	ldrh	r3, [r3, #0]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d100      	bne.n	8002f54 <HAL_UART_IRQHandler+0x324>
 8002f52:	e097      	b.n	8003084 <HAL_UART_IRQHandler+0x454>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	225c      	movs	r2, #92	@ 0x5c
 8002f58:	5a9b      	ldrh	r3, [r3, r2]
 8002f5a:	187a      	adds	r2, r7, r1
 8002f5c:	8812      	ldrh	r2, [r2, #0]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d300      	bcc.n	8002f64 <HAL_UART_IRQHandler+0x334>
 8002f62:	e08f      	b.n	8003084 <HAL_UART_IRQHandler+0x454>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	187a      	adds	r2, r7, r1
 8002f68:	215e      	movs	r1, #94	@ 0x5e
 8002f6a:	8812      	ldrh	r2, [r2, #0]
 8002f6c:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2280      	movs	r2, #128	@ 0x80
 8002f72:	589b      	ldr	r3, [r3, r2]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2220      	movs	r2, #32
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	d170      	bne.n	8003060 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002f7e:	f3ef 8310 	mrs	r3, PRIMASK
 8002f82:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8002f84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f86:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002f88:	2301      	movs	r3, #1
 8002f8a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f8e:	f383 8810 	msr	PRIMASK, r3
}
 8002f92:	46c0      	nop			@ (mov r8, r8)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	49c4      	ldr	r1, [pc, #784]	@ (80032b0 <HAL_UART_IRQHandler+0x680>)
 8002fa0:	400a      	ands	r2, r1
 8002fa2:	601a      	str	r2, [r3, #0]
 8002fa4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002fa6:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002faa:	f383 8810 	msr	PRIMASK, r3
}
 8002fae:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002fb0:	f3ef 8310 	mrs	r3, PRIMASK
 8002fb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8002fb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fb8:	677b      	str	r3, [r7, #116]	@ 0x74
 8002fba:	2301      	movs	r3, #1
 8002fbc:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002fc0:	f383 8810 	msr	PRIMASK, r3
}
 8002fc4:	46c0      	nop			@ (mov r8, r8)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	689a      	ldr	r2, [r3, #8]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2101      	movs	r1, #1
 8002fd2:	438a      	bics	r2, r1
 8002fd4:	609a      	str	r2, [r3, #8]
 8002fd6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002fd8:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002fdc:	f383 8810 	msr	PRIMASK, r3
}
 8002fe0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002fe2:	f3ef 8310 	mrs	r3, PRIMASK
 8002fe6:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8002fe8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002fea:	673b      	str	r3, [r7, #112]	@ 0x70
 8002fec:	2301      	movs	r3, #1
 8002fee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ff0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002ff2:	f383 8810 	msr	PRIMASK, r3
}
 8002ff6:	46c0      	nop			@ (mov r8, r8)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	689a      	ldr	r2, [r3, #8]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	2140      	movs	r1, #64	@ 0x40
 8003004:	438a      	bics	r2, r1
 8003006:	609a      	str	r2, [r3, #8]
 8003008:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800300a:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800300c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800300e:	f383 8810 	msr	PRIMASK, r3
}
 8003012:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	228c      	movs	r2, #140	@ 0x8c
 8003018:	2120      	movs	r1, #32
 800301a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003022:	f3ef 8310 	mrs	r3, PRIMASK
 8003026:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8003028:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800302a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800302c:	2301      	movs	r3, #1
 800302e:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003030:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003032:	f383 8810 	msr	PRIMASK, r3
}
 8003036:	46c0      	nop			@ (mov r8, r8)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2110      	movs	r1, #16
 8003044:	438a      	bics	r2, r1
 8003046:	601a      	str	r2, [r3, #0]
 8003048:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800304a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800304c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800304e:	f383 8810 	msr	PRIMASK, r3
}
 8003052:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2280      	movs	r2, #128	@ 0x80
 8003058:	589b      	ldr	r3, [r3, r2]
 800305a:	0018      	movs	r0, r3
 800305c:	f7fe fbb4 	bl	80017c8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2202      	movs	r2, #2
 8003064:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	225c      	movs	r2, #92	@ 0x5c
 800306a:	5a9a      	ldrh	r2, [r3, r2]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	215e      	movs	r1, #94	@ 0x5e
 8003070:	5a5b      	ldrh	r3, [r3, r1]
 8003072:	b29b      	uxth	r3, r3
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	b29a      	uxth	r2, r3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	0011      	movs	r1, r2
 800307c:	0018      	movs	r0, r3
 800307e:	f7fd fb15 	bl	80006ac <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003082:	e10c      	b.n	800329e <HAL_UART_IRQHandler+0x66e>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	225c      	movs	r2, #92	@ 0x5c
 8003088:	5a9b      	ldrh	r3, [r3, r2]
 800308a:	227e      	movs	r2, #126	@ 0x7e
 800308c:	18ba      	adds	r2, r7, r2
 800308e:	8812      	ldrh	r2, [r2, #0]
 8003090:	429a      	cmp	r2, r3
 8003092:	d000      	beq.n	8003096 <HAL_UART_IRQHandler+0x466>
 8003094:	e103      	b.n	800329e <HAL_UART_IRQHandler+0x66e>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2280      	movs	r2, #128	@ 0x80
 800309a:	589b      	ldr	r3, [r3, r2]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2220      	movs	r2, #32
 80030a2:	4013      	ands	r3, r2
 80030a4:	2b20      	cmp	r3, #32
 80030a6:	d000      	beq.n	80030aa <HAL_UART_IRQHandler+0x47a>
 80030a8:	e0f9      	b.n	800329e <HAL_UART_IRQHandler+0x66e>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2202      	movs	r2, #2
 80030ae:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	225c      	movs	r2, #92	@ 0x5c
 80030b4:	5a9a      	ldrh	r2, [r3, r2]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	0011      	movs	r1, r2
 80030ba:	0018      	movs	r0, r3
 80030bc:	f7fd faf6 	bl	80006ac <HAL_UARTEx_RxEventCallback>
      return;
 80030c0:	e0ed      	b.n	800329e <HAL_UART_IRQHandler+0x66e>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	225c      	movs	r2, #92	@ 0x5c
 80030c6:	5a99      	ldrh	r1, [r3, r2]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	225e      	movs	r2, #94	@ 0x5e
 80030cc:	5a9b      	ldrh	r3, [r3, r2]
 80030ce:	b29a      	uxth	r2, r3
 80030d0:	208e      	movs	r0, #142	@ 0x8e
 80030d2:	183b      	adds	r3, r7, r0
 80030d4:	1a8a      	subs	r2, r1, r2
 80030d6:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	225e      	movs	r2, #94	@ 0x5e
 80030dc:	5a9b      	ldrh	r3, [r3, r2]
 80030de:	b29b      	uxth	r3, r3
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d100      	bne.n	80030e6 <HAL_UART_IRQHandler+0x4b6>
 80030e4:	e0dd      	b.n	80032a2 <HAL_UART_IRQHandler+0x672>
          && (nb_rx_data > 0U))
 80030e6:	183b      	adds	r3, r7, r0
 80030e8:	881b      	ldrh	r3, [r3, #0]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d100      	bne.n	80030f0 <HAL_UART_IRQHandler+0x4c0>
 80030ee:	e0d8      	b.n	80032a2 <HAL_UART_IRQHandler+0x672>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80030f0:	f3ef 8310 	mrs	r3, PRIMASK
 80030f4:	60fb      	str	r3, [r7, #12]
  return(result);
 80030f6:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80030f8:	2488      	movs	r4, #136	@ 0x88
 80030fa:	193a      	adds	r2, r7, r4
 80030fc:	6013      	str	r3, [r2, #0]
 80030fe:	2301      	movs	r3, #1
 8003100:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	f383 8810 	msr	PRIMASK, r3
}
 8003108:	46c0      	nop			@ (mov r8, r8)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4967      	ldr	r1, [pc, #412]	@ (80032b4 <HAL_UART_IRQHandler+0x684>)
 8003116:	400a      	ands	r2, r1
 8003118:	601a      	str	r2, [r3, #0]
 800311a:	193b      	adds	r3, r7, r4
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	f383 8810 	msr	PRIMASK, r3
}
 8003126:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003128:	f3ef 8310 	mrs	r3, PRIMASK
 800312c:	61bb      	str	r3, [r7, #24]
  return(result);
 800312e:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003130:	2484      	movs	r4, #132	@ 0x84
 8003132:	193a      	adds	r2, r7, r4
 8003134:	6013      	str	r3, [r2, #0]
 8003136:	2301      	movs	r3, #1
 8003138:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	f383 8810 	msr	PRIMASK, r3
}
 8003140:	46c0      	nop			@ (mov r8, r8)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	689a      	ldr	r2, [r3, #8]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	495a      	ldr	r1, [pc, #360]	@ (80032b8 <HAL_UART_IRQHandler+0x688>)
 800314e:	400a      	ands	r2, r1
 8003150:	609a      	str	r2, [r3, #8]
 8003152:	193b      	adds	r3, r7, r4
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003158:	6a3b      	ldr	r3, [r7, #32]
 800315a:	f383 8810 	msr	PRIMASK, r3
}
 800315e:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	228c      	movs	r2, #140	@ 0x8c
 8003164:	2120      	movs	r1, #32
 8003166:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003174:	f3ef 8310 	mrs	r3, PRIMASK
 8003178:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800317a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800317c:	2480      	movs	r4, #128	@ 0x80
 800317e:	193a      	adds	r2, r7, r4
 8003180:	6013      	str	r3, [r2, #0]
 8003182:	2301      	movs	r3, #1
 8003184:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003186:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003188:	f383 8810 	msr	PRIMASK, r3
}
 800318c:	46c0      	nop			@ (mov r8, r8)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2110      	movs	r1, #16
 800319a:	438a      	bics	r2, r1
 800319c:	601a      	str	r2, [r3, #0]
 800319e:	193b      	adds	r3, r7, r4
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031a6:	f383 8810 	msr	PRIMASK, r3
}
 80031aa:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2202      	movs	r2, #2
 80031b0:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80031b2:	183b      	adds	r3, r7, r0
 80031b4:	881a      	ldrh	r2, [r3, #0]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	0011      	movs	r1, r2
 80031ba:	0018      	movs	r0, r3
 80031bc:	f7fd fa76 	bl	80006ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80031c0:	e06f      	b.n	80032a2 <HAL_UART_IRQHandler+0x672>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80031c2:	23a4      	movs	r3, #164	@ 0xa4
 80031c4:	18fb      	adds	r3, r7, r3
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	2380      	movs	r3, #128	@ 0x80
 80031ca:	035b      	lsls	r3, r3, #13
 80031cc:	4013      	ands	r3, r2
 80031ce:	d010      	beq.n	80031f2 <HAL_UART_IRQHandler+0x5c2>
 80031d0:	239c      	movs	r3, #156	@ 0x9c
 80031d2:	18fb      	adds	r3, r7, r3
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	2380      	movs	r3, #128	@ 0x80
 80031d8:	03db      	lsls	r3, r3, #15
 80031da:	4013      	ands	r3, r2
 80031dc:	d009      	beq.n	80031f2 <HAL_UART_IRQHandler+0x5c2>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2280      	movs	r2, #128	@ 0x80
 80031e4:	0352      	lsls	r2, r2, #13
 80031e6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	0018      	movs	r0, r3
 80031ec:	f001 f902 	bl	80043f4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80031f0:	e05a      	b.n	80032a8 <HAL_UART_IRQHandler+0x678>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80031f2:	23a4      	movs	r3, #164	@ 0xa4
 80031f4:	18fb      	adds	r3, r7, r3
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2280      	movs	r2, #128	@ 0x80
 80031fa:	4013      	ands	r3, r2
 80031fc:	d016      	beq.n	800322c <HAL_UART_IRQHandler+0x5fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80031fe:	23a0      	movs	r3, #160	@ 0xa0
 8003200:	18fb      	adds	r3, r7, r3
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2280      	movs	r2, #128	@ 0x80
 8003206:	4013      	ands	r3, r2
 8003208:	d106      	bne.n	8003218 <HAL_UART_IRQHandler+0x5e8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800320a:	239c      	movs	r3, #156	@ 0x9c
 800320c:	18fb      	adds	r3, r7, r3
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	2380      	movs	r3, #128	@ 0x80
 8003212:	041b      	lsls	r3, r3, #16
 8003214:	4013      	ands	r3, r2
 8003216:	d009      	beq.n	800322c <HAL_UART_IRQHandler+0x5fc>
  {
    if (huart->TxISR != NULL)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800321c:	2b00      	cmp	r3, #0
 800321e:	d042      	beq.n	80032a6 <HAL_UART_IRQHandler+0x676>
    {
      huart->TxISR(huart);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	0010      	movs	r0, r2
 8003228:	4798      	blx	r3
    }
    return;
 800322a:	e03c      	b.n	80032a6 <HAL_UART_IRQHandler+0x676>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800322c:	23a4      	movs	r3, #164	@ 0xa4
 800322e:	18fb      	adds	r3, r7, r3
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2240      	movs	r2, #64	@ 0x40
 8003234:	4013      	ands	r3, r2
 8003236:	d00a      	beq.n	800324e <HAL_UART_IRQHandler+0x61e>
 8003238:	23a0      	movs	r3, #160	@ 0xa0
 800323a:	18fb      	adds	r3, r7, r3
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	2240      	movs	r2, #64	@ 0x40
 8003240:	4013      	ands	r3, r2
 8003242:	d004      	beq.n	800324e <HAL_UART_IRQHandler+0x61e>
  {
    UART_EndTransmit_IT(huart);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	0018      	movs	r0, r3
 8003248:	f001 f836 	bl	80042b8 <UART_EndTransmit_IT>
    return;
 800324c:	e02c      	b.n	80032a8 <HAL_UART_IRQHandler+0x678>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800324e:	23a4      	movs	r3, #164	@ 0xa4
 8003250:	18fb      	adds	r3, r7, r3
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	2380      	movs	r3, #128	@ 0x80
 8003256:	041b      	lsls	r3, r3, #16
 8003258:	4013      	ands	r3, r2
 800325a:	d00b      	beq.n	8003274 <HAL_UART_IRQHandler+0x644>
 800325c:	23a0      	movs	r3, #160	@ 0xa0
 800325e:	18fb      	adds	r3, r7, r3
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	2380      	movs	r3, #128	@ 0x80
 8003264:	05db      	lsls	r3, r3, #23
 8003266:	4013      	ands	r3, r2
 8003268:	d004      	beq.n	8003274 <HAL_UART_IRQHandler+0x644>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	0018      	movs	r0, r3
 800326e:	f001 f8d1 	bl	8004414 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003272:	e019      	b.n	80032a8 <HAL_UART_IRQHandler+0x678>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003274:	23a4      	movs	r3, #164	@ 0xa4
 8003276:	18fb      	adds	r3, r7, r3
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	2380      	movs	r3, #128	@ 0x80
 800327c:	045b      	lsls	r3, r3, #17
 800327e:	4013      	ands	r3, r2
 8003280:	d012      	beq.n	80032a8 <HAL_UART_IRQHandler+0x678>
 8003282:	23a0      	movs	r3, #160	@ 0xa0
 8003284:	18fb      	adds	r3, r7, r3
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2b00      	cmp	r3, #0
 800328a:	da0d      	bge.n	80032a8 <HAL_UART_IRQHandler+0x678>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	0018      	movs	r0, r3
 8003290:	f001 f8b8 	bl	8004404 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003294:	e008      	b.n	80032a8 <HAL_UART_IRQHandler+0x678>
      return;
 8003296:	46c0      	nop			@ (mov r8, r8)
 8003298:	e006      	b.n	80032a8 <HAL_UART_IRQHandler+0x678>
    return;
 800329a:	46c0      	nop			@ (mov r8, r8)
 800329c:	e004      	b.n	80032a8 <HAL_UART_IRQHandler+0x678>
      return;
 800329e:	46c0      	nop			@ (mov r8, r8)
 80032a0:	e002      	b.n	80032a8 <HAL_UART_IRQHandler+0x678>
      return;
 80032a2:	46c0      	nop			@ (mov r8, r8)
 80032a4:	e000      	b.n	80032a8 <HAL_UART_IRQHandler+0x678>
    return;
 80032a6:	46c0      	nop			@ (mov r8, r8)
  }
}
 80032a8:	46bd      	mov	sp, r7
 80032aa:	b02a      	add	sp, #168	@ 0xa8
 80032ac:	bdb0      	pop	{r4, r5, r7, pc}
 80032ae:	46c0      	nop			@ (mov r8, r8)
 80032b0:	fffffeff 	.word	0xfffffeff
 80032b4:	fffffedf 	.word	0xfffffedf
 80032b8:	effffffe 	.word	0xeffffffe

080032bc <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b082      	sub	sp, #8
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80032c4:	46c0      	nop			@ (mov r8, r8)
 80032c6:	46bd      	mov	sp, r7
 80032c8:	b002      	add	sp, #8
 80032ca:	bd80      	pop	{r7, pc}

080032cc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80032d4:	46c0      	nop			@ (mov r8, r8)
 80032d6:	46bd      	mov	sp, r7
 80032d8:	b002      	add	sp, #8
 80032da:	bd80      	pop	{r7, pc}

080032dc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80032e4:	46c0      	nop			@ (mov r8, r8)
 80032e6:	46bd      	mov	sp, r7
 80032e8:	b002      	add	sp, #8
 80032ea:	bd80      	pop	{r7, pc}

080032ec <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b082      	sub	sp, #8
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80032f4:	46c0      	nop			@ (mov r8, r8)
 80032f6:	46bd      	mov	sp, r7
 80032f8:	b002      	add	sp, #8
 80032fa:	bd80      	pop	{r7, pc}

080032fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b088      	sub	sp, #32
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003304:	231e      	movs	r3, #30
 8003306:	18fb      	adds	r3, r7, r3
 8003308:	2200      	movs	r2, #0
 800330a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	689a      	ldr	r2, [r3, #8]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	691b      	ldr	r3, [r3, #16]
 8003314:	431a      	orrs	r2, r3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	695b      	ldr	r3, [r3, #20]
 800331a:	431a      	orrs	r2, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	69db      	ldr	r3, [r3, #28]
 8003320:	4313      	orrs	r3, r2
 8003322:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4aab      	ldr	r2, [pc, #684]	@ (80035d8 <UART_SetConfig+0x2dc>)
 800332c:	4013      	ands	r3, r2
 800332e:	0019      	movs	r1, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	697a      	ldr	r2, [r7, #20]
 8003336:	430a      	orrs	r2, r1
 8003338:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	4aa6      	ldr	r2, [pc, #664]	@ (80035dc <UART_SetConfig+0x2e0>)
 8003342:	4013      	ands	r3, r2
 8003344:	0019      	movs	r1, r3
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	68da      	ldr	r2, [r3, #12]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	430a      	orrs	r2, r1
 8003350:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	699b      	ldr	r3, [r3, #24]
 8003356:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6a1b      	ldr	r3, [r3, #32]
 800335c:	697a      	ldr	r2, [r7, #20]
 800335e:	4313      	orrs	r3, r2
 8003360:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	4a9d      	ldr	r2, [pc, #628]	@ (80035e0 <UART_SetConfig+0x2e4>)
 800336a:	4013      	ands	r3, r2
 800336c:	0019      	movs	r1, r3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	697a      	ldr	r2, [r7, #20]
 8003374:	430a      	orrs	r2, r1
 8003376:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800337e:	220f      	movs	r2, #15
 8003380:	4393      	bics	r3, r2
 8003382:	0019      	movs	r1, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	430a      	orrs	r2, r1
 800338e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a93      	ldr	r2, [pc, #588]	@ (80035e4 <UART_SetConfig+0x2e8>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d127      	bne.n	80033ea <UART_SetConfig+0xee>
 800339a:	4b93      	ldr	r3, [pc, #588]	@ (80035e8 <UART_SetConfig+0x2ec>)
 800339c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800339e:	2203      	movs	r2, #3
 80033a0:	4013      	ands	r3, r2
 80033a2:	2b03      	cmp	r3, #3
 80033a4:	d017      	beq.n	80033d6 <UART_SetConfig+0xda>
 80033a6:	d81b      	bhi.n	80033e0 <UART_SetConfig+0xe4>
 80033a8:	2b02      	cmp	r3, #2
 80033aa:	d00a      	beq.n	80033c2 <UART_SetConfig+0xc6>
 80033ac:	d818      	bhi.n	80033e0 <UART_SetConfig+0xe4>
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d002      	beq.n	80033b8 <UART_SetConfig+0xbc>
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d00a      	beq.n	80033cc <UART_SetConfig+0xd0>
 80033b6:	e013      	b.n	80033e0 <UART_SetConfig+0xe4>
 80033b8:	231f      	movs	r3, #31
 80033ba:	18fb      	adds	r3, r7, r3
 80033bc:	2200      	movs	r2, #0
 80033be:	701a      	strb	r2, [r3, #0]
 80033c0:	e021      	b.n	8003406 <UART_SetConfig+0x10a>
 80033c2:	231f      	movs	r3, #31
 80033c4:	18fb      	adds	r3, r7, r3
 80033c6:	2202      	movs	r2, #2
 80033c8:	701a      	strb	r2, [r3, #0]
 80033ca:	e01c      	b.n	8003406 <UART_SetConfig+0x10a>
 80033cc:	231f      	movs	r3, #31
 80033ce:	18fb      	adds	r3, r7, r3
 80033d0:	2204      	movs	r2, #4
 80033d2:	701a      	strb	r2, [r3, #0]
 80033d4:	e017      	b.n	8003406 <UART_SetConfig+0x10a>
 80033d6:	231f      	movs	r3, #31
 80033d8:	18fb      	adds	r3, r7, r3
 80033da:	2208      	movs	r2, #8
 80033dc:	701a      	strb	r2, [r3, #0]
 80033de:	e012      	b.n	8003406 <UART_SetConfig+0x10a>
 80033e0:	231f      	movs	r3, #31
 80033e2:	18fb      	adds	r3, r7, r3
 80033e4:	2210      	movs	r2, #16
 80033e6:	701a      	strb	r2, [r3, #0]
 80033e8:	e00d      	b.n	8003406 <UART_SetConfig+0x10a>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a7f      	ldr	r2, [pc, #508]	@ (80035ec <UART_SetConfig+0x2f0>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d104      	bne.n	80033fe <UART_SetConfig+0x102>
 80033f4:	231f      	movs	r3, #31
 80033f6:	18fb      	adds	r3, r7, r3
 80033f8:	2200      	movs	r2, #0
 80033fa:	701a      	strb	r2, [r3, #0]
 80033fc:	e003      	b.n	8003406 <UART_SetConfig+0x10a>
 80033fe:	231f      	movs	r3, #31
 8003400:	18fb      	adds	r3, r7, r3
 8003402:	2210      	movs	r2, #16
 8003404:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	69da      	ldr	r2, [r3, #28]
 800340a:	2380      	movs	r3, #128	@ 0x80
 800340c:	021b      	lsls	r3, r3, #8
 800340e:	429a      	cmp	r2, r3
 8003410:	d000      	beq.n	8003414 <UART_SetConfig+0x118>
 8003412:	e06f      	b.n	80034f4 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8003414:	231f      	movs	r3, #31
 8003416:	18fb      	adds	r3, r7, r3
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	2b08      	cmp	r3, #8
 800341c:	d01f      	beq.n	800345e <UART_SetConfig+0x162>
 800341e:	dc22      	bgt.n	8003466 <UART_SetConfig+0x16a>
 8003420:	2b04      	cmp	r3, #4
 8003422:	d017      	beq.n	8003454 <UART_SetConfig+0x158>
 8003424:	dc1f      	bgt.n	8003466 <UART_SetConfig+0x16a>
 8003426:	2b00      	cmp	r3, #0
 8003428:	d002      	beq.n	8003430 <UART_SetConfig+0x134>
 800342a:	2b02      	cmp	r3, #2
 800342c:	d005      	beq.n	800343a <UART_SetConfig+0x13e>
 800342e:	e01a      	b.n	8003466 <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003430:	f7ff f90e 	bl	8002650 <HAL_RCC_GetPCLK1Freq>
 8003434:	0003      	movs	r3, r0
 8003436:	61bb      	str	r3, [r7, #24]
        break;
 8003438:	e01c      	b.n	8003474 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 800343a:	4b6b      	ldr	r3, [pc, #428]	@ (80035e8 <UART_SetConfig+0x2ec>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	095b      	lsrs	r3, r3, #5
 8003440:	2207      	movs	r2, #7
 8003442:	4013      	ands	r3, r2
 8003444:	3301      	adds	r3, #1
 8003446:	0019      	movs	r1, r3
 8003448:	4869      	ldr	r0, [pc, #420]	@ (80035f0 <UART_SetConfig+0x2f4>)
 800344a:	f7fc fe5d 	bl	8000108 <__udivsi3>
 800344e:	0003      	movs	r3, r0
 8003450:	61bb      	str	r3, [r7, #24]
        break;
 8003452:	e00f      	b.n	8003474 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003454:	f7ff f886 	bl	8002564 <HAL_RCC_GetSysClockFreq>
 8003458:	0003      	movs	r3, r0
 800345a:	61bb      	str	r3, [r7, #24]
        break;
 800345c:	e00a      	b.n	8003474 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800345e:	2380      	movs	r3, #128	@ 0x80
 8003460:	021b      	lsls	r3, r3, #8
 8003462:	61bb      	str	r3, [r7, #24]
        break;
 8003464:	e006      	b.n	8003474 <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 8003466:	2300      	movs	r3, #0
 8003468:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800346a:	231e      	movs	r3, #30
 800346c:	18fb      	adds	r3, r7, r3
 800346e:	2201      	movs	r2, #1
 8003470:	701a      	strb	r2, [r3, #0]
        break;
 8003472:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d100      	bne.n	800347c <UART_SetConfig+0x180>
 800347a:	e097      	b.n	80035ac <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003480:	4b5c      	ldr	r3, [pc, #368]	@ (80035f4 <UART_SetConfig+0x2f8>)
 8003482:	0052      	lsls	r2, r2, #1
 8003484:	5ad3      	ldrh	r3, [r2, r3]
 8003486:	0019      	movs	r1, r3
 8003488:	69b8      	ldr	r0, [r7, #24]
 800348a:	f7fc fe3d 	bl	8000108 <__udivsi3>
 800348e:	0003      	movs	r3, r0
 8003490:	005a      	lsls	r2, r3, #1
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	085b      	lsrs	r3, r3, #1
 8003498:	18d2      	adds	r2, r2, r3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	0019      	movs	r1, r3
 80034a0:	0010      	movs	r0, r2
 80034a2:	f7fc fe31 	bl	8000108 <__udivsi3>
 80034a6:	0003      	movs	r3, r0
 80034a8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	2b0f      	cmp	r3, #15
 80034ae:	d91c      	bls.n	80034ea <UART_SetConfig+0x1ee>
 80034b0:	693a      	ldr	r2, [r7, #16]
 80034b2:	2380      	movs	r3, #128	@ 0x80
 80034b4:	025b      	lsls	r3, r3, #9
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d217      	bcs.n	80034ea <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	b29a      	uxth	r2, r3
 80034be:	200e      	movs	r0, #14
 80034c0:	183b      	adds	r3, r7, r0
 80034c2:	210f      	movs	r1, #15
 80034c4:	438a      	bics	r2, r1
 80034c6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	085b      	lsrs	r3, r3, #1
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	2207      	movs	r2, #7
 80034d0:	4013      	ands	r3, r2
 80034d2:	b299      	uxth	r1, r3
 80034d4:	183b      	adds	r3, r7, r0
 80034d6:	183a      	adds	r2, r7, r0
 80034d8:	8812      	ldrh	r2, [r2, #0]
 80034da:	430a      	orrs	r2, r1
 80034dc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	183a      	adds	r2, r7, r0
 80034e4:	8812      	ldrh	r2, [r2, #0]
 80034e6:	60da      	str	r2, [r3, #12]
 80034e8:	e060      	b.n	80035ac <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 80034ea:	231e      	movs	r3, #30
 80034ec:	18fb      	adds	r3, r7, r3
 80034ee:	2201      	movs	r2, #1
 80034f0:	701a      	strb	r2, [r3, #0]
 80034f2:	e05b      	b.n	80035ac <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80034f4:	231f      	movs	r3, #31
 80034f6:	18fb      	adds	r3, r7, r3
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	2b08      	cmp	r3, #8
 80034fc:	d01f      	beq.n	800353e <UART_SetConfig+0x242>
 80034fe:	dc22      	bgt.n	8003546 <UART_SetConfig+0x24a>
 8003500:	2b04      	cmp	r3, #4
 8003502:	d017      	beq.n	8003534 <UART_SetConfig+0x238>
 8003504:	dc1f      	bgt.n	8003546 <UART_SetConfig+0x24a>
 8003506:	2b00      	cmp	r3, #0
 8003508:	d002      	beq.n	8003510 <UART_SetConfig+0x214>
 800350a:	2b02      	cmp	r3, #2
 800350c:	d005      	beq.n	800351a <UART_SetConfig+0x21e>
 800350e:	e01a      	b.n	8003546 <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003510:	f7ff f89e 	bl	8002650 <HAL_RCC_GetPCLK1Freq>
 8003514:	0003      	movs	r3, r0
 8003516:	61bb      	str	r3, [r7, #24]
        break;
 8003518:	e01c      	b.n	8003554 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 800351a:	4b33      	ldr	r3, [pc, #204]	@ (80035e8 <UART_SetConfig+0x2ec>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	095b      	lsrs	r3, r3, #5
 8003520:	2207      	movs	r2, #7
 8003522:	4013      	ands	r3, r2
 8003524:	3301      	adds	r3, #1
 8003526:	0019      	movs	r1, r3
 8003528:	4831      	ldr	r0, [pc, #196]	@ (80035f0 <UART_SetConfig+0x2f4>)
 800352a:	f7fc fded 	bl	8000108 <__udivsi3>
 800352e:	0003      	movs	r3, r0
 8003530:	61bb      	str	r3, [r7, #24]
        break;
 8003532:	e00f      	b.n	8003554 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003534:	f7ff f816 	bl	8002564 <HAL_RCC_GetSysClockFreq>
 8003538:	0003      	movs	r3, r0
 800353a:	61bb      	str	r3, [r7, #24]
        break;
 800353c:	e00a      	b.n	8003554 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800353e:	2380      	movs	r3, #128	@ 0x80
 8003540:	021b      	lsls	r3, r3, #8
 8003542:	61bb      	str	r3, [r7, #24]
        break;
 8003544:	e006      	b.n	8003554 <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 8003546:	2300      	movs	r3, #0
 8003548:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800354a:	231e      	movs	r3, #30
 800354c:	18fb      	adds	r3, r7, r3
 800354e:	2201      	movs	r2, #1
 8003550:	701a      	strb	r2, [r3, #0]
        break;
 8003552:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d028      	beq.n	80035ac <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800355e:	4b25      	ldr	r3, [pc, #148]	@ (80035f4 <UART_SetConfig+0x2f8>)
 8003560:	0052      	lsls	r2, r2, #1
 8003562:	5ad3      	ldrh	r3, [r2, r3]
 8003564:	0019      	movs	r1, r3
 8003566:	69b8      	ldr	r0, [r7, #24]
 8003568:	f7fc fdce 	bl	8000108 <__udivsi3>
 800356c:	0003      	movs	r3, r0
 800356e:	001a      	movs	r2, r3
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	085b      	lsrs	r3, r3, #1
 8003576:	18d2      	adds	r2, r2, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	0019      	movs	r1, r3
 800357e:	0010      	movs	r0, r2
 8003580:	f7fc fdc2 	bl	8000108 <__udivsi3>
 8003584:	0003      	movs	r3, r0
 8003586:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	2b0f      	cmp	r3, #15
 800358c:	d90a      	bls.n	80035a4 <UART_SetConfig+0x2a8>
 800358e:	693a      	ldr	r2, [r7, #16]
 8003590:	2380      	movs	r3, #128	@ 0x80
 8003592:	025b      	lsls	r3, r3, #9
 8003594:	429a      	cmp	r2, r3
 8003596:	d205      	bcs.n	80035a4 <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	b29a      	uxth	r2, r3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	60da      	str	r2, [r3, #12]
 80035a2:	e003      	b.n	80035ac <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 80035a4:	231e      	movs	r3, #30
 80035a6:	18fb      	adds	r3, r7, r3
 80035a8:	2201      	movs	r2, #1
 80035aa:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	226a      	movs	r2, #106	@ 0x6a
 80035b0:	2101      	movs	r1, #1
 80035b2:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2268      	movs	r2, #104	@ 0x68
 80035b8:	2101      	movs	r1, #1
 80035ba:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80035c8:	231e      	movs	r3, #30
 80035ca:	18fb      	adds	r3, r7, r3
 80035cc:	781b      	ldrb	r3, [r3, #0]
}
 80035ce:	0018      	movs	r0, r3
 80035d0:	46bd      	mov	sp, r7
 80035d2:	b008      	add	sp, #32
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	46c0      	nop			@ (mov r8, r8)
 80035d8:	cfff69f3 	.word	0xcfff69f3
 80035dc:	ffffcfff 	.word	0xffffcfff
 80035e0:	11fff4ff 	.word	0x11fff4ff
 80035e4:	40013800 	.word	0x40013800
 80035e8:	40021000 	.word	0x40021000
 80035ec:	40004400 	.word	0x40004400
 80035f0:	02dc6c00 	.word	0x02dc6c00
 80035f4:	08004a34 	.word	0x08004a34

080035f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b082      	sub	sp, #8
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003604:	2208      	movs	r2, #8
 8003606:	4013      	ands	r3, r2
 8003608:	d00b      	beq.n	8003622 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	4a4a      	ldr	r2, [pc, #296]	@ (800373c <UART_AdvFeatureConfig+0x144>)
 8003612:	4013      	ands	r3, r2
 8003614:	0019      	movs	r1, r3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	430a      	orrs	r2, r1
 8003620:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003626:	2201      	movs	r2, #1
 8003628:	4013      	ands	r3, r2
 800362a:	d00b      	beq.n	8003644 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	4a43      	ldr	r2, [pc, #268]	@ (8003740 <UART_AdvFeatureConfig+0x148>)
 8003634:	4013      	ands	r3, r2
 8003636:	0019      	movs	r1, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	430a      	orrs	r2, r1
 8003642:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003648:	2202      	movs	r2, #2
 800364a:	4013      	ands	r3, r2
 800364c:	d00b      	beq.n	8003666 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	4a3b      	ldr	r2, [pc, #236]	@ (8003744 <UART_AdvFeatureConfig+0x14c>)
 8003656:	4013      	ands	r3, r2
 8003658:	0019      	movs	r1, r3
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	430a      	orrs	r2, r1
 8003664:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800366a:	2204      	movs	r2, #4
 800366c:	4013      	ands	r3, r2
 800366e:	d00b      	beq.n	8003688 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	4a34      	ldr	r2, [pc, #208]	@ (8003748 <UART_AdvFeatureConfig+0x150>)
 8003678:	4013      	ands	r3, r2
 800367a:	0019      	movs	r1, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	430a      	orrs	r2, r1
 8003686:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800368c:	2210      	movs	r2, #16
 800368e:	4013      	ands	r3, r2
 8003690:	d00b      	beq.n	80036aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	4a2c      	ldr	r2, [pc, #176]	@ (800374c <UART_AdvFeatureConfig+0x154>)
 800369a:	4013      	ands	r3, r2
 800369c:	0019      	movs	r1, r3
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	430a      	orrs	r2, r1
 80036a8:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036ae:	2220      	movs	r2, #32
 80036b0:	4013      	ands	r3, r2
 80036b2:	d00b      	beq.n	80036cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	4a25      	ldr	r2, [pc, #148]	@ (8003750 <UART_AdvFeatureConfig+0x158>)
 80036bc:	4013      	ands	r3, r2
 80036be:	0019      	movs	r1, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	430a      	orrs	r2, r1
 80036ca:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036d0:	2240      	movs	r2, #64	@ 0x40
 80036d2:	4013      	ands	r3, r2
 80036d4:	d01d      	beq.n	8003712 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	4a1d      	ldr	r2, [pc, #116]	@ (8003754 <UART_AdvFeatureConfig+0x15c>)
 80036de:	4013      	ands	r3, r2
 80036e0:	0019      	movs	r1, r3
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	430a      	orrs	r2, r1
 80036ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80036f2:	2380      	movs	r3, #128	@ 0x80
 80036f4:	035b      	lsls	r3, r3, #13
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d10b      	bne.n	8003712 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	4a15      	ldr	r2, [pc, #84]	@ (8003758 <UART_AdvFeatureConfig+0x160>)
 8003702:	4013      	ands	r3, r2
 8003704:	0019      	movs	r1, r3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	430a      	orrs	r2, r1
 8003710:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003716:	2280      	movs	r2, #128	@ 0x80
 8003718:	4013      	ands	r3, r2
 800371a:	d00b      	beq.n	8003734 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	4a0e      	ldr	r2, [pc, #56]	@ (800375c <UART_AdvFeatureConfig+0x164>)
 8003724:	4013      	ands	r3, r2
 8003726:	0019      	movs	r1, r3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	430a      	orrs	r2, r1
 8003732:	605a      	str	r2, [r3, #4]
  }
}
 8003734:	46c0      	nop			@ (mov r8, r8)
 8003736:	46bd      	mov	sp, r7
 8003738:	b002      	add	sp, #8
 800373a:	bd80      	pop	{r7, pc}
 800373c:	ffff7fff 	.word	0xffff7fff
 8003740:	fffdffff 	.word	0xfffdffff
 8003744:	fffeffff 	.word	0xfffeffff
 8003748:	fffbffff 	.word	0xfffbffff
 800374c:	ffffefff 	.word	0xffffefff
 8003750:	ffffdfff 	.word	0xffffdfff
 8003754:	ffefffff 	.word	0xffefffff
 8003758:	ff9fffff 	.word	0xff9fffff
 800375c:	fff7ffff 	.word	0xfff7ffff

08003760 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b092      	sub	sp, #72	@ 0x48
 8003764:	af02      	add	r7, sp, #8
 8003766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2290      	movs	r2, #144	@ 0x90
 800376c:	2100      	movs	r1, #0
 800376e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003770:	f7fd fe0c 	bl	800138c <HAL_GetTick>
 8003774:	0003      	movs	r3, r0
 8003776:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2208      	movs	r2, #8
 8003780:	4013      	ands	r3, r2
 8003782:	2b08      	cmp	r3, #8
 8003784:	d12d      	bne.n	80037e2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003786:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003788:	2280      	movs	r2, #128	@ 0x80
 800378a:	0391      	lsls	r1, r2, #14
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	4a47      	ldr	r2, [pc, #284]	@ (80038ac <UART_CheckIdleState+0x14c>)
 8003790:	9200      	str	r2, [sp, #0]
 8003792:	2200      	movs	r2, #0
 8003794:	f000 f88e 	bl	80038b4 <UART_WaitOnFlagUntilTimeout>
 8003798:	1e03      	subs	r3, r0, #0
 800379a:	d022      	beq.n	80037e2 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800379c:	f3ef 8310 	mrs	r3, PRIMASK
 80037a0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80037a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80037a4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80037a6:	2301      	movs	r3, #1
 80037a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037ac:	f383 8810 	msr	PRIMASK, r3
}
 80037b0:	46c0      	nop			@ (mov r8, r8)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	2180      	movs	r1, #128	@ 0x80
 80037be:	438a      	bics	r2, r1
 80037c0:	601a      	str	r2, [r3, #0]
 80037c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037c8:	f383 8810 	msr	PRIMASK, r3
}
 80037cc:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2288      	movs	r2, #136	@ 0x88
 80037d2:	2120      	movs	r1, #32
 80037d4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2284      	movs	r2, #132	@ 0x84
 80037da:	2100      	movs	r1, #0
 80037dc:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	e060      	b.n	80038a4 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	2204      	movs	r2, #4
 80037ea:	4013      	ands	r3, r2
 80037ec:	2b04      	cmp	r3, #4
 80037ee:	d146      	bne.n	800387e <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037f2:	2280      	movs	r2, #128	@ 0x80
 80037f4:	03d1      	lsls	r1, r2, #15
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	4a2c      	ldr	r2, [pc, #176]	@ (80038ac <UART_CheckIdleState+0x14c>)
 80037fa:	9200      	str	r2, [sp, #0]
 80037fc:	2200      	movs	r2, #0
 80037fe:	f000 f859 	bl	80038b4 <UART_WaitOnFlagUntilTimeout>
 8003802:	1e03      	subs	r3, r0, #0
 8003804:	d03b      	beq.n	800387e <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003806:	f3ef 8310 	mrs	r3, PRIMASK
 800380a:	60fb      	str	r3, [r7, #12]
  return(result);
 800380c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800380e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003810:	2301      	movs	r3, #1
 8003812:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	f383 8810 	msr	PRIMASK, r3
}
 800381a:	46c0      	nop			@ (mov r8, r8)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4922      	ldr	r1, [pc, #136]	@ (80038b0 <UART_CheckIdleState+0x150>)
 8003828:	400a      	ands	r2, r1
 800382a:	601a      	str	r2, [r3, #0]
 800382c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800382e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	f383 8810 	msr	PRIMASK, r3
}
 8003836:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003838:	f3ef 8310 	mrs	r3, PRIMASK
 800383c:	61bb      	str	r3, [r7, #24]
  return(result);
 800383e:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003840:	633b      	str	r3, [r7, #48]	@ 0x30
 8003842:	2301      	movs	r3, #1
 8003844:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	f383 8810 	msr	PRIMASK, r3
}
 800384c:	46c0      	nop			@ (mov r8, r8)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	689a      	ldr	r2, [r3, #8]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	2101      	movs	r1, #1
 800385a:	438a      	bics	r2, r1
 800385c:	609a      	str	r2, [r3, #8]
 800385e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003860:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003862:	6a3b      	ldr	r3, [r7, #32]
 8003864:	f383 8810 	msr	PRIMASK, r3
}
 8003868:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	228c      	movs	r2, #140	@ 0x8c
 800386e:	2120      	movs	r1, #32
 8003870:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2284      	movs	r2, #132	@ 0x84
 8003876:	2100      	movs	r1, #0
 8003878:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	e012      	b.n	80038a4 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2288      	movs	r2, #136	@ 0x88
 8003882:	2120      	movs	r1, #32
 8003884:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	228c      	movs	r2, #140	@ 0x8c
 800388a:	2120      	movs	r1, #32
 800388c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2284      	movs	r2, #132	@ 0x84
 800389e:	2100      	movs	r1, #0
 80038a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80038a2:	2300      	movs	r3, #0
}
 80038a4:	0018      	movs	r0, r3
 80038a6:	46bd      	mov	sp, r7
 80038a8:	b010      	add	sp, #64	@ 0x40
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	01ffffff 	.word	0x01ffffff
 80038b0:	fffffedf 	.word	0xfffffedf

080038b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b084      	sub	sp, #16
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	60b9      	str	r1, [r7, #8]
 80038be:	603b      	str	r3, [r7, #0]
 80038c0:	1dfb      	adds	r3, r7, #7
 80038c2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038c4:	e051      	b.n	800396a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038c6:	69bb      	ldr	r3, [r7, #24]
 80038c8:	3301      	adds	r3, #1
 80038ca:	d04e      	beq.n	800396a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038cc:	f7fd fd5e 	bl	800138c <HAL_GetTick>
 80038d0:	0002      	movs	r2, r0
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	69ba      	ldr	r2, [r7, #24]
 80038d8:	429a      	cmp	r2, r3
 80038da:	d302      	bcc.n	80038e2 <UART_WaitOnFlagUntilTimeout+0x2e>
 80038dc:	69bb      	ldr	r3, [r7, #24]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d101      	bne.n	80038e6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e051      	b.n	800398a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	2204      	movs	r2, #4
 80038ee:	4013      	ands	r3, r2
 80038f0:	d03b      	beq.n	800396a <UART_WaitOnFlagUntilTimeout+0xb6>
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	2b80      	cmp	r3, #128	@ 0x80
 80038f6:	d038      	beq.n	800396a <UART_WaitOnFlagUntilTimeout+0xb6>
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	2b40      	cmp	r3, #64	@ 0x40
 80038fc:	d035      	beq.n	800396a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	69db      	ldr	r3, [r3, #28]
 8003904:	2208      	movs	r2, #8
 8003906:	4013      	ands	r3, r2
 8003908:	2b08      	cmp	r3, #8
 800390a:	d111      	bne.n	8003930 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	2208      	movs	r2, #8
 8003912:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	0018      	movs	r0, r3
 8003918:	f000 f922 	bl	8003b60 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2290      	movs	r2, #144	@ 0x90
 8003920:	2108      	movs	r1, #8
 8003922:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2284      	movs	r2, #132	@ 0x84
 8003928:	2100      	movs	r1, #0
 800392a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e02c      	b.n	800398a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	69da      	ldr	r2, [r3, #28]
 8003936:	2380      	movs	r3, #128	@ 0x80
 8003938:	011b      	lsls	r3, r3, #4
 800393a:	401a      	ands	r2, r3
 800393c:	2380      	movs	r3, #128	@ 0x80
 800393e:	011b      	lsls	r3, r3, #4
 8003940:	429a      	cmp	r2, r3
 8003942:	d112      	bne.n	800396a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	2280      	movs	r2, #128	@ 0x80
 800394a:	0112      	lsls	r2, r2, #4
 800394c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	0018      	movs	r0, r3
 8003952:	f000 f905 	bl	8003b60 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2290      	movs	r2, #144	@ 0x90
 800395a:	2120      	movs	r1, #32
 800395c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2284      	movs	r2, #132	@ 0x84
 8003962:	2100      	movs	r1, #0
 8003964:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	e00f      	b.n	800398a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	69db      	ldr	r3, [r3, #28]
 8003970:	68ba      	ldr	r2, [r7, #8]
 8003972:	4013      	ands	r3, r2
 8003974:	68ba      	ldr	r2, [r7, #8]
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	425a      	negs	r2, r3
 800397a:	4153      	adcs	r3, r2
 800397c:	b2db      	uxtb	r3, r3
 800397e:	001a      	movs	r2, r3
 8003980:	1dfb      	adds	r3, r7, #7
 8003982:	781b      	ldrb	r3, [r3, #0]
 8003984:	429a      	cmp	r2, r3
 8003986:	d09e      	beq.n	80038c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003988:	2300      	movs	r3, #0
}
 800398a:	0018      	movs	r0, r3
 800398c:	46bd      	mov	sp, r7
 800398e:	b004      	add	sp, #16
 8003990:	bd80      	pop	{r7, pc}
	...

08003994 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b090      	sub	sp, #64	@ 0x40
 8003998:	af00      	add	r7, sp, #0
 800399a:	60f8      	str	r0, [r7, #12]
 800399c:	60b9      	str	r1, [r7, #8]
 800399e:	1dbb      	adds	r3, r7, #6
 80039a0:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	68ba      	ldr	r2, [r7, #8]
 80039a6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	1dba      	adds	r2, r7, #6
 80039ac:	215c      	movs	r1, #92	@ 0x5c
 80039ae:	8812      	ldrh	r2, [r2, #0]
 80039b0:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2290      	movs	r2, #144	@ 0x90
 80039b6:	2100      	movs	r1, #0
 80039b8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	228c      	movs	r2, #140	@ 0x8c
 80039be:	2122      	movs	r1, #34	@ 0x22
 80039c0:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2280      	movs	r2, #128	@ 0x80
 80039c6:	589b      	ldr	r3, [r3, r2]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d02d      	beq.n	8003a28 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2280      	movs	r2, #128	@ 0x80
 80039d0:	589b      	ldr	r3, [r3, r2]
 80039d2:	4a40      	ldr	r2, [pc, #256]	@ (8003ad4 <UART_Start_Receive_DMA+0x140>)
 80039d4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2280      	movs	r2, #128	@ 0x80
 80039da:	589b      	ldr	r3, [r3, r2]
 80039dc:	4a3e      	ldr	r2, [pc, #248]	@ (8003ad8 <UART_Start_Receive_DMA+0x144>)
 80039de:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2280      	movs	r2, #128	@ 0x80
 80039e4:	589b      	ldr	r3, [r3, r2]
 80039e6:	4a3d      	ldr	r2, [pc, #244]	@ (8003adc <UART_Start_Receive_DMA+0x148>)
 80039e8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2280      	movs	r2, #128	@ 0x80
 80039ee:	589b      	ldr	r3, [r3, r2]
 80039f0:	2200      	movs	r2, #0
 80039f2:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2280      	movs	r2, #128	@ 0x80
 80039f8:	5898      	ldr	r0, [r3, r2]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	3324      	adds	r3, #36	@ 0x24
 8003a00:	0019      	movs	r1, r3
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a06:	001a      	movs	r2, r3
 8003a08:	1dbb      	adds	r3, r7, #6
 8003a0a:	881b      	ldrh	r3, [r3, #0]
 8003a0c:	f7fd fe54 	bl	80016b8 <HAL_DMA_Start_IT>
 8003a10:	1e03      	subs	r3, r0, #0
 8003a12:	d009      	beq.n	8003a28 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2290      	movs	r2, #144	@ 0x90
 8003a18:	2110      	movs	r1, #16
 8003a1a:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	228c      	movs	r2, #140	@ 0x8c
 8003a20:	2120      	movs	r1, #32
 8003a22:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e050      	b.n	8003aca <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	691b      	ldr	r3, [r3, #16]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d019      	beq.n	8003a64 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003a30:	f3ef 8310 	mrs	r3, PRIMASK
 8003a34:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8003a36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a38:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a40:	f383 8810 	msr	PRIMASK, r3
}
 8003a44:	46c0      	nop			@ (mov r8, r8)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	2180      	movs	r1, #128	@ 0x80
 8003a52:	0049      	lsls	r1, r1, #1
 8003a54:	430a      	orrs	r2, r1
 8003a56:	601a      	str	r2, [r3, #0]
 8003a58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a5a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a5e:	f383 8810 	msr	PRIMASK, r3
}
 8003a62:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003a64:	f3ef 8310 	mrs	r3, PRIMASK
 8003a68:	613b      	str	r3, [r7, #16]
  return(result);
 8003a6a:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a6c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003a6e:	2301      	movs	r3, #1
 8003a70:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	f383 8810 	msr	PRIMASK, r3
}
 8003a78:	46c0      	nop			@ (mov r8, r8)
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	689a      	ldr	r2, [r3, #8]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	2101      	movs	r1, #1
 8003a86:	430a      	orrs	r2, r1
 8003a88:	609a      	str	r2, [r3, #8]
 8003a8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a8c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a8e:	69bb      	ldr	r3, [r7, #24]
 8003a90:	f383 8810 	msr	PRIMASK, r3
}
 8003a94:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003a96:	f3ef 8310 	mrs	r3, PRIMASK
 8003a9a:	61fb      	str	r3, [r7, #28]
  return(result);
 8003a9c:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aa4:	6a3b      	ldr	r3, [r7, #32]
 8003aa6:	f383 8810 	msr	PRIMASK, r3
}
 8003aaa:	46c0      	nop			@ (mov r8, r8)
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	689a      	ldr	r2, [r3, #8]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	2140      	movs	r1, #64	@ 0x40
 8003ab8:	430a      	orrs	r2, r1
 8003aba:	609a      	str	r2, [r3, #8]
 8003abc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003abe:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ac2:	f383 8810 	msr	PRIMASK, r3
}
 8003ac6:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	0018      	movs	r0, r3
 8003acc:	46bd      	mov	sp, r7
 8003ace:	b010      	add	sp, #64	@ 0x40
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	46c0      	nop			@ (mov r8, r8)
 8003ad4:	08003c2d 	.word	0x08003c2d
 8003ad8:	08003d5d 	.word	0x08003d5d
 8003adc:	08003d9f 	.word	0x08003d9f

08003ae0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b08a      	sub	sp, #40	@ 0x28
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003ae8:	f3ef 8310 	mrs	r3, PRIMASK
 8003aec:	60bb      	str	r3, [r7, #8]
  return(result);
 8003aee:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8003af0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003af2:	2301      	movs	r3, #1
 8003af4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	f383 8810 	msr	PRIMASK, r3
}
 8003afc:	46c0      	nop			@ (mov r8, r8)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	21c0      	movs	r1, #192	@ 0xc0
 8003b0a:	438a      	bics	r2, r1
 8003b0c:	601a      	str	r2, [r3, #0]
 8003b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b10:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	f383 8810 	msr	PRIMASK, r3
}
 8003b18:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003b1a:	f3ef 8310 	mrs	r3, PRIMASK
 8003b1e:	617b      	str	r3, [r7, #20]
  return(result);
 8003b20:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8003b22:	623b      	str	r3, [r7, #32]
 8003b24:	2301      	movs	r3, #1
 8003b26:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	f383 8810 	msr	PRIMASK, r3
}
 8003b2e:	46c0      	nop			@ (mov r8, r8)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	689a      	ldr	r2, [r3, #8]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4908      	ldr	r1, [pc, #32]	@ (8003b5c <UART_EndTxTransfer+0x7c>)
 8003b3c:	400a      	ands	r2, r1
 8003b3e:	609a      	str	r2, [r3, #8]
 8003b40:	6a3b      	ldr	r3, [r7, #32]
 8003b42:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	f383 8810 	msr	PRIMASK, r3
}
 8003b4a:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2288      	movs	r2, #136	@ 0x88
 8003b50:	2120      	movs	r1, #32
 8003b52:	5099      	str	r1, [r3, r2]
}
 8003b54:	46c0      	nop			@ (mov r8, r8)
 8003b56:	46bd      	mov	sp, r7
 8003b58:	b00a      	add	sp, #40	@ 0x28
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	ff7fffff 	.word	0xff7fffff

08003b60 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b08e      	sub	sp, #56	@ 0x38
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003b68:	f3ef 8310 	mrs	r3, PRIMASK
 8003b6c:	617b      	str	r3, [r7, #20]
  return(result);
 8003b6e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003b70:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b72:	2301      	movs	r3, #1
 8003b74:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b76:	69bb      	ldr	r3, [r7, #24]
 8003b78:	f383 8810 	msr	PRIMASK, r3
}
 8003b7c:	46c0      	nop			@ (mov r8, r8)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4926      	ldr	r1, [pc, #152]	@ (8003c24 <UART_EndRxTransfer+0xc4>)
 8003b8a:	400a      	ands	r2, r1
 8003b8c:	601a      	str	r2, [r3, #0]
 8003b8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b90:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	f383 8810 	msr	PRIMASK, r3
}
 8003b98:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003b9a:	f3ef 8310 	mrs	r3, PRIMASK
 8003b9e:	623b      	str	r3, [r7, #32]
  return(result);
 8003ba0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003ba2:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003baa:	f383 8810 	msr	PRIMASK, r3
}
 8003bae:	46c0      	nop			@ (mov r8, r8)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	689a      	ldr	r2, [r3, #8]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	491b      	ldr	r1, [pc, #108]	@ (8003c28 <UART_EndRxTransfer+0xc8>)
 8003bbc:	400a      	ands	r2, r1
 8003bbe:	609a      	str	r2, [r3, #8]
 8003bc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bc2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bc6:	f383 8810 	msr	PRIMASK, r3
}
 8003bca:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d118      	bne.n	8003c06 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003bd4:	f3ef 8310 	mrs	r3, PRIMASK
 8003bd8:	60bb      	str	r3, [r7, #8]
  return(result);
 8003bda:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003bde:	2301      	movs	r3, #1
 8003be0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	f383 8810 	msr	PRIMASK, r3
}
 8003be8:	46c0      	nop			@ (mov r8, r8)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	2110      	movs	r1, #16
 8003bf6:	438a      	bics	r2, r1
 8003bf8:	601a      	str	r2, [r3, #0]
 8003bfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bfc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	f383 8810 	msr	PRIMASK, r3
}
 8003c04:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	228c      	movs	r2, #140	@ 0x8c
 8003c0a:	2120      	movs	r1, #32
 8003c0c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003c1a:	46c0      	nop			@ (mov r8, r8)
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	b00e      	add	sp, #56	@ 0x38
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	46c0      	nop			@ (mov r8, r8)
 8003c24:	fffffedf 	.word	0xfffffedf
 8003c28:	effffffe 	.word	0xeffffffe

08003c2c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b094      	sub	sp, #80	@ 0x50
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c38:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	2220      	movs	r2, #32
 8003c42:	4013      	ands	r3, r2
 8003c44:	d16f      	bne.n	8003d26 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8003c46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c48:	225e      	movs	r2, #94	@ 0x5e
 8003c4a:	2100      	movs	r1, #0
 8003c4c:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003c4e:	f3ef 8310 	mrs	r3, PRIMASK
 8003c52:	61bb      	str	r3, [r7, #24]
  return(result);
 8003c54:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c56:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c58:	2301      	movs	r3, #1
 8003c5a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	f383 8810 	msr	PRIMASK, r3
}
 8003c62:	46c0      	nop			@ (mov r8, r8)
 8003c64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	493a      	ldr	r1, [pc, #232]	@ (8003d58 <UART_DMAReceiveCplt+0x12c>)
 8003c70:	400a      	ands	r2, r1
 8003c72:	601a      	str	r2, [r3, #0]
 8003c74:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c76:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c78:	6a3b      	ldr	r3, [r7, #32]
 8003c7a:	f383 8810 	msr	PRIMASK, r3
}
 8003c7e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003c80:	f3ef 8310 	mrs	r3, PRIMASK
 8003c84:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c88:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c90:	f383 8810 	msr	PRIMASK, r3
}
 8003c94:	46c0      	nop			@ (mov r8, r8)
 8003c96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	689a      	ldr	r2, [r3, #8]
 8003c9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	2101      	movs	r1, #1
 8003ca2:	438a      	bics	r2, r1
 8003ca4:	609a      	str	r2, [r3, #8]
 8003ca6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ca8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003caa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cac:	f383 8810 	msr	PRIMASK, r3
}
 8003cb0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003cb2:	f3ef 8310 	mrs	r3, PRIMASK
 8003cb6:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8003cb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cba:	643b      	str	r3, [r7, #64]	@ 0x40
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cc2:	f383 8810 	msr	PRIMASK, r3
}
 8003cc6:	46c0      	nop			@ (mov r8, r8)
 8003cc8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	689a      	ldr	r2, [r3, #8]
 8003cce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	2140      	movs	r1, #64	@ 0x40
 8003cd4:	438a      	bics	r2, r1
 8003cd6:	609a      	str	r2, [r3, #8]
 8003cd8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003cda:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cde:	f383 8810 	msr	PRIMASK, r3
}
 8003ce2:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003ce4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ce6:	228c      	movs	r2, #140	@ 0x8c
 8003ce8:	2120      	movs	r1, #32
 8003cea:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003cee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d118      	bne.n	8003d26 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003cf4:	f3ef 8310 	mrs	r3, PRIMASK
 8003cf8:	60fb      	str	r3, [r7, #12]
  return(result);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003cfe:	2301      	movs	r3, #1
 8003d00:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	f383 8810 	msr	PRIMASK, r3
}
 8003d08:	46c0      	nop			@ (mov r8, r8)
 8003d0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2110      	movs	r1, #16
 8003d16:	438a      	bics	r2, r1
 8003d18:	601a      	str	r2, [r3, #0]
 8003d1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d1c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	f383 8810 	msr	PRIMASK, r3
}
 8003d24:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d28:	2200      	movs	r2, #0
 8003d2a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d108      	bne.n	8003d46 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003d34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d36:	225c      	movs	r2, #92	@ 0x5c
 8003d38:	5a9a      	ldrh	r2, [r3, r2]
 8003d3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d3c:	0011      	movs	r1, r2
 8003d3e:	0018      	movs	r0, r3
 8003d40:	f7fc fcb4 	bl	80006ac <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003d44:	e003      	b.n	8003d4e <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 8003d46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d48:	0018      	movs	r0, r3
 8003d4a:	f7ff fab7 	bl	80032bc <HAL_UART_RxCpltCallback>
}
 8003d4e:	46c0      	nop			@ (mov r8, r8)
 8003d50:	46bd      	mov	sp, r7
 8003d52:	b014      	add	sp, #80	@ 0x50
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	46c0      	nop			@ (mov r8, r8)
 8003d58:	fffffeff 	.word	0xfffffeff

08003d5c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b084      	sub	sp, #16
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d68:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d10a      	bne.n	8003d8e <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	225c      	movs	r2, #92	@ 0x5c
 8003d7c:	5a9b      	ldrh	r3, [r3, r2]
 8003d7e:	085b      	lsrs	r3, r3, #1
 8003d80:	b29a      	uxth	r2, r3
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	0011      	movs	r1, r2
 8003d86:	0018      	movs	r0, r3
 8003d88:	f7fc fc90 	bl	80006ac <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003d8c:	e003      	b.n	8003d96 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	0018      	movs	r0, r3
 8003d92:	f7ff fa9b 	bl	80032cc <HAL_UART_RxHalfCpltCallback>
}
 8003d96:	46c0      	nop			@ (mov r8, r8)
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	b004      	add	sp, #16
 8003d9c:	bd80      	pop	{r7, pc}

08003d9e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003d9e:	b580      	push	{r7, lr}
 8003da0:	b086      	sub	sp, #24
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003daa:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	2288      	movs	r2, #136	@ 0x88
 8003db0:	589b      	ldr	r3, [r3, r2]
 8003db2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	228c      	movs	r2, #140	@ 0x8c
 8003db8:	589b      	ldr	r3, [r3, r2]
 8003dba:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	2280      	movs	r2, #128	@ 0x80
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	2b80      	cmp	r3, #128	@ 0x80
 8003dc8:	d10a      	bne.n	8003de0 <UART_DMAError+0x42>
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	2b21      	cmp	r3, #33	@ 0x21
 8003dce:	d107      	bne.n	8003de0 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	2256      	movs	r2, #86	@ 0x56
 8003dd4:	2100      	movs	r1, #0
 8003dd6:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	0018      	movs	r0, r3
 8003ddc:	f7ff fe80 	bl	8003ae0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	2240      	movs	r2, #64	@ 0x40
 8003de8:	4013      	ands	r3, r2
 8003dea:	2b40      	cmp	r3, #64	@ 0x40
 8003dec:	d10a      	bne.n	8003e04 <UART_DMAError+0x66>
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2b22      	cmp	r3, #34	@ 0x22
 8003df2:	d107      	bne.n	8003e04 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	225e      	movs	r2, #94	@ 0x5e
 8003df8:	2100      	movs	r1, #0
 8003dfa:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	0018      	movs	r0, r3
 8003e00:	f7ff feae 	bl	8003b60 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	2290      	movs	r2, #144	@ 0x90
 8003e08:	589b      	ldr	r3, [r3, r2]
 8003e0a:	2210      	movs	r2, #16
 8003e0c:	431a      	orrs	r2, r3
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	2190      	movs	r1, #144	@ 0x90
 8003e12:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	0018      	movs	r0, r3
 8003e18:	f7ff fa60 	bl	80032dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e1c:	46c0      	nop			@ (mov r8, r8)
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	b006      	add	sp, #24
 8003e22:	bd80      	pop	{r7, pc}

08003e24 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b084      	sub	sp, #16
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e30:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	225e      	movs	r2, #94	@ 0x5e
 8003e36:	2100      	movs	r1, #0
 8003e38:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2256      	movs	r2, #86	@ 0x56
 8003e3e:	2100      	movs	r1, #0
 8003e40:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	0018      	movs	r0, r3
 8003e46:	f7ff fa49 	bl	80032dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e4a:	46c0      	nop			@ (mov r8, r8)
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	b004      	add	sp, #16
 8003e50:	bd80      	pop	{r7, pc}

08003e52 <UART_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8003e52:	b580      	push	{r7, lr}
 8003e54:	b084      	sub	sp, #16
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e5e:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e64:	2200      	movs	r2, #0
 8003e66:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2280      	movs	r2, #128	@ 0x80
 8003e6c:	589b      	ldr	r3, [r3, r2]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d005      	beq.n	8003e7e <UART_DMATxAbortCallback+0x2c>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2280      	movs	r2, #128	@ 0x80
 8003e76:	589b      	ldr	r3, [r3, r2]
 8003e78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d12d      	bne.n	8003eda <UART_DMATxAbortCallback+0x88>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2256      	movs	r2, #86	@ 0x56
 8003e82:	2100      	movs	r1, #0
 8003e84:	5299      	strh	r1, [r3, r2]
  huart->RxXferCount = 0U;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	225e      	movs	r2, #94	@ 0x5e
 8003e8a:	2100      	movs	r1, #0
 8003e8c:	5299      	strh	r1, [r3, r2]

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2290      	movs	r2, #144	@ 0x90
 8003e92:	2100      	movs	r1, #0
 8003e94:	5099      	str	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	220f      	movs	r2, #15
 8003e9c:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003ea2:	2380      	movs	r3, #128	@ 0x80
 8003ea4:	059b      	lsls	r3, r3, #22
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d107      	bne.n	8003eba <UART_DMATxAbortCallback+0x68>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	699a      	ldr	r2, [r3, #24]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	2110      	movs	r1, #16
 8003eb6:	430a      	orrs	r2, r1
 8003eb8:	619a      	str	r2, [r3, #24]
  }

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2288      	movs	r2, #136	@ 0x88
 8003ebe:	2120      	movs	r1, #32
 8003ec0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	228c      	movs	r2, #140	@ 0x8c
 8003ec6:	2120      	movs	r1, #32
 8003ec8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	0018      	movs	r0, r3
 8003ed4:	f7ff fa0a 	bl	80032ec <HAL_UART_AbortCpltCallback>
 8003ed8:	e000      	b.n	8003edc <UART_DMATxAbortCallback+0x8a>
      return;
 8003eda:	46c0      	nop			@ (mov r8, r8)
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003edc:	46bd      	mov	sp, r7
 8003ede:	b004      	add	sp, #16
 8003ee0:	bd80      	pop	{r7, pc}

08003ee2 <UART_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8003ee2:	b580      	push	{r7, lr}
 8003ee4:	b084      	sub	sp, #16
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eee:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2280      	movs	r2, #128	@ 0x80
 8003ef4:	589b      	ldr	r3, [r3, r2]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d004      	beq.n	8003f0c <UART_DMARxAbortCallback+0x2a>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d127      	bne.n	8003f5c <UART_DMARxAbortCallback+0x7a>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2256      	movs	r2, #86	@ 0x56
 8003f10:	2100      	movs	r1, #0
 8003f12:	5299      	strh	r1, [r3, r2]
  huart->RxXferCount = 0U;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	225e      	movs	r2, #94	@ 0x5e
 8003f18:	2100      	movs	r1, #0
 8003f1a:	5299      	strh	r1, [r3, r2]

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2290      	movs	r2, #144	@ 0x90
 8003f20:	2100      	movs	r1, #0
 8003f22:	5099      	str	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	220f      	movs	r2, #15
 8003f2a:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	699a      	ldr	r2, [r3, #24]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	2108      	movs	r1, #8
 8003f38:	430a      	orrs	r2, r1
 8003f3a:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2288      	movs	r2, #136	@ 0x88
 8003f40:	2120      	movs	r1, #32
 8003f42:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	228c      	movs	r2, #140	@ 0x8c
 8003f48:	2120      	movs	r1, #32
 8003f4a:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	0018      	movs	r0, r3
 8003f56:	f7ff f9c9 	bl	80032ec <HAL_UART_AbortCpltCallback>
 8003f5a:	e000      	b.n	8003f5e <UART_DMARxAbortCallback+0x7c>
      return;
 8003f5c:	46c0      	nop			@ (mov r8, r8)
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	b004      	add	sp, #16
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b08a      	sub	sp, #40	@ 0x28
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2288      	movs	r2, #136	@ 0x88
 8003f70:	589b      	ldr	r3, [r3, r2]
 8003f72:	2b21      	cmp	r3, #33	@ 0x21
 8003f74:	d14c      	bne.n	8004010 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2256      	movs	r2, #86	@ 0x56
 8003f7a:	5a9b      	ldrh	r3, [r3, r2]
 8003f7c:	b29b      	uxth	r3, r3
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d132      	bne.n	8003fe8 <UART_TxISR_8BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003f82:	f3ef 8310 	mrs	r3, PRIMASK
 8003f86:	60bb      	str	r3, [r7, #8]
  return(result);
 8003f88:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8003f8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f383 8810 	msr	PRIMASK, r3
}
 8003f96:	46c0      	nop			@ (mov r8, r8)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	2180      	movs	r1, #128	@ 0x80
 8003fa4:	438a      	bics	r2, r1
 8003fa6:	601a      	str	r2, [r3, #0]
 8003fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003faa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	f383 8810 	msr	PRIMASK, r3
}
 8003fb2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003fb4:	f3ef 8310 	mrs	r3, PRIMASK
 8003fb8:	617b      	str	r3, [r7, #20]
  return(result);
 8003fba:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003fbc:	623b      	str	r3, [r7, #32]
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fc2:	69bb      	ldr	r3, [r7, #24]
 8003fc4:	f383 8810 	msr	PRIMASK, r3
}
 8003fc8:	46c0      	nop			@ (mov r8, r8)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	2140      	movs	r1, #64	@ 0x40
 8003fd6:	430a      	orrs	r2, r1
 8003fd8:	601a      	str	r2, [r3, #0]
 8003fda:	6a3b      	ldr	r3, [r7, #32]
 8003fdc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fde:	69fb      	ldr	r3, [r7, #28]
 8003fe0:	f383 8810 	msr	PRIMASK, r3
}
 8003fe4:	46c0      	nop			@ (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8003fe6:	e013      	b.n	8004010 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fec:	781a      	ldrb	r2, [r3, #0]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ff8:	1c5a      	adds	r2, r3, #1
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2256      	movs	r2, #86	@ 0x56
 8004002:	5a9b      	ldrh	r3, [r3, r2]
 8004004:	b29b      	uxth	r3, r3
 8004006:	3b01      	subs	r3, #1
 8004008:	b299      	uxth	r1, r3
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2256      	movs	r2, #86	@ 0x56
 800400e:	5299      	strh	r1, [r3, r2]
}
 8004010:	46c0      	nop			@ (mov r8, r8)
 8004012:	46bd      	mov	sp, r7
 8004014:	b00a      	add	sp, #40	@ 0x28
 8004016:	bd80      	pop	{r7, pc}

08004018 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b08c      	sub	sp, #48	@ 0x30
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2288      	movs	r2, #136	@ 0x88
 8004024:	589b      	ldr	r3, [r3, r2]
 8004026:	2b21      	cmp	r3, #33	@ 0x21
 8004028:	d151      	bne.n	80040ce <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2256      	movs	r2, #86	@ 0x56
 800402e:	5a9b      	ldrh	r3, [r3, r2]
 8004030:	b29b      	uxth	r3, r3
 8004032:	2b00      	cmp	r3, #0
 8004034:	d132      	bne.n	800409c <UART_TxISR_16BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004036:	f3ef 8310 	mrs	r3, PRIMASK
 800403a:	60fb      	str	r3, [r7, #12]
  return(result);
 800403c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800403e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004040:	2301      	movs	r3, #1
 8004042:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	f383 8810 	msr	PRIMASK, r3
}
 800404a:	46c0      	nop			@ (mov r8, r8)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	2180      	movs	r1, #128	@ 0x80
 8004058:	438a      	bics	r2, r1
 800405a:	601a      	str	r2, [r3, #0]
 800405c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800405e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	f383 8810 	msr	PRIMASK, r3
}
 8004066:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004068:	f3ef 8310 	mrs	r3, PRIMASK
 800406c:	61bb      	str	r3, [r7, #24]
  return(result);
 800406e:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004070:	627b      	str	r3, [r7, #36]	@ 0x24
 8004072:	2301      	movs	r3, #1
 8004074:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	f383 8810 	msr	PRIMASK, r3
}
 800407c:	46c0      	nop			@ (mov r8, r8)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	2140      	movs	r1, #64	@ 0x40
 800408a:	430a      	orrs	r2, r1
 800408c:	601a      	str	r2, [r3, #0]
 800408e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004090:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004092:	6a3b      	ldr	r3, [r7, #32]
 8004094:	f383 8810 	msr	PRIMASK, r3
}
 8004098:	46c0      	nop			@ (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800409a:	e018      	b.n	80040ce <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80040a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040a4:	881b      	ldrh	r3, [r3, #0]
 80040a6:	001a      	movs	r2, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	05d2      	lsls	r2, r2, #23
 80040ae:	0dd2      	lsrs	r2, r2, #23
 80040b0:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040b6:	1c9a      	adds	r2, r3, #2
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2256      	movs	r2, #86	@ 0x56
 80040c0:	5a9b      	ldrh	r3, [r3, r2]
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	3b01      	subs	r3, #1
 80040c6:	b299      	uxth	r1, r3
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2256      	movs	r2, #86	@ 0x56
 80040cc:	5299      	strh	r1, [r3, r2]
}
 80040ce:	46c0      	nop			@ (mov r8, r8)
 80040d0:	46bd      	mov	sp, r7
 80040d2:	b00c      	add	sp, #48	@ 0x30
 80040d4:	bd80      	pop	{r7, pc}
	...

080040d8 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b08c      	sub	sp, #48	@ 0x30
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2288      	movs	r2, #136	@ 0x88
 80040e4:	589b      	ldr	r3, [r3, r2]
 80040e6:	2b21      	cmp	r3, #33	@ 0x21
 80040e8:	d165      	bne.n	80041b6 <UART_TxISR_8BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80040ea:	232e      	movs	r3, #46	@ 0x2e
 80040ec:	18fb      	adds	r3, r7, r3
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	216a      	movs	r1, #106	@ 0x6a
 80040f2:	5a52      	ldrh	r2, [r2, r1]
 80040f4:	801a      	strh	r2, [r3, #0]
 80040f6:	e059      	b.n	80041ac <UART_TxISR_8BIT_FIFOEN+0xd4>
    {
      if (huart->TxXferCount == 0U)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2256      	movs	r2, #86	@ 0x56
 80040fc:	5a9b      	ldrh	r3, [r3, r2]
 80040fe:	b29b      	uxth	r3, r3
 8004100:	2b00      	cmp	r3, #0
 8004102:	d133      	bne.n	800416c <UART_TxISR_8BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004104:	f3ef 8310 	mrs	r3, PRIMASK
 8004108:	60fb      	str	r3, [r7, #12]
  return(result);
 800410a:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800410c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800410e:	2301      	movs	r3, #1
 8004110:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	f383 8810 	msr	PRIMASK, r3
}
 8004118:	46c0      	nop			@ (mov r8, r8)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	689a      	ldr	r2, [r3, #8]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4926      	ldr	r1, [pc, #152]	@ (80041c0 <UART_TxISR_8BIT_FIFOEN+0xe8>)
 8004126:	400a      	ands	r2, r1
 8004128:	609a      	str	r2, [r3, #8]
 800412a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800412c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	f383 8810 	msr	PRIMASK, r3
}
 8004134:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004136:	f3ef 8310 	mrs	r3, PRIMASK
 800413a:	61bb      	str	r3, [r7, #24]
  return(result);
 800413c:	69bb      	ldr	r3, [r7, #24]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800413e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004140:	2301      	movs	r3, #1
 8004142:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004144:	69fb      	ldr	r3, [r7, #28]
 8004146:	f383 8810 	msr	PRIMASK, r3
}
 800414a:	46c0      	nop			@ (mov r8, r8)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2140      	movs	r1, #64	@ 0x40
 8004158:	430a      	orrs	r2, r1
 800415a:	601a      	str	r2, [r3, #0]
 800415c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800415e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004160:	6a3b      	ldr	r3, [r7, #32]
 8004162:	f383 8810 	msr	PRIMASK, r3
}
 8004166:	46c0      	nop			@ (mov r8, r8)

        break; /* force exit loop */
 8004168:	46c0      	nop			@ (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 800416a:	e024      	b.n	80041b6 <UART_TxISR_8BIT_FIFOEN+0xde>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	69db      	ldr	r3, [r3, #28]
 8004172:	2280      	movs	r2, #128	@ 0x80
 8004174:	4013      	ands	r3, r2
 8004176:	d013      	beq.n	80041a0 <UART_TxISR_8BIT_FIFOEN+0xc8>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800417c:	781a      	ldrb	r2, [r3, #0]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004188:	1c5a      	adds	r2, r3, #1
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2256      	movs	r2, #86	@ 0x56
 8004192:	5a9b      	ldrh	r3, [r3, r2]
 8004194:	b29b      	uxth	r3, r3
 8004196:	3b01      	subs	r3, #1
 8004198:	b299      	uxth	r1, r3
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2256      	movs	r2, #86	@ 0x56
 800419e:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80041a0:	212e      	movs	r1, #46	@ 0x2e
 80041a2:	187b      	adds	r3, r7, r1
 80041a4:	881a      	ldrh	r2, [r3, #0]
 80041a6:	187b      	adds	r3, r7, r1
 80041a8:	3a01      	subs	r2, #1
 80041aa:	801a      	strh	r2, [r3, #0]
 80041ac:	232e      	movs	r3, #46	@ 0x2e
 80041ae:	18fb      	adds	r3, r7, r3
 80041b0:	881b      	ldrh	r3, [r3, #0]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d1a0      	bne.n	80040f8 <UART_TxISR_8BIT_FIFOEN+0x20>
}
 80041b6:	46c0      	nop			@ (mov r8, r8)
 80041b8:	46bd      	mov	sp, r7
 80041ba:	b00c      	add	sp, #48	@ 0x30
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	46c0      	nop			@ (mov r8, r8)
 80041c0:	ff7fffff 	.word	0xff7fffff

080041c4 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b08c      	sub	sp, #48	@ 0x30
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2288      	movs	r2, #136	@ 0x88
 80041d0:	589b      	ldr	r3, [r3, r2]
 80041d2:	2b21      	cmp	r3, #33	@ 0x21
 80041d4:	d16a      	bne.n	80042ac <UART_TxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80041d6:	232e      	movs	r3, #46	@ 0x2e
 80041d8:	18fb      	adds	r3, r7, r3
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	216a      	movs	r1, #106	@ 0x6a
 80041de:	5a52      	ldrh	r2, [r2, r1]
 80041e0:	801a      	strh	r2, [r3, #0]
 80041e2:	e05e      	b.n	80042a2 <UART_TxISR_16BIT_FIFOEN+0xde>
    {
      if (huart->TxXferCount == 0U)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2256      	movs	r2, #86	@ 0x56
 80041e8:	5a9b      	ldrh	r3, [r3, r2]
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d133      	bne.n	8004258 <UART_TxISR_16BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80041f0:	f3ef 8310 	mrs	r3, PRIMASK
 80041f4:	60bb      	str	r3, [r7, #8]
  return(result);
 80041f6:	68bb      	ldr	r3, [r7, #8]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80041f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80041fa:	2301      	movs	r3, #1
 80041fc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f383 8810 	msr	PRIMASK, r3
}
 8004204:	46c0      	nop			@ (mov r8, r8)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	689a      	ldr	r2, [r3, #8]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4928      	ldr	r1, [pc, #160]	@ (80042b4 <UART_TxISR_16BIT_FIFOEN+0xf0>)
 8004212:	400a      	ands	r2, r1
 8004214:	609a      	str	r2, [r3, #8]
 8004216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004218:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	f383 8810 	msr	PRIMASK, r3
}
 8004220:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004222:	f3ef 8310 	mrs	r3, PRIMASK
 8004226:	617b      	str	r3, [r7, #20]
  return(result);
 8004228:	697b      	ldr	r3, [r7, #20]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800422a:	623b      	str	r3, [r7, #32]
 800422c:	2301      	movs	r3, #1
 800422e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004230:	69bb      	ldr	r3, [r7, #24]
 8004232:	f383 8810 	msr	PRIMASK, r3
}
 8004236:	46c0      	nop			@ (mov r8, r8)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	2140      	movs	r1, #64	@ 0x40
 8004244:	430a      	orrs	r2, r1
 8004246:	601a      	str	r2, [r3, #0]
 8004248:	6a3b      	ldr	r3, [r7, #32]
 800424a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	f383 8810 	msr	PRIMASK, r3
}
 8004252:	46c0      	nop			@ (mov r8, r8)

        break; /* force exit loop */
 8004254:	46c0      	nop			@ (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 8004256:	e029      	b.n	80042ac <UART_TxISR_16BIT_FIFOEN+0xe8>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	69db      	ldr	r3, [r3, #28]
 800425e:	2280      	movs	r2, #128	@ 0x80
 8004260:	4013      	ands	r3, r2
 8004262:	d018      	beq.n	8004296 <UART_TxISR_16BIT_FIFOEN+0xd2>
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004268:	62bb      	str	r3, [r7, #40]	@ 0x28
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800426a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800426c:	881b      	ldrh	r3, [r3, #0]
 800426e:	001a      	movs	r2, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	05d2      	lsls	r2, r2, #23
 8004276:	0dd2      	lsrs	r2, r2, #23
 8004278:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800427e:	1c9a      	adds	r2, r3, #2
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2256      	movs	r2, #86	@ 0x56
 8004288:	5a9b      	ldrh	r3, [r3, r2]
 800428a:	b29b      	uxth	r3, r3
 800428c:	3b01      	subs	r3, #1
 800428e:	b299      	uxth	r1, r3
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2256      	movs	r2, #86	@ 0x56
 8004294:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004296:	212e      	movs	r1, #46	@ 0x2e
 8004298:	187b      	adds	r3, r7, r1
 800429a:	881a      	ldrh	r2, [r3, #0]
 800429c:	187b      	adds	r3, r7, r1
 800429e:	3a01      	subs	r2, #1
 80042a0:	801a      	strh	r2, [r3, #0]
 80042a2:	232e      	movs	r3, #46	@ 0x2e
 80042a4:	18fb      	adds	r3, r7, r3
 80042a6:	881b      	ldrh	r3, [r3, #0]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d19b      	bne.n	80041e4 <UART_TxISR_16BIT_FIFOEN+0x20>
}
 80042ac:	46c0      	nop			@ (mov r8, r8)
 80042ae:	46bd      	mov	sp, r7
 80042b0:	b00c      	add	sp, #48	@ 0x30
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	ff7fffff 	.word	0xff7fffff

080042b8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b086      	sub	sp, #24
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80042c0:	f3ef 8310 	mrs	r3, PRIMASK
 80042c4:	60bb      	str	r3, [r7, #8]
  return(result);
 80042c6:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80042c8:	617b      	str	r3, [r7, #20]
 80042ca:	2301      	movs	r3, #1
 80042cc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	f383 8810 	msr	PRIMASK, r3
}
 80042d4:	46c0      	nop			@ (mov r8, r8)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	2140      	movs	r1, #64	@ 0x40
 80042e2:	438a      	bics	r2, r1
 80042e4:	601a      	str	r2, [r3, #0]
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	f383 8810 	msr	PRIMASK, r3
}
 80042f0:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2288      	movs	r2, #136	@ 0x88
 80042f6:	2120      	movs	r1, #32
 80042f8:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	0018      	movs	r0, r3
 8004304:	f7fc fa7c 	bl	8000800 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004308:	46c0      	nop			@ (mov r8, r8)
 800430a:	46bd      	mov	sp, r7
 800430c:	b006      	add	sp, #24
 800430e:	bd80      	pop	{r7, pc}

08004310 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b086      	sub	sp, #24
 8004314:	af00      	add	r7, sp, #0
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	60b9      	str	r1, [r7, #8]
 800431a:	607a      	str	r2, [r7, #4]
 800431c:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d101      	bne.n	8004328 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	e05d      	b.n	80043e4 <HAL_RS485Ex_Init+0xd4>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2288      	movs	r2, #136	@ 0x88
 800432c:	589b      	ldr	r3, [r3, r2]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d107      	bne.n	8004342 <HAL_RS485Ex_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2284      	movs	r2, #132	@ 0x84
 8004336:	2100      	movs	r1, #0
 8004338:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	0018      	movs	r0, r3
 800433e:	f7fc fe69 	bl	8001014 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2288      	movs	r2, #136	@ 0x88
 8004346:	2124      	movs	r1, #36	@ 0x24
 8004348:	5099      	str	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	2101      	movs	r1, #1
 8004356:	438a      	bics	r2, r1
 8004358:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800435e:	2b00      	cmp	r3, #0
 8004360:	d003      	beq.n	800436a <HAL_RS485Ex_Init+0x5a>
  {
    UART_AdvFeatureConfig(huart);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	0018      	movs	r0, r3
 8004366:	f7ff f947 	bl	80035f8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	0018      	movs	r0, r3
 800436e:	f7fe ffc5 	bl	80032fc <UART_SetConfig>
 8004372:	0003      	movs	r3, r0
 8004374:	2b01      	cmp	r3, #1
 8004376:	d101      	bne.n	800437c <HAL_RS485Ex_Init+0x6c>
  {
    return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e033      	b.n	80043e4 <HAL_RS485Ex_Init+0xd4>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	689a      	ldr	r2, [r3, #8]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	2180      	movs	r1, #128	@ 0x80
 8004388:	01c9      	lsls	r1, r1, #7
 800438a:	430a      	orrs	r2, r1
 800438c:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	4a15      	ldr	r2, [pc, #84]	@ (80043ec <HAL_RS485Ex_Init+0xdc>)
 8004396:	4013      	ands	r3, r2
 8004398:	0019      	movs	r1, r3
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	68ba      	ldr	r2, [r7, #8]
 80043a0:	430a      	orrs	r2, r1
 80043a2:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	055b      	lsls	r3, r3, #21
 80043a8:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	041b      	lsls	r3, r3, #16
 80043ae:	697a      	ldr	r2, [r7, #20]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a0d      	ldr	r2, [pc, #52]	@ (80043f0 <HAL_RS485Ex_Init+0xe0>)
 80043bc:	4013      	ands	r3, r2
 80043be:	0019      	movs	r1, r3
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	697a      	ldr	r2, [r7, #20]
 80043c6:	430a      	orrs	r2, r1
 80043c8:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	2101      	movs	r1, #1
 80043d6:	430a      	orrs	r2, r1
 80043d8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	0018      	movs	r0, r3
 80043de:	f7ff f9bf 	bl	8003760 <UART_CheckIdleState>
 80043e2:	0003      	movs	r3, r0
}
 80043e4:	0018      	movs	r0, r3
 80043e6:	46bd      	mov	sp, r7
 80043e8:	b006      	add	sp, #24
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	ffff7fff 	.word	0xffff7fff
 80043f0:	fc00ffff 	.word	0xfc00ffff

080043f4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b082      	sub	sp, #8
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80043fc:	46c0      	nop			@ (mov r8, r8)
 80043fe:	46bd      	mov	sp, r7
 8004400:	b002      	add	sp, #8
 8004402:	bd80      	pop	{r7, pc}

08004404 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b082      	sub	sp, #8
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800440c:	46c0      	nop			@ (mov r8, r8)
 800440e:	46bd      	mov	sp, r7
 8004410:	b002      	add	sp, #8
 8004412:	bd80      	pop	{r7, pc}

08004414 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b082      	sub	sp, #8
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800441c:	46c0      	nop			@ (mov r8, r8)
 800441e:	46bd      	mov	sp, r7
 8004420:	b002      	add	sp, #8
 8004422:	bd80      	pop	{r7, pc}

08004424 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b084      	sub	sp, #16
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2284      	movs	r2, #132	@ 0x84
 8004430:	5c9b      	ldrb	r3, [r3, r2]
 8004432:	2b01      	cmp	r3, #1
 8004434:	d101      	bne.n	800443a <HAL_UARTEx_DisableFifoMode+0x16>
 8004436:	2302      	movs	r3, #2
 8004438:	e027      	b.n	800448a <HAL_UARTEx_DisableFifoMode+0x66>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2284      	movs	r2, #132	@ 0x84
 800443e:	2101      	movs	r1, #1
 8004440:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2288      	movs	r2, #136	@ 0x88
 8004446:	2124      	movs	r1, #36	@ 0x24
 8004448:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	2101      	movs	r1, #1
 800445e:	438a      	bics	r2, r1
 8004460:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	4a0b      	ldr	r2, [pc, #44]	@ (8004494 <HAL_UARTEx_DisableFifoMode+0x70>)
 8004466:	4013      	ands	r3, r2
 8004468:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	68fa      	ldr	r2, [r7, #12]
 8004476:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2288      	movs	r2, #136	@ 0x88
 800447c:	2120      	movs	r1, #32
 800447e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2284      	movs	r2, #132	@ 0x84
 8004484:	2100      	movs	r1, #0
 8004486:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004488:	2300      	movs	r3, #0
}
 800448a:	0018      	movs	r0, r3
 800448c:	46bd      	mov	sp, r7
 800448e:	b004      	add	sp, #16
 8004490:	bd80      	pop	{r7, pc}
 8004492:	46c0      	nop			@ (mov r8, r8)
 8004494:	dfffffff 	.word	0xdfffffff

08004498 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b084      	sub	sp, #16
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2284      	movs	r2, #132	@ 0x84
 80044a6:	5c9b      	ldrb	r3, [r3, r2]
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d101      	bne.n	80044b0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80044ac:	2302      	movs	r3, #2
 80044ae:	e02e      	b.n	800450e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2284      	movs	r2, #132	@ 0x84
 80044b4:	2101      	movs	r1, #1
 80044b6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2288      	movs	r2, #136	@ 0x88
 80044bc:	2124      	movs	r1, #36	@ 0x24
 80044be:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	2101      	movs	r1, #1
 80044d4:	438a      	bics	r2, r1
 80044d6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	00db      	lsls	r3, r3, #3
 80044e0:	08d9      	lsrs	r1, r3, #3
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	683a      	ldr	r2, [r7, #0]
 80044e8:	430a      	orrs	r2, r1
 80044ea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	0018      	movs	r0, r3
 80044f0:	f000 f8bc 	bl	800466c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	68fa      	ldr	r2, [r7, #12]
 80044fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2288      	movs	r2, #136	@ 0x88
 8004500:	2120      	movs	r1, #32
 8004502:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2284      	movs	r2, #132	@ 0x84
 8004508:	2100      	movs	r1, #0
 800450a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800450c:	2300      	movs	r3, #0
}
 800450e:	0018      	movs	r0, r3
 8004510:	46bd      	mov	sp, r7
 8004512:	b004      	add	sp, #16
 8004514:	bd80      	pop	{r7, pc}
	...

08004518 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b084      	sub	sp, #16
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2284      	movs	r2, #132	@ 0x84
 8004526:	5c9b      	ldrb	r3, [r3, r2]
 8004528:	2b01      	cmp	r3, #1
 800452a:	d101      	bne.n	8004530 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800452c:	2302      	movs	r3, #2
 800452e:	e02f      	b.n	8004590 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2284      	movs	r2, #132	@ 0x84
 8004534:	2101      	movs	r1, #1
 8004536:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2288      	movs	r2, #136	@ 0x88
 800453c:	2124      	movs	r1, #36	@ 0x24
 800453e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	2101      	movs	r1, #1
 8004554:	438a      	bics	r2, r1
 8004556:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	4a0e      	ldr	r2, [pc, #56]	@ (8004598 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004560:	4013      	ands	r3, r2
 8004562:	0019      	movs	r1, r3
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	683a      	ldr	r2, [r7, #0]
 800456a:	430a      	orrs	r2, r1
 800456c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	0018      	movs	r0, r3
 8004572:	f000 f87b 	bl	800466c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	68fa      	ldr	r2, [r7, #12]
 800457c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2288      	movs	r2, #136	@ 0x88
 8004582:	2120      	movs	r1, #32
 8004584:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2284      	movs	r2, #132	@ 0x84
 800458a:	2100      	movs	r1, #0
 800458c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800458e:	2300      	movs	r3, #0
}
 8004590:	0018      	movs	r0, r3
 8004592:	46bd      	mov	sp, r7
 8004594:	b004      	add	sp, #16
 8004596:	bd80      	pop	{r7, pc}
 8004598:	f1ffffff 	.word	0xf1ffffff

0800459c <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800459c:	b5b0      	push	{r4, r5, r7, lr}
 800459e:	b08a      	sub	sp, #40	@ 0x28
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	60f8      	str	r0, [r7, #12]
 80045a4:	60b9      	str	r1, [r7, #8]
 80045a6:	1dbb      	adds	r3, r7, #6
 80045a8:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	228c      	movs	r2, #140	@ 0x8c
 80045ae:	589b      	ldr	r3, [r3, r2]
 80045b0:	2b20      	cmp	r3, #32
 80045b2:	d156      	bne.n	8004662 <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d003      	beq.n	80045c2 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80045ba:	1dbb      	adds	r3, r7, #6
 80045bc:	881b      	ldrh	r3, [r3, #0]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d101      	bne.n	80045c6 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e04e      	b.n	8004664 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	689a      	ldr	r2, [r3, #8]
 80045ca:	2380      	movs	r3, #128	@ 0x80
 80045cc:	015b      	lsls	r3, r3, #5
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d109      	bne.n	80045e6 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d105      	bne.n	80045e6 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	2201      	movs	r2, #1
 80045de:	4013      	ands	r3, r2
 80045e0:	d001      	beq.n	80045e6 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e03e      	b.n	8004664 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2201      	movs	r2, #1
 80045ea:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2200      	movs	r2, #0
 80045f0:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80045f2:	2527      	movs	r5, #39	@ 0x27
 80045f4:	197c      	adds	r4, r7, r5
 80045f6:	1dbb      	adds	r3, r7, #6
 80045f8:	881a      	ldrh	r2, [r3, #0]
 80045fa:	68b9      	ldr	r1, [r7, #8]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	0018      	movs	r0, r3
 8004600:	f7ff f9c8 	bl	8003994 <UART_Start_Receive_DMA>
 8004604:	0003      	movs	r3, r0
 8004606:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8004608:	197b      	adds	r3, r7, r5
 800460a:	781b      	ldrb	r3, [r3, #0]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d124      	bne.n	800465a <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004614:	2b01      	cmp	r3, #1
 8004616:	d11c      	bne.n	8004652 <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	2210      	movs	r2, #16
 800461e:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004620:	f3ef 8310 	mrs	r3, PRIMASK
 8004624:	617b      	str	r3, [r7, #20]
  return(result);
 8004626:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004628:	623b      	str	r3, [r7, #32]
 800462a:	2301      	movs	r3, #1
 800462c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800462e:	69bb      	ldr	r3, [r7, #24]
 8004630:	f383 8810 	msr	PRIMASK, r3
}
 8004634:	46c0      	nop			@ (mov r8, r8)
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	2110      	movs	r1, #16
 8004642:	430a      	orrs	r2, r1
 8004644:	601a      	str	r2, [r3, #0]
 8004646:	6a3b      	ldr	r3, [r7, #32]
 8004648:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800464a:	69fb      	ldr	r3, [r7, #28]
 800464c:	f383 8810 	msr	PRIMASK, r3
}
 8004650:	e003      	b.n	800465a <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8004652:	2327      	movs	r3, #39	@ 0x27
 8004654:	18fb      	adds	r3, r7, r3
 8004656:	2201      	movs	r2, #1
 8004658:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 800465a:	2327      	movs	r3, #39	@ 0x27
 800465c:	18fb      	adds	r3, r7, r3
 800465e:	781b      	ldrb	r3, [r3, #0]
 8004660:	e000      	b.n	8004664 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 8004662:	2302      	movs	r3, #2
  }
}
 8004664:	0018      	movs	r0, r3
 8004666:	46bd      	mov	sp, r7
 8004668:	b00a      	add	sp, #40	@ 0x28
 800466a:	bdb0      	pop	{r4, r5, r7, pc}

0800466c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800466c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800466e:	b085      	sub	sp, #20
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004678:	2b00      	cmp	r3, #0
 800467a:	d108      	bne.n	800468e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	226a      	movs	r2, #106	@ 0x6a
 8004680:	2101      	movs	r1, #1
 8004682:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2268      	movs	r2, #104	@ 0x68
 8004688:	2101      	movs	r1, #1
 800468a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800468c:	e043      	b.n	8004716 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800468e:	260f      	movs	r6, #15
 8004690:	19bb      	adds	r3, r7, r6
 8004692:	2208      	movs	r2, #8
 8004694:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004696:	200e      	movs	r0, #14
 8004698:	183b      	adds	r3, r7, r0
 800469a:	2208      	movs	r2, #8
 800469c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	0e5b      	lsrs	r3, r3, #25
 80046a6:	b2da      	uxtb	r2, r3
 80046a8:	240d      	movs	r4, #13
 80046aa:	193b      	adds	r3, r7, r4
 80046ac:	2107      	movs	r1, #7
 80046ae:	400a      	ands	r2, r1
 80046b0:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	0f5b      	lsrs	r3, r3, #29
 80046ba:	b2da      	uxtb	r2, r3
 80046bc:	250c      	movs	r5, #12
 80046be:	197b      	adds	r3, r7, r5
 80046c0:	2107      	movs	r1, #7
 80046c2:	400a      	ands	r2, r1
 80046c4:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80046c6:	183b      	adds	r3, r7, r0
 80046c8:	781b      	ldrb	r3, [r3, #0]
 80046ca:	197a      	adds	r2, r7, r5
 80046cc:	7812      	ldrb	r2, [r2, #0]
 80046ce:	4914      	ldr	r1, [pc, #80]	@ (8004720 <UARTEx_SetNbDataToProcess+0xb4>)
 80046d0:	5c8a      	ldrb	r2, [r1, r2]
 80046d2:	435a      	muls	r2, r3
 80046d4:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80046d6:	197b      	adds	r3, r7, r5
 80046d8:	781b      	ldrb	r3, [r3, #0]
 80046da:	4a12      	ldr	r2, [pc, #72]	@ (8004724 <UARTEx_SetNbDataToProcess+0xb8>)
 80046dc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80046de:	0019      	movs	r1, r3
 80046e0:	f7fb fd9c 	bl	800021c <__divsi3>
 80046e4:	0003      	movs	r3, r0
 80046e6:	b299      	uxth	r1, r3
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	226a      	movs	r2, #106	@ 0x6a
 80046ec:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80046ee:	19bb      	adds	r3, r7, r6
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	193a      	adds	r2, r7, r4
 80046f4:	7812      	ldrb	r2, [r2, #0]
 80046f6:	490a      	ldr	r1, [pc, #40]	@ (8004720 <UARTEx_SetNbDataToProcess+0xb4>)
 80046f8:	5c8a      	ldrb	r2, [r1, r2]
 80046fa:	435a      	muls	r2, r3
 80046fc:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80046fe:	193b      	adds	r3, r7, r4
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	4a08      	ldr	r2, [pc, #32]	@ (8004724 <UARTEx_SetNbDataToProcess+0xb8>)
 8004704:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004706:	0019      	movs	r1, r3
 8004708:	f7fb fd88 	bl	800021c <__divsi3>
 800470c:	0003      	movs	r3, r0
 800470e:	b299      	uxth	r1, r3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2268      	movs	r2, #104	@ 0x68
 8004714:	5299      	strh	r1, [r3, r2]
}
 8004716:	46c0      	nop			@ (mov r8, r8)
 8004718:	46bd      	mov	sp, r7
 800471a:	b005      	add	sp, #20
 800471c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800471e:	46c0      	nop			@ (mov r8, r8)
 8004720:	08004a4c 	.word	0x08004a4c
 8004724:	08004a54 	.word	0x08004a54

08004728 <memset>:
 8004728:	0003      	movs	r3, r0
 800472a:	1882      	adds	r2, r0, r2
 800472c:	4293      	cmp	r3, r2
 800472e:	d100      	bne.n	8004732 <memset+0xa>
 8004730:	4770      	bx	lr
 8004732:	7019      	strb	r1, [r3, #0]
 8004734:	3301      	adds	r3, #1
 8004736:	e7f9      	b.n	800472c <memset+0x4>

08004738 <__libc_init_array>:
 8004738:	b570      	push	{r4, r5, r6, lr}
 800473a:	2600      	movs	r6, #0
 800473c:	4c0c      	ldr	r4, [pc, #48]	@ (8004770 <__libc_init_array+0x38>)
 800473e:	4d0d      	ldr	r5, [pc, #52]	@ (8004774 <__libc_init_array+0x3c>)
 8004740:	1b64      	subs	r4, r4, r5
 8004742:	10a4      	asrs	r4, r4, #2
 8004744:	42a6      	cmp	r6, r4
 8004746:	d109      	bne.n	800475c <__libc_init_array+0x24>
 8004748:	2600      	movs	r6, #0
 800474a:	f000 f823 	bl	8004794 <_init>
 800474e:	4c0a      	ldr	r4, [pc, #40]	@ (8004778 <__libc_init_array+0x40>)
 8004750:	4d0a      	ldr	r5, [pc, #40]	@ (800477c <__libc_init_array+0x44>)
 8004752:	1b64      	subs	r4, r4, r5
 8004754:	10a4      	asrs	r4, r4, #2
 8004756:	42a6      	cmp	r6, r4
 8004758:	d105      	bne.n	8004766 <__libc_init_array+0x2e>
 800475a:	bd70      	pop	{r4, r5, r6, pc}
 800475c:	00b3      	lsls	r3, r6, #2
 800475e:	58eb      	ldr	r3, [r5, r3]
 8004760:	4798      	blx	r3
 8004762:	3601      	adds	r6, #1
 8004764:	e7ee      	b.n	8004744 <__libc_init_array+0xc>
 8004766:	00b3      	lsls	r3, r6, #2
 8004768:	58eb      	ldr	r3, [r5, r3]
 800476a:	4798      	blx	r3
 800476c:	3601      	adds	r6, #1
 800476e:	e7f2      	b.n	8004756 <__libc_init_array+0x1e>
 8004770:	08004a5c 	.word	0x08004a5c
 8004774:	08004a5c 	.word	0x08004a5c
 8004778:	08004a60 	.word	0x08004a60
 800477c:	08004a5c 	.word	0x08004a5c

08004780 <memcpy>:
 8004780:	2300      	movs	r3, #0
 8004782:	b510      	push	{r4, lr}
 8004784:	429a      	cmp	r2, r3
 8004786:	d100      	bne.n	800478a <memcpy+0xa>
 8004788:	bd10      	pop	{r4, pc}
 800478a:	5ccc      	ldrb	r4, [r1, r3]
 800478c:	54c4      	strb	r4, [r0, r3]
 800478e:	3301      	adds	r3, #1
 8004790:	e7f8      	b.n	8004784 <memcpy+0x4>
	...

08004794 <_init>:
 8004794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004796:	46c0      	nop			@ (mov r8, r8)
 8004798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800479a:	bc08      	pop	{r3}
 800479c:	469e      	mov	lr, r3
 800479e:	4770      	bx	lr

080047a0 <_fini>:
 80047a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047a2:	46c0      	nop			@ (mov r8, r8)
 80047a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047a6:	bc08      	pop	{r3}
 80047a8:	469e      	mov	lr, r3
 80047aa:	4770      	bx	lr


PowerManagementBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004820  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b0  080048e0  080048e0  000058e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b90  08004b90  00006018  2**0
                  CONTENTS
  4 .ARM          00000000  08004b90  08004b90  00006018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004b90  08004b90  00006018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b90  08004b90  00005b90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004b94  08004b94  00005b94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08004b98  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000420  20000018  08004bb0  00006018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000438  08004bb0  00006438  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00006018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c05d  00000000  00000000  00006040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001eee  00000000  00000000  0001209d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008f0  00000000  00000000  00013f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006eb  00000000  00000000  00014880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014b07  00000000  00000000  00014f6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bca0  00000000  00000000  00029a72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008097d  00000000  00000000  00035712  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b608f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f2c  00000000  00000000  000b60d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  000b8000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000018 	.word	0x20000018
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080048c8 	.word	0x080048c8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000001c 	.word	0x2000001c
 8000104:	080048c8 	.word	0x080048c8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003f4:	b590      	push	{r4, r7, lr}
 80003f6:	b083      	sub	sp, #12
 80003f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003fa:	f000 ffb4 	bl	8001366 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003fe:	f000 f8c1 	bl	8000584 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000402:	f000 f96b 	bl	80006dc <MX_GPIO_Init>
  MX_DMA_Init();
 8000406:	f000 f94b 	bl	80006a0 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800040a:	f000 f8f9 	bl	8000600 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  if(modbus_set_rx() != HAL_OK)
 800040e:	f000 fd6f 	bl	8000ef0 <modbus_set_rx>
 8000412:	1e03      	subs	r3, r0, #0
 8000414:	d001      	beq.n	800041a <main+0x26>
  {
	  Error_Handler();
 8000416:	f000 f9cf 	bl	80007b8 <Error_Handler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Update the GPIO_READ register
	  GPIO_PinState estop_sense = HAL_GPIO_ReadPin(ESTOP_SENSE_GPIO_Port, ESTOP_SENSE_Pin);
 800041a:	1dfc      	adds	r4, r7, #7
 800041c:	2380      	movs	r3, #128	@ 0x80
 800041e:	009b      	lsls	r3, r3, #2
 8000420:	4a55      	ldr	r2, [pc, #340]	@ (8000578 <main+0x184>)
 8000422:	0019      	movs	r1, r3
 8000424:	0010      	movs	r0, r2
 8000426:	f001 fdbf 	bl	8001fa8 <HAL_GPIO_ReadPin>
 800042a:	0003      	movs	r3, r0
 800042c:	7023      	strb	r3, [r4, #0]
	  GPIO_PinState sense_120 = HAL_GPIO_ReadPin(SENSE_120_GPIO_Port, SENSE_120_Pin);
 800042e:	1dbc      	adds	r4, r7, #6
 8000430:	2380      	movs	r3, #128	@ 0x80
 8000432:	021b      	lsls	r3, r3, #8
 8000434:	4a50      	ldr	r2, [pc, #320]	@ (8000578 <main+0x184>)
 8000436:	0019      	movs	r1, r3
 8000438:	0010      	movs	r0, r2
 800043a:	f001 fdb5 	bl	8001fa8 <HAL_GPIO_ReadPin>
 800043e:	0003      	movs	r3, r0
 8000440:	7023      	strb	r3, [r4, #0]

	  holding_register_database[GPIO_READ] = ((estop_sense << ESTOP_SENSE_POS) | (sense_120 << SENSE_120_POS));
 8000442:	1dfb      	adds	r3, r7, #7
 8000444:	781b      	ldrb	r3, [r3, #0]
 8000446:	b21a      	sxth	r2, r3
 8000448:	1dbb      	adds	r3, r7, #6
 800044a:	781b      	ldrb	r3, [r3, #0]
 800044c:	005b      	lsls	r3, r3, #1
 800044e:	b21b      	sxth	r3, r3
 8000450:	4313      	orrs	r3, r2
 8000452:	b21b      	sxth	r3, r3
 8000454:	b29a      	uxth	r2, r3
 8000456:	4b49      	ldr	r3, [pc, #292]	@ (800057c <main+0x188>)
 8000458:	809a      	strh	r2, [r3, #4]

	  // Handle adjustment of the GPIO_WRITE pins
	  if(prev_gpio_write_register != holding_register_database[GPIO_WRITE])
 800045a:	4b48      	ldr	r3, [pc, #288]	@ (800057c <main+0x188>)
 800045c:	88da      	ldrh	r2, [r3, #6]
 800045e:	4b48      	ldr	r3, [pc, #288]	@ (8000580 <main+0x18c>)
 8000460:	881b      	ldrh	r3, [r3, #0]
 8000462:	429a      	cmp	r2, r3
 8000464:	d02e      	beq.n	80004c4 <main+0xd0>
	  {
		  if((prev_gpio_write_register & RELAY_120_MASK) != (holding_register_database[GPIO_WRITE] & RELAY_120_MASK))
 8000466:	4b45      	ldr	r3, [pc, #276]	@ (800057c <main+0x188>)
 8000468:	88da      	ldrh	r2, [r3, #6]
 800046a:	4b45      	ldr	r3, [pc, #276]	@ (8000580 <main+0x18c>)
 800046c:	881b      	ldrh	r3, [r3, #0]
 800046e:	4053      	eors	r3, r2
 8000470:	b29b      	uxth	r3, r3
 8000472:	001a      	movs	r2, r3
 8000474:	2301      	movs	r3, #1
 8000476:	4013      	ands	r3, r2
 8000478:	d00b      	beq.n	8000492 <main+0x9e>
		  {
			  HAL_GPIO_WritePin(RELAY_120_GPIO_Port, RELAY_120_Pin, (holding_register_database[GPIO_WRITE] & RELAY_120_MASK));
 800047a:	4b40      	ldr	r3, [pc, #256]	@ (800057c <main+0x188>)
 800047c:	88db      	ldrh	r3, [r3, #6]
 800047e:	b2db      	uxtb	r3, r3
 8000480:	2201      	movs	r2, #1
 8000482:	4013      	ands	r3, r2
 8000484:	b2da      	uxtb	r2, r3
 8000486:	2380      	movs	r3, #128	@ 0x80
 8000488:	005b      	lsls	r3, r3, #1
 800048a:	483b      	ldr	r0, [pc, #236]	@ (8000578 <main+0x184>)
 800048c:	0019      	movs	r1, r3
 800048e:	f001 fda8 	bl	8001fe2 <HAL_GPIO_WritePin>
		  }
		  if((prev_gpio_write_register & RELAY_480_MASK) != (holding_register_database[GPIO_WRITE] & RELAY_480_MASK))
 8000492:	4b3a      	ldr	r3, [pc, #232]	@ (800057c <main+0x188>)
 8000494:	88da      	ldrh	r2, [r3, #6]
 8000496:	4b3a      	ldr	r3, [pc, #232]	@ (8000580 <main+0x18c>)
 8000498:	881b      	ldrh	r3, [r3, #0]
 800049a:	4053      	eors	r3, r2
 800049c:	b29b      	uxth	r3, r3
 800049e:	001a      	movs	r2, r3
 80004a0:	2302      	movs	r3, #2
 80004a2:	4013      	ands	r3, r2
 80004a4:	d00a      	beq.n	80004bc <main+0xc8>
		  {
			  HAL_GPIO_WritePin(RELAY_480_GPIO_Port, RELAY_480_Pin, (holding_register_database[GPIO_WRITE] & RELAY_480_MASK));
 80004a6:	4b35      	ldr	r3, [pc, #212]	@ (800057c <main+0x188>)
 80004a8:	88db      	ldrh	r3, [r3, #6]
 80004aa:	b2db      	uxtb	r3, r3
 80004ac:	2202      	movs	r2, #2
 80004ae:	4013      	ands	r3, r2
 80004b0:	b2db      	uxtb	r3, r3
 80004b2:	4831      	ldr	r0, [pc, #196]	@ (8000578 <main+0x184>)
 80004b4:	001a      	movs	r2, r3
 80004b6:	2180      	movs	r1, #128	@ 0x80
 80004b8:	f001 fd93 	bl	8001fe2 <HAL_GPIO_WritePin>
		  }
		  prev_gpio_write_register = holding_register_database[GPIO_WRITE];
 80004bc:	4b2f      	ldr	r3, [pc, #188]	@ (800057c <main+0x188>)
 80004be:	88da      	ldrh	r2, [r3, #6]
 80004c0:	4b2f      	ldr	r3, [pc, #188]	@ (8000580 <main+0x18c>)
 80004c2:	801a      	strh	r2, [r3, #0]
	  }


	  if(modbus_rx())
 80004c4:	f000 fcfe 	bl	8000ec4 <modbus_rx>
 80004c8:	1e03      	subs	r3, r0, #0
 80004ca:	d0a6      	beq.n	800041a <main+0x26>
	  {
		  int8_t status = 0;
 80004cc:	1d7b      	adds	r3, r7, #5
 80004ce:	2200      	movs	r2, #0
 80004d0:	701a      	strb	r2, [r3, #0]
		  if(get_rx_buffer(0) == holding_register_database[0]) // Check Slave ID
 80004d2:	2000      	movs	r0, #0
 80004d4:	f000 fa62 	bl	800099c <get_rx_buffer>
 80004d8:	0003      	movs	r3, r0
 80004da:	001a      	movs	r2, r3
 80004dc:	4b27      	ldr	r3, [pc, #156]	@ (800057c <main+0x188>)
 80004de:	881b      	ldrh	r3, [r3, #0]
 80004e0:	429a      	cmp	r2, r3
 80004e2:	d11b      	bne.n	800051c <main+0x128>
		  {
			  switch(get_rx_buffer(1))
 80004e4:	2001      	movs	r0, #1
 80004e6:	f000 fa59 	bl	800099c <get_rx_buffer>
 80004ea:	0003      	movs	r3, r0
 80004ec:	2b03      	cmp	r3, #3
 80004ee:	d002      	beq.n	80004f6 <main+0x102>
 80004f0:	2b10      	cmp	r3, #16
 80004f2:	d006      	beq.n	8000502 <main+0x10e>
 80004f4:	e00b      	b.n	800050e <main+0x11a>
			  {
				  case 0x03:
				  {
					  // Return holding registers
					  status = return_holding_registers();
 80004f6:	1d7c      	adds	r4, r7, #5
 80004f8:	f000 fa88 	bl	8000a0c <return_holding_registers>
 80004fc:	0003      	movs	r3, r0
 80004fe:	7023      	strb	r3, [r4, #0]
					  break;
 8000500:	e034      	b.n	800056c <main+0x178>
				  }
				  case 0x10:
				  {
					  // Write holding registers
					  status = edit_multiple_registers();
 8000502:	1d7c      	adds	r4, r7, #5
 8000504:	f000 fb1e 	bl	8000b44 <edit_multiple_registers>
 8000508:	0003      	movs	r3, r0
 800050a:	7023      	strb	r3, [r4, #0]
					  break;
 800050c:	e02e      	b.n	800056c <main+0x178>
				  }
				  default:
				  {
					  status = modbus_exception(MB_ILLEGAL_FUNCTION);
 800050e:	1d7c      	adds	r4, r7, #5
 8000510:	2004      	movs	r0, #4
 8000512:	f000 fc05 	bl	8000d20 <modbus_exception>
 8000516:	0003      	movs	r3, r0
 8000518:	7023      	strb	r3, [r4, #0]
					  break;
 800051a:	e027      	b.n	800056c <main+0x178>
			  {
				  // log error in a queue
			  }
		  }
		  // Special case where you retrieve the modbus ID
		  else if((get_rx_buffer(0) == 0xFF) && // modbus_id = 0xFF = 255
 800051c:	2000      	movs	r0, #0
 800051e:	f000 fa3d 	bl	800099c <get_rx_buffer>
 8000522:	0003      	movs	r3, r0
 8000524:	2bff      	cmp	r3, #255	@ 0xff
 8000526:	d121      	bne.n	800056c <main+0x178>
			(get_rx_buffer(1) == 0x03) && // Function code = read_holding_registers
 8000528:	2001      	movs	r0, #1
 800052a:	f000 fa37 	bl	800099c <get_rx_buffer>
 800052e:	0003      	movs	r3, r0
		  else if((get_rx_buffer(0) == 0xFF) && // modbus_id = 0xFF = 255
 8000530:	2b03      	cmp	r3, #3
 8000532:	d11b      	bne.n	800056c <main+0x178>
			(((get_rx_buffer(2) << 8) | get_rx_buffer(3)) == 0x00) && // Address to read = 0
 8000534:	2002      	movs	r0, #2
 8000536:	f000 fa31 	bl	800099c <get_rx_buffer>
 800053a:	0003      	movs	r3, r0
 800053c:	021c      	lsls	r4, r3, #8
 800053e:	2003      	movs	r0, #3
 8000540:	f000 fa2c 	bl	800099c <get_rx_buffer>
 8000544:	0003      	movs	r3, r0
 8000546:	4323      	orrs	r3, r4
			(get_rx_buffer(1) == 0x03) && // Function code = read_holding_registers
 8000548:	d110      	bne.n	800056c <main+0x178>
			(((get_rx_buffer(4) << 8) | get_rx_buffer(5)) == 1)) // # of registers to read = 1
 800054a:	2004      	movs	r0, #4
 800054c:	f000 fa26 	bl	800099c <get_rx_buffer>
 8000550:	0003      	movs	r3, r0
 8000552:	021c      	lsls	r4, r3, #8
 8000554:	2005      	movs	r0, #5
 8000556:	f000 fa21 	bl	800099c <get_rx_buffer>
 800055a:	0003      	movs	r3, r0
 800055c:	4323      	orrs	r3, r4
			(((get_rx_buffer(2) << 8) | get_rx_buffer(3)) == 0x00) && // Address to read = 0
 800055e:	2b01      	cmp	r3, #1
 8000560:	d104      	bne.n	800056c <main+0x178>
		  {

			  status = return_holding_registers();
 8000562:	1d7c      	adds	r4, r7, #5
 8000564:	f000 fa52 	bl	8000a0c <return_holding_registers>
 8000568:	0003      	movs	r3, r0
 800056a:	7023      	strb	r3, [r4, #0]
			  if(status != 0)
			  {
				  // log error in a queue
			  }
		  }
		  status = modbus_set_rx();
 800056c:	1d7c      	adds	r4, r7, #5
 800056e:	f000 fcbf 	bl	8000ef0 <modbus_set_rx>
 8000572:	0003      	movs	r3, r0
 8000574:	7023      	strb	r3, [r4, #0]
  {
 8000576:	e750      	b.n	800041a <main+0x26>
 8000578:	50000400 	.word	0x50000400
 800057c:	20000000 	.word	0x20000000
 8000580:	20000124 	.word	0x20000124

08000584 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000584:	b590      	push	{r4, r7, lr}
 8000586:	b08f      	sub	sp, #60	@ 0x3c
 8000588:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058a:	2418      	movs	r4, #24
 800058c:	193b      	adds	r3, r7, r4
 800058e:	0018      	movs	r0, r3
 8000590:	2320      	movs	r3, #32
 8000592:	001a      	movs	r2, r3
 8000594:	2100      	movs	r1, #0
 8000596:	f004 f961 	bl	800485c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800059a:	1d3b      	adds	r3, r7, #4
 800059c:	0018      	movs	r0, r3
 800059e:	2314      	movs	r3, #20
 80005a0:	001a      	movs	r2, r3
 80005a2:	2100      	movs	r1, #0
 80005a4:	f004 f95a 	bl	800485c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005a8:	193b      	adds	r3, r7, r4
 80005aa:	2201      	movs	r2, #1
 80005ac:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005ae:	193b      	adds	r3, r7, r4
 80005b0:	2280      	movs	r2, #128	@ 0x80
 80005b2:	0252      	lsls	r2, r2, #9
 80005b4:	605a      	str	r2, [r3, #4]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b6:	193b      	adds	r3, r7, r4
 80005b8:	0018      	movs	r0, r3
 80005ba:	f001 fd2f 	bl	800201c <HAL_RCC_OscConfig>
 80005be:	1e03      	subs	r3, r0, #0
 80005c0:	d001      	beq.n	80005c6 <SystemClock_Config+0x42>
  {
    Error_Handler();
 80005c2:	f000 f8f9 	bl	80007b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c6:	1d3b      	adds	r3, r7, #4
 80005c8:	2207      	movs	r2, #7
 80005ca:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80005cc:	1d3b      	adds	r3, r7, #4
 80005ce:	2201      	movs	r2, #1
 80005d0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80005d2:	1d3b      	adds	r3, r7, #4
 80005d4:	2200      	movs	r2, #0
 80005d6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80005d8:	1d3b      	adds	r3, r7, #4
 80005da:	2200      	movs	r2, #0
 80005dc:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80005de:	1d3b      	adds	r3, r7, #4
 80005e0:	2200      	movs	r2, #0
 80005e2:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005e4:	1d3b      	adds	r3, r7, #4
 80005e6:	2100      	movs	r1, #0
 80005e8:	0018      	movs	r0, r3
 80005ea:	f001 ff3d 	bl	8002468 <HAL_RCC_ClockConfig>
 80005ee:	1e03      	subs	r3, r0, #0
 80005f0:	d001      	beq.n	80005f6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80005f2:	f000 f8e1 	bl	80007b8 <Error_Handler>
  }
}
 80005f6:	46c0      	nop			@ (mov r8, r8)
 80005f8:	46bd      	mov	sp, r7
 80005fa:	b00f      	add	sp, #60	@ 0x3c
 80005fc:	bd90      	pop	{r4, r7, pc}
	...

08000600 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000604:	4b24      	ldr	r3, [pc, #144]	@ (8000698 <MX_USART1_UART_Init+0x98>)
 8000606:	4a25      	ldr	r2, [pc, #148]	@ (800069c <MX_USART1_UART_Init+0x9c>)
 8000608:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800060a:	4b23      	ldr	r3, [pc, #140]	@ (8000698 <MX_USART1_UART_Init+0x98>)
 800060c:	2296      	movs	r2, #150	@ 0x96
 800060e:	0192      	lsls	r2, r2, #6
 8000610:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000612:	4b21      	ldr	r3, [pc, #132]	@ (8000698 <MX_USART1_UART_Init+0x98>)
 8000614:	2200      	movs	r2, #0
 8000616:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000618:	4b1f      	ldr	r3, [pc, #124]	@ (8000698 <MX_USART1_UART_Init+0x98>)
 800061a:	2200      	movs	r2, #0
 800061c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800061e:	4b1e      	ldr	r3, [pc, #120]	@ (8000698 <MX_USART1_UART_Init+0x98>)
 8000620:	2200      	movs	r2, #0
 8000622:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000624:	4b1c      	ldr	r3, [pc, #112]	@ (8000698 <MX_USART1_UART_Init+0x98>)
 8000626:	220c      	movs	r2, #12
 8000628:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800062a:	4b1b      	ldr	r3, [pc, #108]	@ (8000698 <MX_USART1_UART_Init+0x98>)
 800062c:	2200      	movs	r2, #0
 800062e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000630:	4b19      	ldr	r3, [pc, #100]	@ (8000698 <MX_USART1_UART_Init+0x98>)
 8000632:	2200      	movs	r2, #0
 8000634:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000636:	4b18      	ldr	r3, [pc, #96]	@ (8000698 <MX_USART1_UART_Init+0x98>)
 8000638:	2200      	movs	r2, #0
 800063a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800063c:	4b16      	ldr	r3, [pc, #88]	@ (8000698 <MX_USART1_UART_Init+0x98>)
 800063e:	2200      	movs	r2, #0
 8000640:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000642:	4b15      	ldr	r3, [pc, #84]	@ (8000698 <MX_USART1_UART_Init+0x98>)
 8000644:	2200      	movs	r2, #0
 8000646:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RS485Ex_Init(&huart1, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8000648:	4813      	ldr	r0, [pc, #76]	@ (8000698 <MX_USART1_UART_Init+0x98>)
 800064a:	2300      	movs	r3, #0
 800064c:	2200      	movs	r2, #0
 800064e:	2100      	movs	r1, #0
 8000650:	f003 fef8 	bl	8004444 <HAL_RS485Ex_Init>
 8000654:	1e03      	subs	r3, r0, #0
 8000656:	d001      	beq.n	800065c <MX_USART1_UART_Init+0x5c>
  {
    Error_Handler();
 8000658:	f000 f8ae 	bl	80007b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800065c:	4b0e      	ldr	r3, [pc, #56]	@ (8000698 <MX_USART1_UART_Init+0x98>)
 800065e:	2100      	movs	r1, #0
 8000660:	0018      	movs	r0, r3
 8000662:	f003 ffb3 	bl	80045cc <HAL_UARTEx_SetTxFifoThreshold>
 8000666:	1e03      	subs	r3, r0, #0
 8000668:	d001      	beq.n	800066e <MX_USART1_UART_Init+0x6e>
  {
    Error_Handler();
 800066a:	f000 f8a5 	bl	80007b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800066e:	4b0a      	ldr	r3, [pc, #40]	@ (8000698 <MX_USART1_UART_Init+0x98>)
 8000670:	2100      	movs	r1, #0
 8000672:	0018      	movs	r0, r3
 8000674:	f003 ffea 	bl	800464c <HAL_UARTEx_SetRxFifoThreshold>
 8000678:	1e03      	subs	r3, r0, #0
 800067a:	d001      	beq.n	8000680 <MX_USART1_UART_Init+0x80>
  {
    Error_Handler();
 800067c:	f000 f89c 	bl	80007b8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000680:	4b05      	ldr	r3, [pc, #20]	@ (8000698 <MX_USART1_UART_Init+0x98>)
 8000682:	0018      	movs	r0, r3
 8000684:	f003 ff68 	bl	8004558 <HAL_UARTEx_DisableFifoMode>
 8000688:	1e03      	subs	r3, r0, #0
 800068a:	d001      	beq.n	8000690 <MX_USART1_UART_Init+0x90>
  {
    Error_Handler();
 800068c:	f000 f894 	bl	80007b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000690:	46c0      	nop			@ (mov r8, r8)
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	46c0      	nop			@ (mov r8, r8)
 8000698:	20000034 	.word	0x20000034
 800069c:	40013800 	.word	0x40013800

080006a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006a6:	4b0c      	ldr	r3, [pc, #48]	@ (80006d8 <MX_DMA_Init+0x38>)
 80006a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80006aa:	4b0b      	ldr	r3, [pc, #44]	@ (80006d8 <MX_DMA_Init+0x38>)
 80006ac:	2101      	movs	r1, #1
 80006ae:	430a      	orrs	r2, r1
 80006b0:	639a      	str	r2, [r3, #56]	@ 0x38
 80006b2:	4b09      	ldr	r3, [pc, #36]	@ (80006d8 <MX_DMA_Init+0x38>)
 80006b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80006b6:	2201      	movs	r2, #1
 80006b8:	4013      	ands	r3, r2
 80006ba:	607b      	str	r3, [r7, #4]
 80006bc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80006be:	2200      	movs	r2, #0
 80006c0:	2100      	movs	r1, #0
 80006c2:	2009      	movs	r0, #9
 80006c4:	f000 ff9c 	bl	8001600 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80006c8:	2009      	movs	r0, #9
 80006ca:	f000 ffae 	bl	800162a <HAL_NVIC_EnableIRQ>

}
 80006ce:	46c0      	nop			@ (mov r8, r8)
 80006d0:	46bd      	mov	sp, r7
 80006d2:	b002      	add	sp, #8
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	46c0      	nop			@ (mov r8, r8)
 80006d8:	40021000 	.word	0x40021000

080006dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006dc:	b590      	push	{r4, r7, lr}
 80006de:	b08b      	sub	sp, #44	@ 0x2c
 80006e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e2:	2414      	movs	r4, #20
 80006e4:	193b      	adds	r3, r7, r4
 80006e6:	0018      	movs	r0, r3
 80006e8:	2314      	movs	r3, #20
 80006ea:	001a      	movs	r2, r3
 80006ec:	2100      	movs	r1, #0
 80006ee:	f004 f8b5 	bl	800485c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006f2:	4b2f      	ldr	r3, [pc, #188]	@ (80007b0 <MX_GPIO_Init+0xd4>)
 80006f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80006f6:	4b2e      	ldr	r3, [pc, #184]	@ (80007b0 <MX_GPIO_Init+0xd4>)
 80006f8:	2104      	movs	r1, #4
 80006fa:	430a      	orrs	r2, r1
 80006fc:	635a      	str	r2, [r3, #52]	@ 0x34
 80006fe:	4b2c      	ldr	r3, [pc, #176]	@ (80007b0 <MX_GPIO_Init+0xd4>)
 8000700:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000702:	2204      	movs	r2, #4
 8000704:	4013      	ands	r3, r2
 8000706:	613b      	str	r3, [r7, #16]
 8000708:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800070a:	4b29      	ldr	r3, [pc, #164]	@ (80007b0 <MX_GPIO_Init+0xd4>)
 800070c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800070e:	4b28      	ldr	r3, [pc, #160]	@ (80007b0 <MX_GPIO_Init+0xd4>)
 8000710:	2120      	movs	r1, #32
 8000712:	430a      	orrs	r2, r1
 8000714:	635a      	str	r2, [r3, #52]	@ 0x34
 8000716:	4b26      	ldr	r3, [pc, #152]	@ (80007b0 <MX_GPIO_Init+0xd4>)
 8000718:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800071a:	2220      	movs	r2, #32
 800071c:	4013      	ands	r3, r2
 800071e:	60fb      	str	r3, [r7, #12]
 8000720:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000722:	4b23      	ldr	r3, [pc, #140]	@ (80007b0 <MX_GPIO_Init+0xd4>)
 8000724:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000726:	4b22      	ldr	r3, [pc, #136]	@ (80007b0 <MX_GPIO_Init+0xd4>)
 8000728:	2102      	movs	r1, #2
 800072a:	430a      	orrs	r2, r1
 800072c:	635a      	str	r2, [r3, #52]	@ 0x34
 800072e:	4b20      	ldr	r3, [pc, #128]	@ (80007b0 <MX_GPIO_Init+0xd4>)
 8000730:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000732:	2202      	movs	r2, #2
 8000734:	4013      	ands	r3, r2
 8000736:	60bb      	str	r3, [r7, #8]
 8000738:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800073a:	4b1d      	ldr	r3, [pc, #116]	@ (80007b0 <MX_GPIO_Init+0xd4>)
 800073c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800073e:	4b1c      	ldr	r3, [pc, #112]	@ (80007b0 <MX_GPIO_Init+0xd4>)
 8000740:	2101      	movs	r1, #1
 8000742:	430a      	orrs	r2, r1
 8000744:	635a      	str	r2, [r3, #52]	@ 0x34
 8000746:	4b1a      	ldr	r3, [pc, #104]	@ (80007b0 <MX_GPIO_Init+0xd4>)
 8000748:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800074a:	2201      	movs	r2, #1
 800074c:	4013      	ands	r3, r2
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RELAY_480_Pin|RELAY_120_Pin, GPIO_PIN_RESET);
 8000752:	23c0      	movs	r3, #192	@ 0xc0
 8000754:	005b      	lsls	r3, r3, #1
 8000756:	4817      	ldr	r0, [pc, #92]	@ (80007b4 <MX_GPIO_Init+0xd8>)
 8000758:	2200      	movs	r2, #0
 800075a:	0019      	movs	r1, r3
 800075c:	f001 fc41 	bl	8001fe2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SENSE_120_Pin ESTOP_SENSE_Pin */
  GPIO_InitStruct.Pin = SENSE_120_Pin|ESTOP_SENSE_Pin;
 8000760:	193b      	adds	r3, r7, r4
 8000762:	2282      	movs	r2, #130	@ 0x82
 8000764:	0212      	lsls	r2, r2, #8
 8000766:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000768:	193b      	adds	r3, r7, r4
 800076a:	2200      	movs	r2, #0
 800076c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076e:	193b      	adds	r3, r7, r4
 8000770:	2200      	movs	r2, #0
 8000772:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000774:	193b      	adds	r3, r7, r4
 8000776:	4a0f      	ldr	r2, [pc, #60]	@ (80007b4 <MX_GPIO_Init+0xd8>)
 8000778:	0019      	movs	r1, r3
 800077a:	0010      	movs	r0, r2
 800077c:	f001 faa2 	bl	8001cc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RELAY_480_Pin RELAY_120_Pin */
  GPIO_InitStruct.Pin = RELAY_480_Pin|RELAY_120_Pin;
 8000780:	0021      	movs	r1, r4
 8000782:	187b      	adds	r3, r7, r1
 8000784:	22c0      	movs	r2, #192	@ 0xc0
 8000786:	0052      	lsls	r2, r2, #1
 8000788:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800078a:	187b      	adds	r3, r7, r1
 800078c:	2201      	movs	r2, #1
 800078e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000790:	187b      	adds	r3, r7, r1
 8000792:	2200      	movs	r2, #0
 8000794:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000796:	187b      	adds	r3, r7, r1
 8000798:	2200      	movs	r2, #0
 800079a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800079c:	187b      	adds	r3, r7, r1
 800079e:	4a05      	ldr	r2, [pc, #20]	@ (80007b4 <MX_GPIO_Init+0xd8>)
 80007a0:	0019      	movs	r1, r3
 80007a2:	0010      	movs	r0, r2
 80007a4:	f001 fa8e 	bl	8001cc4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007a8:	46c0      	nop			@ (mov r8, r8)
 80007aa:	46bd      	mov	sp, r7
 80007ac:	b00b      	add	sp, #44	@ 0x2c
 80007ae:	bd90      	pop	{r4, r7, pc}
 80007b0:	40021000 	.word	0x40021000
 80007b4:	50000400 	.word	0x50000400

080007b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007bc:	b672      	cpsid	i
}
 80007be:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007c0:	46c0      	nop			@ (mov r8, r8)
 80007c2:	e7fd      	b.n	80007c0 <Error_Handler+0x8>

080007c4 <HAL_UARTEx_RxEventCallback>:

/*
 * Modbus reception handler function
 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80007c4:	b590      	push	{r4, r7, lr}
 80007c6:	b085      	sub	sp, #20
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
 80007cc:	000a      	movs	r2, r1
 80007ce:	1cbb      	adds	r3, r7, #2
 80007d0:	801a      	strh	r2, [r3, #0]
	if(huart->Instance == USART1)
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	4a45      	ldr	r2, [pc, #276]	@ (80008ec <HAL_UARTEx_RxEventCallback+0x128>)
 80007d8:	4293      	cmp	r3, r2
 80007da:	d000      	beq.n	80007de <HAL_UARTEx_RxEventCallback+0x1a>
 80007dc:	e081      	b.n	80008e2 <HAL_UARTEx_RxEventCallback+0x11e>
	{
		chunk_start_i = chunk_end_i;  // Update the last position before copying new data
 80007de:	4b44      	ldr	r3, [pc, #272]	@ (80008f0 <HAL_UARTEx_RxEventCallback+0x12c>)
 80007e0:	881b      	ldrh	r3, [r3, #0]
 80007e2:	b29a      	uxth	r2, r3
 80007e4:	4b43      	ldr	r3, [pc, #268]	@ (80008f4 <HAL_UARTEx_RxEventCallback+0x130>)
 80007e6:	801a      	strh	r2, [r3, #0]

		/* If the data in large and it is about to exceed the buffer size, we have to route it to the start of the buffer
		 * This is to maintain the circular buffer
		 * The old data in the main buffer will be overlapped
		 */
		if (chunk_start_i + Size > MODBUS_RX_BUFFER_SIZE)  // If the current position + new data size is greater than the main buffer
 80007e8:	4b42      	ldr	r3, [pc, #264]	@ (80008f4 <HAL_UARTEx_RxEventCallback+0x130>)
 80007ea:	881b      	ldrh	r3, [r3, #0]
 80007ec:	b29b      	uxth	r3, r3
 80007ee:	001a      	movs	r2, r3
 80007f0:	1cbb      	adds	r3, r7, #2
 80007f2:	881b      	ldrh	r3, [r3, #0]
 80007f4:	18d2      	adds	r2, r2, r3
 80007f6:	2380      	movs	r3, #128	@ 0x80
 80007f8:	005b      	lsls	r3, r3, #1
 80007fa:	429a      	cmp	r2, r3
 80007fc:	dd29      	ble.n	8000852 <HAL_UARTEx_RxEventCallback+0x8e>
		{
			uint16_t datatocopy = MODBUS_RX_BUFFER_SIZE - chunk_start_i;  // find out how much space is left in the main buffer
 80007fe:	4b3d      	ldr	r3, [pc, #244]	@ (80008f4 <HAL_UARTEx_RxEventCallback+0x130>)
 8000800:	881b      	ldrh	r3, [r3, #0]
 8000802:	b29a      	uxth	r2, r3
 8000804:	240e      	movs	r4, #14
 8000806:	193b      	adds	r3, r7, r4
 8000808:	2180      	movs	r1, #128	@ 0x80
 800080a:	0049      	lsls	r1, r1, #1
 800080c:	1a8a      	subs	r2, r1, r2
 800080e:	801a      	strh	r2, [r3, #0]
			memcpy ((uint8_t *)(modbus_rx_buffer + chunk_start_i), rx_chunk, datatocopy);  // copy data in that remaining space
 8000810:	4b38      	ldr	r3, [pc, #224]	@ (80008f4 <HAL_UARTEx_RxEventCallback+0x130>)
 8000812:	881b      	ldrh	r3, [r3, #0]
 8000814:	b29b      	uxth	r3, r3
 8000816:	001a      	movs	r2, r3
 8000818:	4b37      	ldr	r3, [pc, #220]	@ (80008f8 <HAL_UARTEx_RxEventCallback+0x134>)
 800081a:	18d0      	adds	r0, r2, r3
 800081c:	193b      	adds	r3, r7, r4
 800081e:	881a      	ldrh	r2, [r3, #0]
 8000820:	4b36      	ldr	r3, [pc, #216]	@ (80008fc <HAL_UARTEx_RxEventCallback+0x138>)
 8000822:	0019      	movs	r1, r3
 8000824:	f004 f846 	bl	80048b4 <memcpy>

			chunk_end_i = (Size - datatocopy);  // update the position
 8000828:	1cba      	adds	r2, r7, #2
 800082a:	193b      	adds	r3, r7, r4
 800082c:	8812      	ldrh	r2, [r2, #0]
 800082e:	881b      	ldrh	r3, [r3, #0]
 8000830:	1ad3      	subs	r3, r2, r3
 8000832:	b29a      	uxth	r2, r3
 8000834:	4b2e      	ldr	r3, [pc, #184]	@ (80008f0 <HAL_UARTEx_RxEventCallback+0x12c>)
 8000836:	801a      	strh	r2, [r3, #0]
			memcpy ((uint8_t *)modbus_rx_buffer, (uint8_t *)(rx_chunk + datatocopy), chunk_end_i);  // copy the remaining data
 8000838:	193b      	adds	r3, r7, r4
 800083a:	881a      	ldrh	r2, [r3, #0]
 800083c:	4b2f      	ldr	r3, [pc, #188]	@ (80008fc <HAL_UARTEx_RxEventCallback+0x138>)
 800083e:	18d1      	adds	r1, r2, r3
 8000840:	4b2b      	ldr	r3, [pc, #172]	@ (80008f0 <HAL_UARTEx_RxEventCallback+0x12c>)
 8000842:	881b      	ldrh	r3, [r3, #0]
 8000844:	b29b      	uxth	r3, r3
 8000846:	001a      	movs	r2, r3
 8000848:	4b2b      	ldr	r3, [pc, #172]	@ (80008f8 <HAL_UARTEx_RxEventCallback+0x134>)
 800084a:	0018      	movs	r0, r3
 800084c:	f004 f832 	bl	80048b4 <memcpy>
 8000850:	e014      	b.n	800087c <HAL_UARTEx_RxEventCallback+0xb8>
		/* if the current position + new data size is less than the main buffer
		 * we will simply copy the data into the buffer and update the position
		 */
		else
		{
			memcpy ((uint8_t *)(modbus_rx_buffer + chunk_start_i), rx_chunk, Size);
 8000852:	4b28      	ldr	r3, [pc, #160]	@ (80008f4 <HAL_UARTEx_RxEventCallback+0x130>)
 8000854:	881b      	ldrh	r3, [r3, #0]
 8000856:	b29b      	uxth	r3, r3
 8000858:	001a      	movs	r2, r3
 800085a:	4b27      	ldr	r3, [pc, #156]	@ (80008f8 <HAL_UARTEx_RxEventCallback+0x134>)
 800085c:	18d0      	adds	r0, r2, r3
 800085e:	1cbb      	adds	r3, r7, #2
 8000860:	881a      	ldrh	r2, [r3, #0]
 8000862:	4b26      	ldr	r3, [pc, #152]	@ (80008fc <HAL_UARTEx_RxEventCallback+0x138>)
 8000864:	0019      	movs	r1, r3
 8000866:	f004 f825 	bl	80048b4 <memcpy>
			chunk_end_i = Size + chunk_start_i;
 800086a:	4b22      	ldr	r3, [pc, #136]	@ (80008f4 <HAL_UARTEx_RxEventCallback+0x130>)
 800086c:	881b      	ldrh	r3, [r3, #0]
 800086e:	b29a      	uxth	r2, r3
 8000870:	1cbb      	adds	r3, r7, #2
 8000872:	881b      	ldrh	r3, [r3, #0]
 8000874:	18d3      	adds	r3, r2, r3
 8000876:	b29a      	uxth	r2, r3
 8000878:	4b1d      	ldr	r3, [pc, #116]	@ (80008f0 <HAL_UARTEx_RxEventCallback+0x12c>)
 800087a:	801a      	strh	r2, [r3, #0]
		}

		if(modbus_header)
 800087c:	4b20      	ldr	r3, [pc, #128]	@ (8000900 <HAL_UARTEx_RxEventCallback+0x13c>)
 800087e:	881b      	ldrh	r3, [r3, #0]
 8000880:	b29b      	uxth	r3, r3
 8000882:	2b00      	cmp	r3, #0
 8000884:	d027      	beq.n	80008d6 <HAL_UARTEx_RxEventCallback+0x112>
		{
			// Log the time for chunk miss error handling
			chunk_time = HAL_GetTick();
 8000886:	f000 fde1 	bl	800144c <HAL_GetTick>
 800088a:	0002      	movs	r2, r0
 800088c:	4b1d      	ldr	r3, [pc, #116]	@ (8000904 <HAL_UARTEx_RxEventCallback+0x140>)
 800088e:	601a      	str	r2, [r3, #0]

			start_index = chunk_start_i;
 8000890:	4b18      	ldr	r3, [pc, #96]	@ (80008f4 <HAL_UARTEx_RxEventCallback+0x130>)
 8000892:	881b      	ldrh	r3, [r3, #0]
 8000894:	b29a      	uxth	r2, r3
 8000896:	4b1c      	ldr	r3, [pc, #112]	@ (8000908 <HAL_UARTEx_RxEventCallback+0x144>)
 8000898:	801a      	strh	r2, [r3, #0]
			modbus_header = 0;
 800089a:	4b19      	ldr	r3, [pc, #100]	@ (8000900 <HAL_UARTEx_RxEventCallback+0x13c>)
 800089c:	2200      	movs	r2, #0
 800089e:	801a      	strh	r2, [r3, #0]

			// Setup the DMA to receive the # message bytes + crc + 1 in the event that the # bytes is in the message
			HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rx_chunk, (uint16_t)(((rx_chunk[4] << 8) | rx_chunk[5])*2 + 2 + 1));
 80008a0:	4b16      	ldr	r3, [pc, #88]	@ (80008fc <HAL_UARTEx_RxEventCallback+0x138>)
 80008a2:	791b      	ldrb	r3, [r3, #4]
 80008a4:	021b      	lsls	r3, r3, #8
 80008a6:	4a15      	ldr	r2, [pc, #84]	@ (80008fc <HAL_UARTEx_RxEventCallback+0x138>)
 80008a8:	7952      	ldrb	r2, [r2, #5]
 80008aa:	4313      	orrs	r3, r2
 80008ac:	b29b      	uxth	r3, r3
 80008ae:	3301      	adds	r3, #1
 80008b0:	b29b      	uxth	r3, r3
 80008b2:	18db      	adds	r3, r3, r3
 80008b4:	b29b      	uxth	r3, r3
 80008b6:	3301      	adds	r3, #1
 80008b8:	b29a      	uxth	r2, r3
 80008ba:	4910      	ldr	r1, [pc, #64]	@ (80008fc <HAL_UARTEx_RxEventCallback+0x138>)
 80008bc:	4b13      	ldr	r3, [pc, #76]	@ (800090c <HAL_UARTEx_RxEventCallback+0x148>)
 80008be:	0018      	movs	r0, r3
 80008c0:	f003 ff06 	bl	80046d0 <HAL_UARTEx_ReceiveToIdle_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 80008c4:	4b12      	ldr	r3, [pc, #72]	@ (8000910 <HAL_UARTEx_RxEventCallback+0x14c>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	681a      	ldr	r2, [r3, #0]
 80008ca:	4b11      	ldr	r3, [pc, #68]	@ (8000910 <HAL_UARTEx_RxEventCallback+0x14c>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	2104      	movs	r1, #4
 80008d0:	438a      	bics	r2, r1
 80008d2:	601a      	str	r2, [r3, #0]
			 */
			modbus_header = 1;
			rx_int = 1;
		}
	}
}
 80008d4:	e005      	b.n	80008e2 <HAL_UARTEx_RxEventCallback+0x11e>
			modbus_header = 1;
 80008d6:	4b0a      	ldr	r3, [pc, #40]	@ (8000900 <HAL_UARTEx_RxEventCallback+0x13c>)
 80008d8:	2201      	movs	r2, #1
 80008da:	801a      	strh	r2, [r3, #0]
			rx_int = 1;
 80008dc:	4b0d      	ldr	r3, [pc, #52]	@ (8000914 <HAL_UARTEx_RxEventCallback+0x150>)
 80008de:	2201      	movs	r2, #1
 80008e0:	701a      	strb	r2, [r3, #0]
}
 80008e2:	46c0      	nop			@ (mov r8, r8)
 80008e4:	46bd      	mov	sp, r7
 80008e6:	b005      	add	sp, #20
 80008e8:	bd90      	pop	{r4, r7, pc}
 80008ea:	46c0      	nop			@ (mov r8, r8)
 80008ec:	40013800 	.word	0x40013800
 80008f0:	20000430 	.word	0x20000430
 80008f4:	2000042e 	.word	0x2000042e
 80008f8:	20000128 	.word	0x20000128
 80008fc:	20000328 	.word	0x20000328
 8000900:	20000008 	.word	0x20000008
 8000904:	20000428 	.word	0x20000428
 8000908:	2000042c 	.word	0x2000042c
 800090c:	20000034 	.word	0x20000034
 8000910:	200000c8 	.word	0x200000c8
 8000914:	20000432 	.word	0x20000432

08000918 <HAL_UART_TxCpltCallback>:

// Transmit Interrupt Handler
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
	tx_int = 1;
 8000920:	4b03      	ldr	r3, [pc, #12]	@ (8000930 <HAL_UART_TxCpltCallback+0x18>)
 8000922:	2201      	movs	r2, #1
 8000924:	701a      	strb	r2, [r3, #0]
}
 8000926:	46c0      	nop			@ (mov r8, r8)
 8000928:	46bd      	mov	sp, r7
 800092a:	b002      	add	sp, #8
 800092c:	bd80      	pop	{r7, pc}
 800092e:	46c0      	nop			@ (mov r8, r8)
 8000930:	20000433 	.word	0x20000433

08000934 <handle_chunk_miss>:


// Chunk Miss Error Handling Function
int8_t handle_chunk_miss()
{
 8000934:	b590      	push	{r4, r7, lr}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
	if(modbus_header == 0)
 800093a:	4b15      	ldr	r3, [pc, #84]	@ (8000990 <handle_chunk_miss+0x5c>)
 800093c:	881b      	ldrh	r3, [r3, #0]
 800093e:	b29b      	uxth	r3, r3
 8000940:	2b00      	cmp	r3, #0
 8000942:	d120      	bne.n	8000986 <handle_chunk_miss+0x52>
	{
		if(HAL_GetTick() - chunk_time > 10)
 8000944:	f000 fd82 	bl	800144c <HAL_GetTick>
 8000948:	0002      	movs	r2, r0
 800094a:	4b12      	ldr	r3, [pc, #72]	@ (8000994 <handle_chunk_miss+0x60>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	1ad3      	subs	r3, r2, r3
 8000950:	2b0a      	cmp	r3, #10
 8000952:	d918      	bls.n	8000986 <handle_chunk_miss+0x52>
		{
			// TODO: Log the chunk miss as an error
			modbus_header = 1;
 8000954:	4b0e      	ldr	r3, [pc, #56]	@ (8000990 <handle_chunk_miss+0x5c>)
 8000956:	2201      	movs	r2, #1
 8000958:	801a      	strh	r2, [r3, #0]
			int8_t status = HAL_UART_Abort_IT(&huart1);
 800095a:	4b0f      	ldr	r3, [pc, #60]	@ (8000998 <handle_chunk_miss+0x64>)
 800095c:	0018      	movs	r0, r3
 800095e:	f002 f8cd 	bl	8002afc <HAL_UART_Abort_IT>
 8000962:	0003      	movs	r3, r0
 8000964:	001a      	movs	r2, r3
 8000966:	1dfb      	adds	r3, r7, #7
 8000968:	701a      	strb	r2, [r3, #0]
			if(status == HAL_OK)
 800096a:	1dfb      	adds	r3, r7, #7
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	b25b      	sxtb	r3, r3
 8000970:	2b00      	cmp	r3, #0
 8000972:	d104      	bne.n	800097e <handle_chunk_miss+0x4a>
			{
				status = modbus_set_rx();
 8000974:	1dfc      	adds	r4, r7, #7
 8000976:	f000 fabb 	bl	8000ef0 <modbus_set_rx>
 800097a:	0003      	movs	r3, r0
 800097c:	7023      	strb	r3, [r4, #0]
			}
			return status;
 800097e:	1dfb      	adds	r3, r7, #7
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	b25b      	sxtb	r3, r3
 8000984:	e000      	b.n	8000988 <handle_chunk_miss+0x54>
		}
	}
	return HAL_OK;
 8000986:	2300      	movs	r3, #0
}
 8000988:	0018      	movs	r0, r3
 800098a:	46bd      	mov	sp, r7
 800098c:	b003      	add	sp, #12
 800098e:	bd90      	pop	{r4, r7, pc}
 8000990:	20000008 	.word	0x20000008
 8000994:	20000428 	.word	0x20000428
 8000998:	20000034 	.word	0x20000034

0800099c <get_rx_buffer>:

/*
	Modbus get the raw message received through UART
 */
uint8_t get_rx_buffer(uint8_t index)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	0002      	movs	r2, r0
 80009a4:	1dfb      	adds	r3, r7, #7
 80009a6:	701a      	strb	r2, [r3, #0]
	if (index < MODBUS_RX_BUFFER_SIZE - 1)
 80009a8:	1dfb      	adds	r3, r7, #7
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	2bff      	cmp	r3, #255	@ 0xff
 80009ae:	d023      	beq.n	80009f8 <get_rx_buffer+0x5c>
	{
		uint8_t value = ((start_index + index) > (MODBUS_RX_BUFFER_SIZE - 1))?
 80009b0:	4b14      	ldr	r3, [pc, #80]	@ (8000a04 <get_rx_buffer+0x68>)
 80009b2:	881b      	ldrh	r3, [r3, #0]
 80009b4:	b29b      	uxth	r3, r3
 80009b6:	001a      	movs	r2, r3
 80009b8:	1dfb      	adds	r3, r7, #7
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	18d3      	adds	r3, r2, r3
 80009be:	2bff      	cmp	r3, #255	@ 0xff
 80009c0:	dd0b      	ble.n	80009da <get_rx_buffer+0x3e>
				modbus_rx_buffer[(start_index + index) - MODBUS_RX_BUFFER_SIZE] :
 80009c2:	4b10      	ldr	r3, [pc, #64]	@ (8000a04 <get_rx_buffer+0x68>)
 80009c4:	881b      	ldrh	r3, [r3, #0]
 80009c6:	b29b      	uxth	r3, r3
 80009c8:	001a      	movs	r2, r3
 80009ca:	1dfb      	adds	r3, r7, #7
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	18d3      	adds	r3, r2, r3
 80009d0:	3b01      	subs	r3, #1
 80009d2:	3bff      	subs	r3, #255	@ 0xff
		uint8_t value = ((start_index + index) > (MODBUS_RX_BUFFER_SIZE - 1))?
 80009d4:	4a0c      	ldr	r2, [pc, #48]	@ (8000a08 <get_rx_buffer+0x6c>)
 80009d6:	5cd3      	ldrb	r3, [r2, r3]
 80009d8:	e008      	b.n	80009ec <get_rx_buffer+0x50>
				modbus_rx_buffer[start_index + index];
 80009da:	4b0a      	ldr	r3, [pc, #40]	@ (8000a04 <get_rx_buffer+0x68>)
 80009dc:	881b      	ldrh	r3, [r3, #0]
 80009de:	b29b      	uxth	r3, r3
 80009e0:	001a      	movs	r2, r3
 80009e2:	1dfb      	adds	r3, r7, #7
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	18d3      	adds	r3, r2, r3
		uint8_t value = ((start_index + index) > (MODBUS_RX_BUFFER_SIZE - 1))?
 80009e8:	4a07      	ldr	r2, [pc, #28]	@ (8000a08 <get_rx_buffer+0x6c>)
 80009ea:	5cd3      	ldrb	r3, [r2, r3]
 80009ec:	210f      	movs	r1, #15
 80009ee:	187a      	adds	r2, r7, r1
 80009f0:	7013      	strb	r3, [r2, #0]
		return value;
 80009f2:	187b      	adds	r3, r7, r1
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	e000      	b.n	80009fa <get_rx_buffer+0x5e>
	}
	return 0xFF;
 80009f8:	23ff      	movs	r3, #255	@ 0xff
}
 80009fa:	0018      	movs	r0, r3
 80009fc:	46bd      	mov	sp, r7
 80009fe:	b004      	add	sp, #16
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	46c0      	nop			@ (mov r8, r8)
 8000a04:	2000042c 	.word	0x2000042c
 8000a08:	20000128 	.word	0x20000128

08000a0c <return_holding_registers>:

/*
	Modbus Slave Return Multiple holding registers
 */
int8_t return_holding_registers()
{
 8000a0c:	b590      	push	{r4, r7, lr}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
	// Handle Error Checking
	uint16_t first_register_address = (get_rx_buffer(2) << 8) | get_rx_buffer(3);
 8000a12:	2002      	movs	r0, #2
 8000a14:	f7ff ffc2 	bl	800099c <get_rx_buffer>
 8000a18:	0003      	movs	r3, r0
 8000a1a:	021b      	lsls	r3, r3, #8
 8000a1c:	b21c      	sxth	r4, r3
 8000a1e:	2003      	movs	r0, #3
 8000a20:	f7ff ffbc 	bl	800099c <get_rx_buffer>
 8000a24:	0003      	movs	r3, r0
 8000a26:	b21b      	sxth	r3, r3
 8000a28:	4323      	orrs	r3, r4
 8000a2a:	b21a      	sxth	r2, r3
 8000a2c:	1d3b      	adds	r3, r7, #4
 8000a2e:	801a      	strh	r2, [r3, #0]

	// Get the number of registers requested by the master
	uint16_t num_registers = (get_rx_buffer(4) << 8) | get_rx_buffer(5);
 8000a30:	2004      	movs	r0, #4
 8000a32:	f7ff ffb3 	bl	800099c <get_rx_buffer>
 8000a36:	0003      	movs	r3, r0
 8000a38:	021b      	lsls	r3, r3, #8
 8000a3a:	b21c      	sxth	r4, r3
 8000a3c:	2005      	movs	r0, #5
 8000a3e:	f7ff ffad 	bl	800099c <get_rx_buffer>
 8000a42:	0003      	movs	r3, r0
 8000a44:	b21b      	sxth	r3, r3
 8000a46:	4323      	orrs	r3, r4
 8000a48:	b21a      	sxth	r2, r3
 8000a4a:	1cbb      	adds	r3, r7, #2
 8000a4c:	801a      	strh	r2, [r3, #0]

	if(num_registers > RX_BUFFER_SIZE || num_registers < 1) // 125 is the limit according to modbus protocol
 8000a4e:	1cbb      	adds	r3, r7, #2
 8000a50:	881b      	ldrh	r3, [r3, #0]
 8000a52:	2b7d      	cmp	r3, #125	@ 0x7d
 8000a54:	d803      	bhi.n	8000a5e <return_holding_registers+0x52>
 8000a56:	1cbb      	adds	r3, r7, #2
 8000a58:	881b      	ldrh	r3, [r3, #0]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d104      	bne.n	8000a68 <return_holding_registers+0x5c>
	{
		return modbus_exception(MB_ILLEGAL_DATA_VALUE);
 8000a5e:	2006      	movs	r0, #6
 8000a60:	f000 f95e 	bl	8000d20 <modbus_exception>
 8000a64:	0003      	movs	r3, r0
 8000a66:	e065      	b.n	8000b34 <return_holding_registers+0x128>
	}

	uint16_t last_register_address = first_register_address + (num_registers - 1);
 8000a68:	1cba      	adds	r2, r7, #2
 8000a6a:	1d3b      	adds	r3, r7, #4
 8000a6c:	8812      	ldrh	r2, [r2, #0]
 8000a6e:	881b      	ldrh	r3, [r3, #0]
 8000a70:	18d3      	adds	r3, r2, r3
 8000a72:	b29a      	uxth	r2, r3
 8000a74:	003b      	movs	r3, r7
 8000a76:	3a01      	subs	r2, #1
 8000a78:	801a      	strh	r2, [r3, #0]

	if(last_register_address > NUM_HOLDING_REGISTERS)
 8000a7a:	003b      	movs	r3, r7
 8000a7c:	881b      	ldrh	r3, [r3, #0]
 8000a7e:	2b04      	cmp	r3, #4
 8000a80:	d904      	bls.n	8000a8c <return_holding_registers+0x80>
	{
		return modbus_exception(MB_ILLEGAL_DATA_ADDRESS);
 8000a82:	2005      	movs	r0, #5
 8000a84:	f000 f94c 	bl	8000d20 <modbus_exception>
 8000a88:	0003      	movs	r3, r0
 8000a8a:	e053      	b.n	8000b34 <return_holding_registers+0x128>
	}

	// Return register values

	modbus_tx_buffer[0] = get_rx_buffer(0); // Append Slave id
 8000a8c:	2000      	movs	r0, #0
 8000a8e:	f7ff ff85 	bl	800099c <get_rx_buffer>
 8000a92:	0003      	movs	r3, r0
 8000a94:	001a      	movs	r2, r3
 8000a96:	4b29      	ldr	r3, [pc, #164]	@ (8000b3c <return_holding_registers+0x130>)
 8000a98:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[1] = get_rx_buffer(1); // Append Function Code
 8000a9a:	2001      	movs	r0, #1
 8000a9c:	f7ff ff7e 	bl	800099c <get_rx_buffer>
 8000aa0:	0003      	movs	r3, r0
 8000aa2:	001a      	movs	r2, r3
 8000aa4:	4b25      	ldr	r3, [pc, #148]	@ (8000b3c <return_holding_registers+0x130>)
 8000aa6:	705a      	strb	r2, [r3, #1]
	modbus_tx_buffer[2] = num_registers * 2; // Append number of bytes
 8000aa8:	1cbb      	adds	r3, r7, #2
 8000aaa:	881b      	ldrh	r3, [r3, #0]
 8000aac:	b2db      	uxtb	r3, r3
 8000aae:	18db      	adds	r3, r3, r3
 8000ab0:	b2da      	uxtb	r2, r3
 8000ab2:	4b22      	ldr	r3, [pc, #136]	@ (8000b3c <return_holding_registers+0x130>)
 8000ab4:	709a      	strb	r2, [r3, #2]
	uint8_t index = 3;
 8000ab6:	1dfb      	adds	r3, r7, #7
 8000ab8:	2203      	movs	r2, #3
 8000aba:	701a      	strb	r2, [r3, #0]

	// Append the Register Values
	for(uint8_t i = 0; i < num_registers; i++)
 8000abc:	1dbb      	adds	r3, r7, #6
 8000abe:	2200      	movs	r2, #0
 8000ac0:	701a      	strb	r2, [r3, #0]
 8000ac2:	e028      	b.n	8000b16 <return_holding_registers+0x10a>
	{
		modbus_tx_buffer[index++] = high_byte(holding_register_database[first_register_address + i]);
 8000ac4:	1d3b      	adds	r3, r7, #4
 8000ac6:	881a      	ldrh	r2, [r3, #0]
 8000ac8:	1dbb      	adds	r3, r7, #6
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	18d2      	adds	r2, r2, r3
 8000ace:	4b1c      	ldr	r3, [pc, #112]	@ (8000b40 <return_holding_registers+0x134>)
 8000ad0:	0052      	lsls	r2, r2, #1
 8000ad2:	5ad3      	ldrh	r3, [r2, r3]
 8000ad4:	0a1b      	lsrs	r3, r3, #8
 8000ad6:	b299      	uxth	r1, r3
 8000ad8:	1dfb      	adds	r3, r7, #7
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	1dfa      	adds	r2, r7, #7
 8000ade:	1c58      	adds	r0, r3, #1
 8000ae0:	7010      	strb	r0, [r2, #0]
 8000ae2:	001a      	movs	r2, r3
 8000ae4:	b2c9      	uxtb	r1, r1
 8000ae6:	4b15      	ldr	r3, [pc, #84]	@ (8000b3c <return_holding_registers+0x130>)
 8000ae8:	5499      	strb	r1, [r3, r2]
		modbus_tx_buffer[index++] = low_byte(holding_register_database[first_register_address + i]);
 8000aea:	1d3b      	adds	r3, r7, #4
 8000aec:	881a      	ldrh	r2, [r3, #0]
 8000aee:	1dbb      	adds	r3, r7, #6
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	18d2      	adds	r2, r2, r3
 8000af4:	4b12      	ldr	r3, [pc, #72]	@ (8000b40 <return_holding_registers+0x134>)
 8000af6:	0052      	lsls	r2, r2, #1
 8000af8:	5ad1      	ldrh	r1, [r2, r3]
 8000afa:	1dfb      	adds	r3, r7, #7
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	1dfa      	adds	r2, r7, #7
 8000b00:	1c58      	adds	r0, r3, #1
 8000b02:	7010      	strb	r0, [r2, #0]
 8000b04:	001a      	movs	r2, r3
 8000b06:	b2c9      	uxtb	r1, r1
 8000b08:	4b0c      	ldr	r3, [pc, #48]	@ (8000b3c <return_holding_registers+0x130>)
 8000b0a:	5499      	strb	r1, [r3, r2]
	for(uint8_t i = 0; i < num_registers; i++)
 8000b0c:	1dbb      	adds	r3, r7, #6
 8000b0e:	781a      	ldrb	r2, [r3, #0]
 8000b10:	1dbb      	adds	r3, r7, #6
 8000b12:	3201      	adds	r2, #1
 8000b14:	701a      	strb	r2, [r3, #0]
 8000b16:	1dbb      	adds	r3, r7, #6
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	b29b      	uxth	r3, r3
 8000b1c:	1cba      	adds	r2, r7, #2
 8000b1e:	8812      	ldrh	r2, [r2, #0]
 8000b20:	429a      	cmp	r2, r3
 8000b22:	d8cf      	bhi.n	8000ac4 <return_holding_registers+0xb8>
	}

	return modbus_send(modbus_tx_buffer, index);
 8000b24:	1dfb      	adds	r3, r7, #7
 8000b26:	781a      	ldrb	r2, [r3, #0]
 8000b28:	4b04      	ldr	r3, [pc, #16]	@ (8000b3c <return_holding_registers+0x130>)
 8000b2a:	0011      	movs	r1, r2
 8000b2c:	0018      	movs	r0, r3
 8000b2e:	f000 f961 	bl	8000df4 <modbus_send>
 8000b32:	0003      	movs	r3, r0
}
 8000b34:	0018      	movs	r0, r3
 8000b36:	46bd      	mov	sp, r7
 8000b38:	b003      	add	sp, #12
 8000b3a:	bd90      	pop	{r4, r7, pc}
 8000b3c:	20000228 	.word	0x20000228
 8000b40:	20000000 	.word	0x20000000

08000b44 <edit_multiple_registers>:

/*
	Modbus Slave Edit Multiple holding registers
 */
int8_t edit_multiple_registers()
{
 8000b44:	b5b0      	push	{r4, r5, r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0
	// Handle Error Checking
	uint16_t first_register_address = (get_rx_buffer(2) << 8) | get_rx_buffer(3);
 8000b4a:	2002      	movs	r0, #2
 8000b4c:	f7ff ff26 	bl	800099c <get_rx_buffer>
 8000b50:	0003      	movs	r3, r0
 8000b52:	021b      	lsls	r3, r3, #8
 8000b54:	b21c      	sxth	r4, r3
 8000b56:	2003      	movs	r0, #3
 8000b58:	f7ff ff20 	bl	800099c <get_rx_buffer>
 8000b5c:	0003      	movs	r3, r0
 8000b5e:	b21b      	sxth	r3, r3
 8000b60:	4323      	orrs	r3, r4
 8000b62:	b21a      	sxth	r2, r3
 8000b64:	230c      	movs	r3, #12
 8000b66:	18fb      	adds	r3, r7, r3
 8000b68:	801a      	strh	r2, [r3, #0]

	uint16_t num_registers = (get_rx_buffer(4) << 8) | get_rx_buffer(5);
 8000b6a:	2004      	movs	r0, #4
 8000b6c:	f7ff ff16 	bl	800099c <get_rx_buffer>
 8000b70:	0003      	movs	r3, r0
 8000b72:	021b      	lsls	r3, r3, #8
 8000b74:	b21c      	sxth	r4, r3
 8000b76:	2005      	movs	r0, #5
 8000b78:	f7ff ff10 	bl	800099c <get_rx_buffer>
 8000b7c:	0003      	movs	r3, r0
 8000b7e:	b21b      	sxth	r3, r3
 8000b80:	4323      	orrs	r3, r4
 8000b82:	b21a      	sxth	r2, r3
 8000b84:	210a      	movs	r1, #10
 8000b86:	187b      	adds	r3, r7, r1
 8000b88:	801a      	strh	r2, [r3, #0]

	if(num_registers > 125 || num_registers < 1) // 125 is the limit according to modbus protocol
 8000b8a:	000a      	movs	r2, r1
 8000b8c:	18bb      	adds	r3, r7, r2
 8000b8e:	881b      	ldrh	r3, [r3, #0]
 8000b90:	2b7d      	cmp	r3, #125	@ 0x7d
 8000b92:	d803      	bhi.n	8000b9c <edit_multiple_registers+0x58>
 8000b94:	18bb      	adds	r3, r7, r2
 8000b96:	881b      	ldrh	r3, [r3, #0]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d104      	bne.n	8000ba6 <edit_multiple_registers+0x62>
	{
		return modbus_exception(MB_ILLEGAL_DATA_VALUE);
 8000b9c:	2006      	movs	r0, #6
 8000b9e:	f000 f8bf 	bl	8000d20 <modbus_exception>
 8000ba2:	0003      	movs	r3, r0
 8000ba4:	e0b4      	b.n	8000d10 <edit_multiple_registers+0x1cc>
	}

	uint16_t last_register_address = first_register_address + (num_registers - 1);
 8000ba6:	230a      	movs	r3, #10
 8000ba8:	18fa      	adds	r2, r7, r3
 8000baa:	230c      	movs	r3, #12
 8000bac:	18fb      	adds	r3, r7, r3
 8000bae:	8812      	ldrh	r2, [r2, #0]
 8000bb0:	881b      	ldrh	r3, [r3, #0]
 8000bb2:	18d3      	adds	r3, r2, r3
 8000bb4:	b29a      	uxth	r2, r3
 8000bb6:	2108      	movs	r1, #8
 8000bb8:	187b      	adds	r3, r7, r1
 8000bba:	3a01      	subs	r2, #1
 8000bbc:	801a      	strh	r2, [r3, #0]

	if(last_register_address > NUM_HOLDING_REGISTERS)
 8000bbe:	187b      	adds	r3, r7, r1
 8000bc0:	881b      	ldrh	r3, [r3, #0]
 8000bc2:	2b04      	cmp	r3, #4
 8000bc4:	d904      	bls.n	8000bd0 <edit_multiple_registers+0x8c>
	{
		return modbus_exception(MB_ILLEGAL_DATA_ADDRESS);
 8000bc6:	2005      	movs	r0, #5
 8000bc8:	f000 f8aa 	bl	8000d20 <modbus_exception>
 8000bcc:	0003      	movs	r3, r0
 8000bce:	e09f      	b.n	8000d10 <edit_multiple_registers+0x1cc>
	}

	if((first_register_address <= GPIO_READ) && (last_register_address >= GPIO_READ))
 8000bd0:	230c      	movs	r3, #12
 8000bd2:	18fb      	adds	r3, r7, r3
 8000bd4:	881b      	ldrh	r3, [r3, #0]
 8000bd6:	2b02      	cmp	r3, #2
 8000bd8:	d809      	bhi.n	8000bee <edit_multiple_registers+0xaa>
 8000bda:	2308      	movs	r3, #8
 8000bdc:	18fb      	adds	r3, r7, r3
 8000bde:	881b      	ldrh	r3, [r3, #0]
 8000be0:	2b01      	cmp	r3, #1
 8000be2:	d904      	bls.n	8000bee <edit_multiple_registers+0xaa>
	{
		// Ensure that sensor values are restricted to read-only
		return modbus_exception(MB_ILLEGAL_FUNCTION);
 8000be4:	2004      	movs	r0, #4
 8000be6:	f000 f89b 	bl	8000d20 <modbus_exception>
 8000bea:	0003      	movs	r3, r0
 8000bec:	e090      	b.n	8000d10 <edit_multiple_registers+0x1cc>
	}

	// Edit holding registers
	modbus_tx_buffer[0] = get_rx_buffer(0); // Append Slave id
 8000bee:	2000      	movs	r0, #0
 8000bf0:	f7ff fed4 	bl	800099c <get_rx_buffer>
 8000bf4:	0003      	movs	r3, r0
 8000bf6:	001a      	movs	r2, r3
 8000bf8:	4b47      	ldr	r3, [pc, #284]	@ (8000d18 <edit_multiple_registers+0x1d4>)
 8000bfa:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[1] = get_rx_buffer(1); // Append Function Code
 8000bfc:	2001      	movs	r0, #1
 8000bfe:	f7ff fecd 	bl	800099c <get_rx_buffer>
 8000c02:	0003      	movs	r3, r0
 8000c04:	001a      	movs	r2, r3
 8000c06:	4b44      	ldr	r3, [pc, #272]	@ (8000d18 <edit_multiple_registers+0x1d4>)
 8000c08:	705a      	strb	r2, [r3, #1]
	// Append the Write Address (high byte then low byte)
	modbus_tx_buffer[2] = get_rx_buffer(2);
 8000c0a:	2002      	movs	r0, #2
 8000c0c:	f7ff fec6 	bl	800099c <get_rx_buffer>
 8000c10:	0003      	movs	r3, r0
 8000c12:	001a      	movs	r2, r3
 8000c14:	4b40      	ldr	r3, [pc, #256]	@ (8000d18 <edit_multiple_registers+0x1d4>)
 8000c16:	709a      	strb	r2, [r3, #2]
	modbus_tx_buffer[3] = get_rx_buffer(3);
 8000c18:	2003      	movs	r0, #3
 8000c1a:	f7ff febf 	bl	800099c <get_rx_buffer>
 8000c1e:	0003      	movs	r3, r0
 8000c20:	001a      	movs	r2, r3
 8000c22:	4b3d      	ldr	r3, [pc, #244]	@ (8000d18 <edit_multiple_registers+0x1d4>)
 8000c24:	70da      	strb	r2, [r3, #3]
	// Append the quantity of registers to be written (high byte then low byte)
	modbus_tx_buffer[4] = get_rx_buffer(4);
 8000c26:	2004      	movs	r0, #4
 8000c28:	f7ff feb8 	bl	800099c <get_rx_buffer>
 8000c2c:	0003      	movs	r3, r0
 8000c2e:	001a      	movs	r2, r3
 8000c30:	4b39      	ldr	r3, [pc, #228]	@ (8000d18 <edit_multiple_registers+0x1d4>)
 8000c32:	711a      	strb	r2, [r3, #4]
	modbus_tx_buffer[5] = get_rx_buffer(5);
 8000c34:	2005      	movs	r0, #5
 8000c36:	f7ff feb1 	bl	800099c <get_rx_buffer>
 8000c3a:	0003      	movs	r3, r0
 8000c3c:	001a      	movs	r2, r3
 8000c3e:	4b36      	ldr	r3, [pc, #216]	@ (8000d18 <edit_multiple_registers+0x1d4>)
 8000c40:	715a      	strb	r2, [r3, #5]
	uint8_t index = 6;
 8000c42:	1dfb      	adds	r3, r7, #7
 8000c44:	2206      	movs	r2, #6
 8000c46:	701a      	strb	r2, [r3, #0]

	for(uint8_t i = 0; i < num_registers; i++)
 8000c48:	230f      	movs	r3, #15
 8000c4a:	18fb      	adds	r3, r7, r3
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	701a      	strb	r2, [r3, #0]
 8000c50:	e032      	b.n	8000cb8 <edit_multiple_registers+0x174>
	{
		holding_register_database[first_register_address + i] = (get_rx_buffer(2 * i + 7) << 8) | get_rx_buffer(2 * i + 8);
 8000c52:	250f      	movs	r5, #15
 8000c54:	197b      	adds	r3, r7, r5
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	18db      	adds	r3, r3, r3
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	3307      	adds	r3, #7
 8000c5e:	b2db      	uxtb	r3, r3
 8000c60:	0018      	movs	r0, r3
 8000c62:	f7ff fe9b 	bl	800099c <get_rx_buffer>
 8000c66:	0003      	movs	r3, r0
 8000c68:	021b      	lsls	r3, r3, #8
 8000c6a:	b21c      	sxth	r4, r3
 8000c6c:	197b      	adds	r3, r7, r5
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	3304      	adds	r3, #4
 8000c72:	b2db      	uxtb	r3, r3
 8000c74:	18db      	adds	r3, r3, r3
 8000c76:	b2db      	uxtb	r3, r3
 8000c78:	0018      	movs	r0, r3
 8000c7a:	f7ff fe8f 	bl	800099c <get_rx_buffer>
 8000c7e:	0003      	movs	r3, r0
 8000c80:	b21b      	sxth	r3, r3
 8000c82:	4323      	orrs	r3, r4
 8000c84:	b219      	sxth	r1, r3
 8000c86:	200c      	movs	r0, #12
 8000c88:	183b      	adds	r3, r7, r0
 8000c8a:	881a      	ldrh	r2, [r3, #0]
 8000c8c:	197b      	adds	r3, r7, r5
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	18d2      	adds	r2, r2, r3
 8000c92:	b289      	uxth	r1, r1
 8000c94:	4b21      	ldr	r3, [pc, #132]	@ (8000d1c <edit_multiple_registers+0x1d8>)
 8000c96:	0052      	lsls	r2, r2, #1
 8000c98:	52d1      	strh	r1, [r2, r3]

		// Handle the range boundaries of each writable register
		handle_range(first_register_address + i);
 8000c9a:	197b      	adds	r3, r7, r5
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	b29a      	uxth	r2, r3
 8000ca0:	183b      	adds	r3, r7, r0
 8000ca2:	881b      	ldrh	r3, [r3, #0]
 8000ca4:	18d3      	adds	r3, r2, r3
 8000ca6:	b29b      	uxth	r3, r3
 8000ca8:	0018      	movs	r0, r3
 8000caa:	f000 f863 	bl	8000d74 <handle_range>
	for(uint8_t i = 0; i < num_registers; i++)
 8000cae:	197b      	adds	r3, r7, r5
 8000cb0:	781a      	ldrb	r2, [r3, #0]
 8000cb2:	197b      	adds	r3, r7, r5
 8000cb4:	3201      	adds	r2, #1
 8000cb6:	701a      	strb	r2, [r3, #0]
 8000cb8:	230f      	movs	r3, #15
 8000cba:	18fb      	adds	r3, r7, r3
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	b29b      	uxth	r3, r3
 8000cc0:	220a      	movs	r2, #10
 8000cc2:	18ba      	adds	r2, r7, r2
 8000cc4:	8812      	ldrh	r2, [r2, #0]
 8000cc6:	429a      	cmp	r2, r3
 8000cc8:	d8c3      	bhi.n	8000c52 <edit_multiple_registers+0x10e>
	}

	// TIMING WORKAROUND START
	HAL_Delay(1);
 8000cca:	2001      	movs	r0, #1
 8000ccc:	f000 fbc8 	bl	8001460 <HAL_Delay>
	// TIMING WORKAROUND END

	int8_t status = modbus_send(modbus_tx_buffer, index);
 8000cd0:	1dbc      	adds	r4, r7, #6
 8000cd2:	1dfb      	adds	r3, r7, #7
 8000cd4:	781a      	ldrb	r2, [r3, #0]
 8000cd6:	4b10      	ldr	r3, [pc, #64]	@ (8000d18 <edit_multiple_registers+0x1d4>)
 8000cd8:	0011      	movs	r1, r2
 8000cda:	0018      	movs	r0, r3
 8000cdc:	f000 f88a 	bl	8000df4 <modbus_send>
 8000ce0:	0003      	movs	r3, r0
 8000ce2:	7023      	strb	r3, [r4, #0]

	if(status == HAL_OK)
 8000ce4:	1dbb      	adds	r3, r7, #6
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	b25b      	sxtb	r3, r3
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d10d      	bne.n	8000d0a <edit_multiple_registers+0x1c6>
	{
		// Special Case Modbus Baud Rate Modification
		if((first_register_address <= 1) && last_register_address >= 1)
 8000cee:	230c      	movs	r3, #12
 8000cf0:	18fb      	adds	r3, r7, r3
 8000cf2:	881b      	ldrh	r3, [r3, #0]
 8000cf4:	2b01      	cmp	r3, #1
 8000cf6:	d808      	bhi.n	8000d0a <edit_multiple_registers+0x1c6>
 8000cf8:	2308      	movs	r3, #8
 8000cfa:	18fb      	adds	r3, r7, r3
 8000cfc:	881b      	ldrh	r3, [r3, #0]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d003      	beq.n	8000d0a <edit_multiple_registers+0x1c6>
		{
			return modbus_change_baud_rate();
 8000d02:	f000 f917 	bl	8000f34 <modbus_change_baud_rate>
 8000d06:	0003      	movs	r3, r0
 8000d08:	e002      	b.n	8000d10 <edit_multiple_registers+0x1cc>
		}
	}
	return status;
 8000d0a:	1dbb      	adds	r3, r7, #6
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	b25b      	sxtb	r3, r3
}
 8000d10:	0018      	movs	r0, r3
 8000d12:	46bd      	mov	sp, r7
 8000d14:	b004      	add	sp, #16
 8000d16:	bdb0      	pop	{r4, r5, r7, pc}
 8000d18:	20000228 	.word	0x20000228
 8000d1c:	20000000 	.word	0x20000000

08000d20 <modbus_exception>:

/*
	Modbus Slave Exception handler
 */
int8_t modbus_exception(int8_t exception_code)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	0002      	movs	r2, r0
 8000d28:	1dfb      	adds	r3, r7, #7
 8000d2a:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[0] = get_rx_buffer(0);
 8000d2c:	2000      	movs	r0, #0
 8000d2e:	f7ff fe35 	bl	800099c <get_rx_buffer>
 8000d32:	0003      	movs	r3, r0
 8000d34:	001a      	movs	r2, r3
 8000d36:	4b0e      	ldr	r3, [pc, #56]	@ (8000d70 <modbus_exception+0x50>)
 8000d38:	701a      	strb	r2, [r3, #0]
	modbus_tx_buffer[1] = get_rx_buffer(1) | 0x80;
 8000d3a:	2001      	movs	r0, #1
 8000d3c:	f7ff fe2e 	bl	800099c <get_rx_buffer>
 8000d40:	0003      	movs	r3, r0
 8000d42:	001a      	movs	r2, r3
 8000d44:	2380      	movs	r3, #128	@ 0x80
 8000d46:	425b      	negs	r3, r3
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	b2da      	uxtb	r2, r3
 8000d4c:	4b08      	ldr	r3, [pc, #32]	@ (8000d70 <modbus_exception+0x50>)
 8000d4e:	705a      	strb	r2, [r3, #1]
	modbus_tx_buffer[2] = exception_code - 3; // Subtract 3 to match the modbus defined error code value
 8000d50:	1dfb      	adds	r3, r7, #7
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	3b03      	subs	r3, #3
 8000d56:	b2da      	uxtb	r2, r3
 8000d58:	4b05      	ldr	r3, [pc, #20]	@ (8000d70 <modbus_exception+0x50>)
 8000d5a:	709a      	strb	r2, [r3, #2]

	return modbus_send(modbus_tx_buffer, 3);
 8000d5c:	4b04      	ldr	r3, [pc, #16]	@ (8000d70 <modbus_exception+0x50>)
 8000d5e:	2103      	movs	r1, #3
 8000d60:	0018      	movs	r0, r3
 8000d62:	f000 f847 	bl	8000df4 <modbus_send>
 8000d66:	0003      	movs	r3, r0
}
 8000d68:	0018      	movs	r0, r3
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	b002      	add	sp, #8
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	20000228 	.word	0x20000228

08000d74 <handle_range>:

/*
 * Modbus Slave Data Value Range Handler
 */
void handle_range(uint16_t holding_register)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	0002      	movs	r2, r0
 8000d7c:	1dbb      	adds	r3, r7, #6
 8000d7e:	801a      	strh	r2, [r3, #0]
	switch(holding_register)
 8000d80:	1dbb      	adds	r3, r7, #6
 8000d82:	881b      	ldrh	r3, [r3, #0]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d002      	beq.n	8000d8e <handle_range+0x1a>
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d00e      	beq.n	8000daa <handle_range+0x36>
				holding_register_database[holding_register] = 9;
			}
			break;
		}
	}
}
 8000d8c:	e02c      	b.n	8000de8 <handle_range+0x74>
			if(holding_register_database[holding_register] > 0xFF)
 8000d8e:	1dbb      	adds	r3, r7, #6
 8000d90:	881a      	ldrh	r2, [r3, #0]
 8000d92:	4b17      	ldr	r3, [pc, #92]	@ (8000df0 <handle_range+0x7c>)
 8000d94:	0052      	lsls	r2, r2, #1
 8000d96:	5ad3      	ldrh	r3, [r2, r3]
 8000d98:	2bff      	cmp	r3, #255	@ 0xff
 8000d9a:	d922      	bls.n	8000de2 <handle_range+0x6e>
				holding_register_database[holding_register] = 0xFF;
 8000d9c:	1dbb      	adds	r3, r7, #6
 8000d9e:	881a      	ldrh	r2, [r3, #0]
 8000da0:	4b13      	ldr	r3, [pc, #76]	@ (8000df0 <handle_range+0x7c>)
 8000da2:	0052      	lsls	r2, r2, #1
 8000da4:	21ff      	movs	r1, #255	@ 0xff
 8000da6:	52d1      	strh	r1, [r2, r3]
			break;
 8000da8:	e01b      	b.n	8000de2 <handle_range+0x6e>
			if(holding_register_database[holding_register] < 2)
 8000daa:	1dbb      	adds	r3, r7, #6
 8000dac:	881a      	ldrh	r2, [r3, #0]
 8000dae:	4b10      	ldr	r3, [pc, #64]	@ (8000df0 <handle_range+0x7c>)
 8000db0:	0052      	lsls	r2, r2, #1
 8000db2:	5ad3      	ldrh	r3, [r2, r3]
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	d806      	bhi.n	8000dc6 <handle_range+0x52>
				holding_register_database[holding_register] = 2;
 8000db8:	1dbb      	adds	r3, r7, #6
 8000dba:	881a      	ldrh	r2, [r3, #0]
 8000dbc:	4b0c      	ldr	r3, [pc, #48]	@ (8000df0 <handle_range+0x7c>)
 8000dbe:	0052      	lsls	r2, r2, #1
 8000dc0:	2102      	movs	r1, #2
 8000dc2:	52d1      	strh	r1, [r2, r3]
			break;
 8000dc4:	e00f      	b.n	8000de6 <handle_range+0x72>
			else if(holding_register_database[holding_register] > 9)
 8000dc6:	1dbb      	adds	r3, r7, #6
 8000dc8:	881a      	ldrh	r2, [r3, #0]
 8000dca:	4b09      	ldr	r3, [pc, #36]	@ (8000df0 <handle_range+0x7c>)
 8000dcc:	0052      	lsls	r2, r2, #1
 8000dce:	5ad3      	ldrh	r3, [r2, r3]
 8000dd0:	2b09      	cmp	r3, #9
 8000dd2:	d908      	bls.n	8000de6 <handle_range+0x72>
				holding_register_database[holding_register] = 9;
 8000dd4:	1dbb      	adds	r3, r7, #6
 8000dd6:	881a      	ldrh	r2, [r3, #0]
 8000dd8:	4b05      	ldr	r3, [pc, #20]	@ (8000df0 <handle_range+0x7c>)
 8000dda:	0052      	lsls	r2, r2, #1
 8000ddc:	2109      	movs	r1, #9
 8000dde:	52d1      	strh	r1, [r2, r3]
			break;
 8000de0:	e001      	b.n	8000de6 <handle_range+0x72>
			break;
 8000de2:	46c0      	nop			@ (mov r8, r8)
 8000de4:	e000      	b.n	8000de8 <handle_range+0x74>
			break;
 8000de6:	46c0      	nop			@ (mov r8, r8)
}
 8000de8:	46c0      	nop			@ (mov r8, r8)
 8000dea:	46bd      	mov	sp, r7
 8000dec:	b002      	add	sp, #8
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	20000000 	.word	0x20000000

08000df4 <modbus_send>:

/*
	General Modbus send function
 */
int8_t modbus_send(uint8_t *data, uint8_t size)
{
 8000df4:	b5b0      	push	{r4, r5, r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	000a      	movs	r2, r1
 8000dfe:	1cfb      	adds	r3, r7, #3
 8000e00:	701a      	strb	r2, [r3, #0]
	// Append CRC (low byte then high byte)
	uint16_t crc = crc_16(modbus_tx_buffer, size);
 8000e02:	250e      	movs	r5, #14
 8000e04:	197c      	adds	r4, r7, r5
 8000e06:	1cfb      	adds	r3, r7, #3
 8000e08:	781a      	ldrb	r2, [r3, #0]
 8000e0a:	4b2a      	ldr	r3, [pc, #168]	@ (8000eb4 <modbus_send+0xc0>)
 8000e0c:	0011      	movs	r1, r2
 8000e0e:	0018      	movs	r0, r3
 8000e10:	f000 f8f6 	bl	8001000 <crc_16>
 8000e14:	0003      	movs	r3, r0
 8000e16:	8023      	strh	r3, [r4, #0]
	modbus_tx_buffer[size] = low_byte(crc);
 8000e18:	1cfb      	adds	r3, r7, #3
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	197a      	adds	r2, r7, r5
 8000e1e:	8812      	ldrh	r2, [r2, #0]
 8000e20:	b2d1      	uxtb	r1, r2
 8000e22:	4a24      	ldr	r2, [pc, #144]	@ (8000eb4 <modbus_send+0xc0>)
 8000e24:	54d1      	strb	r1, [r2, r3]
	modbus_tx_buffer[size + 1] = high_byte(crc);
 8000e26:	197b      	adds	r3, r7, r5
 8000e28:	881b      	ldrh	r3, [r3, #0]
 8000e2a:	0a1b      	lsrs	r3, r3, #8
 8000e2c:	b29a      	uxth	r2, r3
 8000e2e:	1cfb      	adds	r3, r7, #3
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	3301      	adds	r3, #1
 8000e34:	b2d1      	uxtb	r1, r2
 8000e36:	4a1f      	ldr	r2, [pc, #124]	@ (8000eb4 <modbus_send+0xc0>)
 8000e38:	54d1      	strb	r1, [r2, r3]

	int8_t status = HAL_OK;
 8000e3a:	240d      	movs	r4, #13
 8000e3c:	193b      	adds	r3, r7, r4
 8000e3e:	2200      	movs	r2, #0
 8000e40:	701a      	strb	r2, [r3, #0]
	status = HAL_UART_Transmit_IT(&huart1, modbus_tx_buffer, size + 2);
 8000e42:	1cfb      	adds	r3, r7, #3
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	b29b      	uxth	r3, r3
 8000e48:	3302      	adds	r3, #2
 8000e4a:	b29a      	uxth	r2, r3
 8000e4c:	4919      	ldr	r1, [pc, #100]	@ (8000eb4 <modbus_send+0xc0>)
 8000e4e:	4b1a      	ldr	r3, [pc, #104]	@ (8000eb8 <modbus_send+0xc4>)
 8000e50:	0018      	movs	r0, r3
 8000e52:	f001 fdab 	bl	80029ac <HAL_UART_Transmit_IT>
 8000e56:	0003      	movs	r3, r0
 8000e58:	001a      	movs	r2, r3
 8000e5a:	193b      	adds	r3, r7, r4
 8000e5c:	701a      	strb	r2, [r3, #0]
	if(status != HAL_OK)
 8000e5e:	193b      	adds	r3, r7, r4
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	b25b      	sxtb	r3, r3
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d003      	beq.n	8000e70 <modbus_send+0x7c>
	{
		return status;
 8000e68:	193b      	adds	r3, r7, r4
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	b25b      	sxtb	r3, r3
 8000e6e:	e01d      	b.n	8000eac <modbus_send+0xb8>
	}
	time = HAL_GetTick();
 8000e70:	f000 faec 	bl	800144c <HAL_GetTick>
 8000e74:	0002      	movs	r2, r0
 8000e76:	4b11      	ldr	r3, [pc, #68]	@ (8000ebc <modbus_send+0xc8>)
 8000e78:	601a      	str	r2, [r3, #0]
	while(!tx_int && ((HAL_GetTick()) - time < 100));
 8000e7a:	46c0      	nop			@ (mov r8, r8)
 8000e7c:	4b10      	ldr	r3, [pc, #64]	@ (8000ec0 <modbus_send+0xcc>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d107      	bne.n	8000e96 <modbus_send+0xa2>
 8000e86:	f000 fae1 	bl	800144c <HAL_GetTick>
 8000e8a:	0002      	movs	r2, r0
 8000e8c:	4b0b      	ldr	r3, [pc, #44]	@ (8000ebc <modbus_send+0xc8>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	1ad3      	subs	r3, r2, r3
 8000e92:	2b63      	cmp	r3, #99	@ 0x63
 8000e94:	d9f2      	bls.n	8000e7c <modbus_send+0x88>
	if(tx_int)
 8000e96:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec0 <modbus_send+0xcc>)
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d004      	beq.n	8000eaa <modbus_send+0xb6>
	{
		tx_int = 0;
 8000ea0:	4b07      	ldr	r3, [pc, #28]	@ (8000ec0 <modbus_send+0xcc>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	701a      	strb	r2, [r3, #0]
		return HAL_OK;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	e000      	b.n	8000eac <modbus_send+0xb8>
	}
	else
	{
		return HAL_TIMEOUT;
 8000eaa:	2303      	movs	r3, #3
	}
}
 8000eac:	0018      	movs	r0, r3
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	b004      	add	sp, #16
 8000eb2:	bdb0      	pop	{r4, r5, r7, pc}
 8000eb4:	20000228 	.word	0x20000228
 8000eb8:	20000034 	.word	0x20000034
 8000ebc:	20000424 	.word	0x20000424
 8000ec0:	20000433 	.word	0x20000433

08000ec4 <modbus_rx>:

/*
	General Modbus check for reception function
 */
uint8_t modbus_rx()
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
	if(rx_int)
 8000ec8:	4b08      	ldr	r3, [pc, #32]	@ (8000eec <modbus_rx+0x28>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d004      	beq.n	8000edc <modbus_rx+0x18>
	{
		rx_int = 0;
 8000ed2:	4b06      	ldr	r3, [pc, #24]	@ (8000eec <modbus_rx+0x28>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	701a      	strb	r2, [r3, #0]
		return 1;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	e004      	b.n	8000ee6 <modbus_rx+0x22>
	}
	if(handle_chunk_miss() != HAL_OK)
 8000edc:	f7ff fd2a 	bl	8000934 <handle_chunk_miss>
	{
		// TODO: log the error when startup the UART back up
	}
	return rx_int;
 8000ee0:	4b02      	ldr	r3, [pc, #8]	@ (8000eec <modbus_rx+0x28>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	b2db      	uxtb	r3, r3
}
 8000ee6:	0018      	movs	r0, r3
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	20000432 	.word	0x20000432

08000ef0 <modbus_set_rx>:

/*
	General Modbus set chip in receive mode
 */
int8_t modbus_set_rx()
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
	int8_t status = HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rx_chunk, 6);
 8000ef6:	490c      	ldr	r1, [pc, #48]	@ (8000f28 <modbus_set_rx+0x38>)
 8000ef8:	4b0c      	ldr	r3, [pc, #48]	@ (8000f2c <modbus_set_rx+0x3c>)
 8000efa:	2206      	movs	r2, #6
 8000efc:	0018      	movs	r0, r3
 8000efe:	f003 fbe7 	bl	80046d0 <HAL_UARTEx_ReceiveToIdle_DMA>
 8000f02:	0003      	movs	r3, r0
 8000f04:	001a      	movs	r2, r3
 8000f06:	1dfb      	adds	r3, r7, #7
 8000f08:	701a      	strb	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8000f0a:	4b09      	ldr	r3, [pc, #36]	@ (8000f30 <modbus_set_rx+0x40>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	4b07      	ldr	r3, [pc, #28]	@ (8000f30 <modbus_set_rx+0x40>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	2104      	movs	r1, #4
 8000f16:	438a      	bics	r2, r1
 8000f18:	601a      	str	r2, [r3, #0]

	return status;
 8000f1a:	1dfb      	adds	r3, r7, #7
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	b25b      	sxtb	r3, r3
}
 8000f20:	0018      	movs	r0, r3
 8000f22:	46bd      	mov	sp, r7
 8000f24:	b002      	add	sp, #8
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	20000328 	.word	0x20000328
 8000f2c:	20000034 	.word	0x20000034
 8000f30:	200000c8 	.word	0x200000c8

08000f34 <modbus_change_baud_rate>:


// General Modbus Control Functions ------------------------------------------------------------

int8_t modbus_change_baud_rate()
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
	int8_t status = 0;
 8000f3a:	1dfb      	adds	r3, r7, #7
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	701a      	strb	r2, [r3, #0]

	switch(holding_register_database[1])
 8000f40:	4b2c      	ldr	r3, [pc, #176]	@ (8000ff4 <modbus_change_baud_rate+0xc0>)
 8000f42:	885b      	ldrh	r3, [r3, #2]
 8000f44:	2b09      	cmp	r3, #9
 8000f46:	d82c      	bhi.n	8000fa2 <modbus_change_baud_rate+0x6e>
 8000f48:	009a      	lsls	r2, r3, #2
 8000f4a:	4b2b      	ldr	r3, [pc, #172]	@ (8000ff8 <modbus_change_baud_rate+0xc4>)
 8000f4c:	18d3      	adds	r3, r2, r3
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	469f      	mov	pc, r3
	{
		case BAUD_RATE_4800:
		{
			huart1.Init.BaudRate = 4800;
 8000f52:	4b2a      	ldr	r3, [pc, #168]	@ (8000ffc <modbus_change_baud_rate+0xc8>)
 8000f54:	2296      	movs	r2, #150	@ 0x96
 8000f56:	0152      	lsls	r2, r2, #5
 8000f58:	605a      	str	r2, [r3, #4]
			break;
 8000f5a:	e033      	b.n	8000fc4 <modbus_change_baud_rate+0x90>
		}
		case BAUD_RATE_9600:
		{
			huart1.Init.BaudRate = 9600;
 8000f5c:	4b27      	ldr	r3, [pc, #156]	@ (8000ffc <modbus_change_baud_rate+0xc8>)
 8000f5e:	2296      	movs	r2, #150	@ 0x96
 8000f60:	0192      	lsls	r2, r2, #6
 8000f62:	605a      	str	r2, [r3, #4]
			break;
 8000f64:	e02e      	b.n	8000fc4 <modbus_change_baud_rate+0x90>
		}
		case BAUD_RATE_19200:
		{
			huart1.Init.BaudRate = 19200;
 8000f66:	4b25      	ldr	r3, [pc, #148]	@ (8000ffc <modbus_change_baud_rate+0xc8>)
 8000f68:	2296      	movs	r2, #150	@ 0x96
 8000f6a:	01d2      	lsls	r2, r2, #7
 8000f6c:	605a      	str	r2, [r3, #4]
			break;
 8000f6e:	e029      	b.n	8000fc4 <modbus_change_baud_rate+0x90>
		}
		case BAUD_RATE_38400:
		{
			huart1.Init.BaudRate = 38400;
 8000f70:	4b22      	ldr	r3, [pc, #136]	@ (8000ffc <modbus_change_baud_rate+0xc8>)
 8000f72:	2296      	movs	r2, #150	@ 0x96
 8000f74:	0212      	lsls	r2, r2, #8
 8000f76:	605a      	str	r2, [r3, #4]
			break;
 8000f78:	e024      	b.n	8000fc4 <modbus_change_baud_rate+0x90>
		}
		case BAUD_RATE_57600:
		{
			huart1.Init.BaudRate = 57600;
 8000f7a:	4b20      	ldr	r3, [pc, #128]	@ (8000ffc <modbus_change_baud_rate+0xc8>)
 8000f7c:	22e1      	movs	r2, #225	@ 0xe1
 8000f7e:	0212      	lsls	r2, r2, #8
 8000f80:	605a      	str	r2, [r3, #4]
			break;
 8000f82:	e01f      	b.n	8000fc4 <modbus_change_baud_rate+0x90>
		}
		case BAUD_RATE_115200:
		{
			huart1.Init.BaudRate = 115200;
 8000f84:	4b1d      	ldr	r3, [pc, #116]	@ (8000ffc <modbus_change_baud_rate+0xc8>)
 8000f86:	22e1      	movs	r2, #225	@ 0xe1
 8000f88:	0252      	lsls	r2, r2, #9
 8000f8a:	605a      	str	r2, [r3, #4]
			break;
 8000f8c:	e01a      	b.n	8000fc4 <modbus_change_baud_rate+0x90>
		}
		case BAUD_RATE_128000:
		{
			huart1.Init.BaudRate = 128000;
 8000f8e:	4b1b      	ldr	r3, [pc, #108]	@ (8000ffc <modbus_change_baud_rate+0xc8>)
 8000f90:	22fa      	movs	r2, #250	@ 0xfa
 8000f92:	0252      	lsls	r2, r2, #9
 8000f94:	605a      	str	r2, [r3, #4]
			break;
 8000f96:	e015      	b.n	8000fc4 <modbus_change_baud_rate+0x90>
		}
		case BAUD_RATE_256000:
		{
			huart1.Init.BaudRate = 256000;
 8000f98:	4b18      	ldr	r3, [pc, #96]	@ (8000ffc <modbus_change_baud_rate+0xc8>)
 8000f9a:	22fa      	movs	r2, #250	@ 0xfa
 8000f9c:	0292      	lsls	r2, r2, #10
 8000f9e:	605a      	str	r2, [r3, #4]
			break;
 8000fa0:	e010      	b.n	8000fc4 <modbus_change_baud_rate+0x90>
		}
		default:
		{
			holding_register_database[1] = BAUD_RATE_9600;
 8000fa2:	4b14      	ldr	r3, [pc, #80]	@ (8000ff4 <modbus_change_baud_rate+0xc0>)
 8000fa4:	2203      	movs	r2, #3
 8000fa6:	805a      	strh	r2, [r3, #2]
			huart1.Init.BaudRate = 9600;
 8000fa8:	4b14      	ldr	r3, [pc, #80]	@ (8000ffc <modbus_change_baud_rate+0xc8>)
 8000faa:	2296      	movs	r2, #150	@ 0x96
 8000fac:	0192      	lsls	r2, r2, #6
 8000fae:	605a      	str	r2, [r3, #4]
			status = UART_SetConfig(&huart1);
 8000fb0:	4b12      	ldr	r3, [pc, #72]	@ (8000ffc <modbus_change_baud_rate+0xc8>)
 8000fb2:	0018      	movs	r0, r3
 8000fb4:	f002 fa3c 	bl	8003430 <UART_SetConfig>
 8000fb8:	0003      	movs	r3, r0
 8000fba:	001a      	movs	r2, r3
 8000fbc:	1dfb      	adds	r3, r7, #7
 8000fbe:	701a      	strb	r2, [r3, #0]
			if(status == HAL_OK)
			{
				//HAL_UART_Abort_IT(&huart1);
			}
			return MB_ILLEGAL_DATA_VALUE;
 8000fc0:	2306      	movs	r3, #6
 8000fc2:	e013      	b.n	8000fec <modbus_change_baud_rate+0xb8>
			break;
		}

	}
	status = UART_SetConfig(&huart1);
 8000fc4:	4b0d      	ldr	r3, [pc, #52]	@ (8000ffc <modbus_change_baud_rate+0xc8>)
 8000fc6:	0018      	movs	r0, r3
 8000fc8:	f002 fa32 	bl	8003430 <UART_SetConfig>
 8000fcc:	0003      	movs	r3, r0
 8000fce:	001a      	movs	r2, r3
 8000fd0:	1dfb      	adds	r3, r7, #7
 8000fd2:	701a      	strb	r2, [r3, #0]
	if(status == HAL_OK)
	{
		//status = HAL_UART_Abort_IT(&huart1);
	}

	if(status != HAL_OK)
 8000fd4:	1dfb      	adds	r3, r7, #7
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	b25b      	sxtb	r3, r3
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d003      	beq.n	8000fe6 <modbus_change_baud_rate+0xb2>
	{
		return status;
 8000fde:	1dfb      	adds	r3, r7, #7
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	b25b      	sxtb	r3, r3
 8000fe4:	e002      	b.n	8000fec <modbus_change_baud_rate+0xb8>
	}

	//status = HAL_UART_Receive_IT(huart, pData, Size)

	return status;
 8000fe6:	1dfb      	adds	r3, r7, #7
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	b25b      	sxtb	r3, r3
}
 8000fec:	0018      	movs	r0, r3
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	b002      	add	sp, #8
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	20000000 	.word	0x20000000
 8000ff8:	08004ae0 	.word	0x08004ae0
 8000ffc:	20000034 	.word	0x20000034

08001000 <crc_16>:
  }
}

// CRC Generation Function
uint16_t crc_16(uint8_t *data, uint8_t size)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	000a      	movs	r2, r1
 800100a:	1cfb      	adds	r3, r7, #3
 800100c:	701a      	strb	r2, [r3, #0]
	uint8_t crc_hi = 0xFF;
 800100e:	230f      	movs	r3, #15
 8001010:	18fb      	adds	r3, r7, r3
 8001012:	22ff      	movs	r2, #255	@ 0xff
 8001014:	701a      	strb	r2, [r3, #0]
	uint8_t crc_low = 0xFF;
 8001016:	230e      	movs	r3, #14
 8001018:	18fb      	adds	r3, r7, r3
 800101a:	22ff      	movs	r2, #255	@ 0xff
 800101c:	701a      	strb	r2, [r3, #0]
	 unsigned int i; /* will index into CRC lookup */

	/* pass through message buffer */
	while (size--)
 800101e:	e019      	b.n	8001054 <crc_16+0x54>
	{
		i = crc_low ^ *data++; /* calculate the CRC  */
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	1c5a      	adds	r2, r3, #1
 8001024:	607a      	str	r2, [r7, #4]
 8001026:	781a      	ldrb	r2, [r3, #0]
 8001028:	200e      	movs	r0, #14
 800102a:	183b      	adds	r3, r7, r0
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	4053      	eors	r3, r2
 8001030:	b2db      	uxtb	r3, r3
 8001032:	60bb      	str	r3, [r7, #8]
		crc_low = crc_hi ^ table_crc_hi[i];
 8001034:	4a13      	ldr	r2, [pc, #76]	@ (8001084 <crc_16+0x84>)
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	18d3      	adds	r3, r2, r3
 800103a:	7819      	ldrb	r1, [r3, #0]
 800103c:	183b      	adds	r3, r7, r0
 800103e:	200f      	movs	r0, #15
 8001040:	183a      	adds	r2, r7, r0
 8001042:	7812      	ldrb	r2, [r2, #0]
 8001044:	404a      	eors	r2, r1
 8001046:	701a      	strb	r2, [r3, #0]
		crc_hi = table_crc_lo[i];
 8001048:	183b      	adds	r3, r7, r0
 800104a:	490f      	ldr	r1, [pc, #60]	@ (8001088 <crc_16+0x88>)
 800104c:	68ba      	ldr	r2, [r7, #8]
 800104e:	188a      	adds	r2, r1, r2
 8001050:	7812      	ldrb	r2, [r2, #0]
 8001052:	701a      	strb	r2, [r3, #0]
	while (size--)
 8001054:	1cfb      	adds	r3, r7, #3
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	1cfa      	adds	r2, r7, #3
 800105a:	1e59      	subs	r1, r3, #1
 800105c:	7011      	strb	r1, [r2, #0]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d1de      	bne.n	8001020 <crc_16+0x20>
	}

	return (crc_hi << 8 | crc_low);
 8001062:	230f      	movs	r3, #15
 8001064:	18fb      	adds	r3, r7, r3
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	021b      	lsls	r3, r3, #8
 800106a:	b21a      	sxth	r2, r3
 800106c:	230e      	movs	r3, #14
 800106e:	18fb      	adds	r3, r7, r3
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	b21b      	sxth	r3, r3
 8001074:	4313      	orrs	r3, r2
 8001076:	b21b      	sxth	r3, r3
 8001078:	b29b      	uxth	r3, r3
}
 800107a:	0018      	movs	r0, r3
 800107c:	46bd      	mov	sp, r7
 800107e:	b004      	add	sp, #16
 8001080:	bd80      	pop	{r7, pc}
 8001082:	46c0      	nop			@ (mov r8, r8)
 8001084:	080048e0 	.word	0x080048e0
 8001088:	080049e0 	.word	0x080049e0

0800108c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001092:	4b0f      	ldr	r3, [pc, #60]	@ (80010d0 <HAL_MspInit+0x44>)
 8001094:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001096:	4b0e      	ldr	r3, [pc, #56]	@ (80010d0 <HAL_MspInit+0x44>)
 8001098:	2101      	movs	r1, #1
 800109a:	430a      	orrs	r2, r1
 800109c:	641a      	str	r2, [r3, #64]	@ 0x40
 800109e:	4b0c      	ldr	r3, [pc, #48]	@ (80010d0 <HAL_MspInit+0x44>)
 80010a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010a2:	2201      	movs	r2, #1
 80010a4:	4013      	ands	r3, r2
 80010a6:	607b      	str	r3, [r7, #4]
 80010a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010aa:	4b09      	ldr	r3, [pc, #36]	@ (80010d0 <HAL_MspInit+0x44>)
 80010ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80010ae:	4b08      	ldr	r3, [pc, #32]	@ (80010d0 <HAL_MspInit+0x44>)
 80010b0:	2180      	movs	r1, #128	@ 0x80
 80010b2:	0549      	lsls	r1, r1, #21
 80010b4:	430a      	orrs	r2, r1
 80010b6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80010b8:	4b05      	ldr	r3, [pc, #20]	@ (80010d0 <HAL_MspInit+0x44>)
 80010ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80010bc:	2380      	movs	r3, #128	@ 0x80
 80010be:	055b      	lsls	r3, r3, #21
 80010c0:	4013      	ands	r3, r2
 80010c2:	603b      	str	r3, [r7, #0]
 80010c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010c6:	46c0      	nop			@ (mov r8, r8)
 80010c8:	46bd      	mov	sp, r7
 80010ca:	b002      	add	sp, #8
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	46c0      	nop			@ (mov r8, r8)
 80010d0:	40021000 	.word	0x40021000

080010d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010d4:	b590      	push	{r4, r7, lr}
 80010d6:	b095      	sub	sp, #84	@ 0x54
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010dc:	233c      	movs	r3, #60	@ 0x3c
 80010de:	18fb      	adds	r3, r7, r3
 80010e0:	0018      	movs	r0, r3
 80010e2:	2314      	movs	r3, #20
 80010e4:	001a      	movs	r2, r3
 80010e6:	2100      	movs	r1, #0
 80010e8:	f003 fbb8 	bl	800485c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010ec:	241c      	movs	r4, #28
 80010ee:	193b      	adds	r3, r7, r4
 80010f0:	0018      	movs	r0, r3
 80010f2:	2320      	movs	r3, #32
 80010f4:	001a      	movs	r2, r3
 80010f6:	2100      	movs	r1, #0
 80010f8:	f003 fbb0 	bl	800485c <memset>
  if(huart->Instance==USART1)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a5f      	ldr	r2, [pc, #380]	@ (8001280 <HAL_UART_MspInit+0x1ac>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d000      	beq.n	8001108 <HAL_UART_MspInit+0x34>
 8001106:	e0b6      	b.n	8001276 <HAL_UART_MspInit+0x1a2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001108:	193b      	adds	r3, r7, r4
 800110a:	2201      	movs	r2, #1
 800110c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800110e:	193b      	adds	r3, r7, r4
 8001110:	2200      	movs	r2, #0
 8001112:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001114:	193b      	adds	r3, r7, r4
 8001116:	0018      	movs	r0, r3
 8001118:	f001 fb4c 	bl	80027b4 <HAL_RCCEx_PeriphCLKConfig>
 800111c:	1e03      	subs	r3, r0, #0
 800111e:	d001      	beq.n	8001124 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8001120:	f7ff fb4a 	bl	80007b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001124:	4b57      	ldr	r3, [pc, #348]	@ (8001284 <HAL_UART_MspInit+0x1b0>)
 8001126:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001128:	4b56      	ldr	r3, [pc, #344]	@ (8001284 <HAL_UART_MspInit+0x1b0>)
 800112a:	2180      	movs	r1, #128	@ 0x80
 800112c:	01c9      	lsls	r1, r1, #7
 800112e:	430a      	orrs	r2, r1
 8001130:	641a      	str	r2, [r3, #64]	@ 0x40
 8001132:	4b54      	ldr	r3, [pc, #336]	@ (8001284 <HAL_UART_MspInit+0x1b0>)
 8001134:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001136:	2380      	movs	r3, #128	@ 0x80
 8001138:	01db      	lsls	r3, r3, #7
 800113a:	4013      	ands	r3, r2
 800113c:	61bb      	str	r3, [r7, #24]
 800113e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001140:	4b50      	ldr	r3, [pc, #320]	@ (8001284 <HAL_UART_MspInit+0x1b0>)
 8001142:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001144:	4b4f      	ldr	r3, [pc, #316]	@ (8001284 <HAL_UART_MspInit+0x1b0>)
 8001146:	2104      	movs	r1, #4
 8001148:	430a      	orrs	r2, r1
 800114a:	635a      	str	r2, [r3, #52]	@ 0x34
 800114c:	4b4d      	ldr	r3, [pc, #308]	@ (8001284 <HAL_UART_MspInit+0x1b0>)
 800114e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001150:	2204      	movs	r2, #4
 8001152:	4013      	ands	r3, r2
 8001154:	617b      	str	r3, [r7, #20]
 8001156:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001158:	4b4a      	ldr	r3, [pc, #296]	@ (8001284 <HAL_UART_MspInit+0x1b0>)
 800115a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800115c:	4b49      	ldr	r3, [pc, #292]	@ (8001284 <HAL_UART_MspInit+0x1b0>)
 800115e:	2102      	movs	r1, #2
 8001160:	430a      	orrs	r2, r1
 8001162:	635a      	str	r2, [r3, #52]	@ 0x34
 8001164:	4b47      	ldr	r3, [pc, #284]	@ (8001284 <HAL_UART_MspInit+0x1b0>)
 8001166:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001168:	2202      	movs	r2, #2
 800116a:	4013      	ands	r3, r2
 800116c:	613b      	str	r3, [r7, #16]
 800116e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001170:	4b44      	ldr	r3, [pc, #272]	@ (8001284 <HAL_UART_MspInit+0x1b0>)
 8001172:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001174:	4b43      	ldr	r3, [pc, #268]	@ (8001284 <HAL_UART_MspInit+0x1b0>)
 8001176:	2101      	movs	r1, #1
 8001178:	430a      	orrs	r2, r1
 800117a:	635a      	str	r2, [r3, #52]	@ 0x34
 800117c:	4b41      	ldr	r3, [pc, #260]	@ (8001284 <HAL_UART_MspInit+0x1b0>)
 800117e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001180:	2201      	movs	r2, #1
 8001182:	4013      	ands	r3, r2
 8001184:	60fb      	str	r3, [r7, #12]
 8001186:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC14-OSCX_IN(PC14)     ------> USART1_TX
    PB2     ------> USART1_RX
    PA12 [PA10]     ------> USART1_DE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001188:	213c      	movs	r1, #60	@ 0x3c
 800118a:	187b      	adds	r3, r7, r1
 800118c:	2280      	movs	r2, #128	@ 0x80
 800118e:	01d2      	lsls	r2, r2, #7
 8001190:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001192:	000c      	movs	r4, r1
 8001194:	193b      	adds	r3, r7, r4
 8001196:	2202      	movs	r2, #2
 8001198:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119a:	193b      	adds	r3, r7, r4
 800119c:	2200      	movs	r2, #0
 800119e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a0:	193b      	adds	r3, r7, r4
 80011a2:	2200      	movs	r2, #0
 80011a4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 80011a6:	193b      	adds	r3, r7, r4
 80011a8:	2200      	movs	r2, #0
 80011aa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011ac:	193b      	adds	r3, r7, r4
 80011ae:	4a36      	ldr	r2, [pc, #216]	@ (8001288 <HAL_UART_MspInit+0x1b4>)
 80011b0:	0019      	movs	r1, r3
 80011b2:	0010      	movs	r0, r2
 80011b4:	f000 fd86 	bl	8001cc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80011b8:	193b      	adds	r3, r7, r4
 80011ba:	2204      	movs	r2, #4
 80011bc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011be:	193b      	adds	r3, r7, r4
 80011c0:	2202      	movs	r2, #2
 80011c2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c4:	193b      	adds	r3, r7, r4
 80011c6:	2200      	movs	r2, #0
 80011c8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ca:	193b      	adds	r3, r7, r4
 80011cc:	2200      	movs	r2, #0
 80011ce:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 80011d0:	193b      	adds	r3, r7, r4
 80011d2:	2200      	movs	r2, #0
 80011d4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d6:	193b      	adds	r3, r7, r4
 80011d8:	4a2c      	ldr	r2, [pc, #176]	@ (800128c <HAL_UART_MspInit+0x1b8>)
 80011da:	0019      	movs	r1, r3
 80011dc:	0010      	movs	r0, r2
 80011de:	f000 fd71 	bl	8001cc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80011e2:	0021      	movs	r1, r4
 80011e4:	187b      	adds	r3, r7, r1
 80011e6:	2280      	movs	r2, #128	@ 0x80
 80011e8:	0152      	lsls	r2, r2, #5
 80011ea:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ec:	187b      	adds	r3, r7, r1
 80011ee:	2202      	movs	r2, #2
 80011f0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f2:	187b      	adds	r3, r7, r1
 80011f4:	2200      	movs	r2, #0
 80011f6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f8:	187b      	adds	r3, r7, r1
 80011fa:	2200      	movs	r2, #0
 80011fc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80011fe:	187b      	adds	r3, r7, r1
 8001200:	2201      	movs	r2, #1
 8001202:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001204:	187a      	adds	r2, r7, r1
 8001206:	23a0      	movs	r3, #160	@ 0xa0
 8001208:	05db      	lsls	r3, r3, #23
 800120a:	0011      	movs	r1, r2
 800120c:	0018      	movs	r0, r3
 800120e:	f000 fd59 	bl	8001cc4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8001212:	4b1f      	ldr	r3, [pc, #124]	@ (8001290 <HAL_UART_MspInit+0x1bc>)
 8001214:	4a1f      	ldr	r2, [pc, #124]	@ (8001294 <HAL_UART_MspInit+0x1c0>)
 8001216:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001218:	4b1d      	ldr	r3, [pc, #116]	@ (8001290 <HAL_UART_MspInit+0x1bc>)
 800121a:	2232      	movs	r2, #50	@ 0x32
 800121c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800121e:	4b1c      	ldr	r3, [pc, #112]	@ (8001290 <HAL_UART_MspInit+0x1bc>)
 8001220:	2200      	movs	r2, #0
 8001222:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001224:	4b1a      	ldr	r3, [pc, #104]	@ (8001290 <HAL_UART_MspInit+0x1bc>)
 8001226:	2200      	movs	r2, #0
 8001228:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800122a:	4b19      	ldr	r3, [pc, #100]	@ (8001290 <HAL_UART_MspInit+0x1bc>)
 800122c:	2280      	movs	r2, #128	@ 0x80
 800122e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001230:	4b17      	ldr	r3, [pc, #92]	@ (8001290 <HAL_UART_MspInit+0x1bc>)
 8001232:	2200      	movs	r2, #0
 8001234:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001236:	4b16      	ldr	r3, [pc, #88]	@ (8001290 <HAL_UART_MspInit+0x1bc>)
 8001238:	2200      	movs	r2, #0
 800123a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800123c:	4b14      	ldr	r3, [pc, #80]	@ (8001290 <HAL_UART_MspInit+0x1bc>)
 800123e:	2200      	movs	r2, #0
 8001240:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001242:	4b13      	ldr	r3, [pc, #76]	@ (8001290 <HAL_UART_MspInit+0x1bc>)
 8001244:	2200      	movs	r2, #0
 8001246:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001248:	4b11      	ldr	r3, [pc, #68]	@ (8001290 <HAL_UART_MspInit+0x1bc>)
 800124a:	0018      	movs	r0, r3
 800124c:	f000 fa0a 	bl	8001664 <HAL_DMA_Init>
 8001250:	1e03      	subs	r3, r0, #0
 8001252:	d001      	beq.n	8001258 <HAL_UART_MspInit+0x184>
    {
      Error_Handler();
 8001254:	f7ff fab0 	bl	80007b8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2180      	movs	r1, #128	@ 0x80
 800125c:	4a0c      	ldr	r2, [pc, #48]	@ (8001290 <HAL_UART_MspInit+0x1bc>)
 800125e:	505a      	str	r2, [r3, r1]
 8001260:	4b0b      	ldr	r3, [pc, #44]	@ (8001290 <HAL_UART_MspInit+0x1bc>)
 8001262:	687a      	ldr	r2, [r7, #4]
 8001264:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001266:	2200      	movs	r2, #0
 8001268:	2100      	movs	r1, #0
 800126a:	201b      	movs	r0, #27
 800126c:	f000 f9c8 	bl	8001600 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001270:	201b      	movs	r0, #27
 8001272:	f000 f9da 	bl	800162a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001276:	46c0      	nop			@ (mov r8, r8)
 8001278:	46bd      	mov	sp, r7
 800127a:	b015      	add	sp, #84	@ 0x54
 800127c:	bd90      	pop	{r4, r7, pc}
 800127e:	46c0      	nop			@ (mov r8, r8)
 8001280:	40013800 	.word	0x40013800
 8001284:	40021000 	.word	0x40021000
 8001288:	50000800 	.word	0x50000800
 800128c:	50000400 	.word	0x50000400
 8001290:	200000c8 	.word	0x200000c8
 8001294:	40020008 	.word	0x40020008

08001298 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800129c:	46c0      	nop			@ (mov r8, r8)
 800129e:	e7fd      	b.n	800129c <NMI_Handler+0x4>

080012a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012a4:	46c0      	nop			@ (mov r8, r8)
 80012a6:	e7fd      	b.n	80012a4 <HardFault_Handler+0x4>

080012a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012ac:	46c0      	nop			@ (mov r8, r8)
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012b6:	46c0      	nop			@ (mov r8, r8)
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}

080012bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012c0:	f000 f8b2 	bl	8001428 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012c4:	46c0      	nop			@ (mov r8, r8)
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
	...

080012cc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80012d0:	4b03      	ldr	r3, [pc, #12]	@ (80012e0 <DMA1_Channel1_IRQHandler+0x14>)
 80012d2:	0018      	movs	r0, r3
 80012d4:	f000 fbb4 	bl	8001a40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80012d8:	46c0      	nop			@ (mov r8, r8)
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	46c0      	nop			@ (mov r8, r8)
 80012e0:	200000c8 	.word	0x200000c8

080012e4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 interrupt.
  */
void USART1_IRQHandler(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80012e8:	4b03      	ldr	r3, [pc, #12]	@ (80012f8 <USART1_IRQHandler+0x14>)
 80012ea:	0018      	movs	r0, r3
 80012ec:	f001 fd3a 	bl	8002d64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80012f0:	46c0      	nop			@ (mov r8, r8)
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	46c0      	nop			@ (mov r8, r8)
 80012f8:	20000034 	.word	0x20000034

080012fc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001300:	4b03      	ldr	r3, [pc, #12]	@ (8001310 <SystemInit+0x14>)
 8001302:	2280      	movs	r2, #128	@ 0x80
 8001304:	0512      	lsls	r2, r2, #20
 8001306:	609a      	str	r2, [r3, #8]
#endif
}
 8001308:	46c0      	nop			@ (mov r8, r8)
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	46c0      	nop			@ (mov r8, r8)
 8001310:	e000ed00 	.word	0xe000ed00

08001314 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001314:	480d      	ldr	r0, [pc, #52]	@ (800134c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001316:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001318:	f7ff fff0 	bl	80012fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800131c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800131e:	e003      	b.n	8001328 <LoopCopyDataInit>

08001320 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001320:	4b0b      	ldr	r3, [pc, #44]	@ (8001350 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8001322:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001324:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001326:	3104      	adds	r1, #4

08001328 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001328:	480a      	ldr	r0, [pc, #40]	@ (8001354 <LoopForever+0xa>)
  ldr r3, =_edata
 800132a:	4b0b      	ldr	r3, [pc, #44]	@ (8001358 <LoopForever+0xe>)
  adds r2, r0, r1
 800132c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800132e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001330:	d3f6      	bcc.n	8001320 <CopyDataInit>
  ldr r2, =_sbss
 8001332:	4a0a      	ldr	r2, [pc, #40]	@ (800135c <LoopForever+0x12>)
  b LoopFillZerobss
 8001334:	e002      	b.n	800133c <LoopFillZerobss>

08001336 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001336:	2300      	movs	r3, #0
  str  r3, [r2]
 8001338:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800133a:	3204      	adds	r2, #4

0800133c <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 800133c:	4b08      	ldr	r3, [pc, #32]	@ (8001360 <LoopForever+0x16>)
  cmp r2, r3
 800133e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001340:	d3f9      	bcc.n	8001336 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8001342:	f003 fa93 	bl	800486c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001346:	f7ff f855 	bl	80003f4 <main>

0800134a <LoopForever>:

LoopForever:
    b LoopForever
 800134a:	e7fe      	b.n	800134a <LoopForever>
  ldr   r0, =_estack
 800134c:	20006000 	.word	0x20006000
  ldr r3, =_sidata
 8001350:	08004b98 	.word	0x08004b98
  ldr r0, =_sdata
 8001354:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001358:	20000018 	.word	0x20000018
  ldr r2, =_sbss
 800135c:	20000018 	.word	0x20000018
  ldr r3, = _ebss
 8001360:	20000438 	.word	0x20000438

08001364 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001364:	e7fe      	b.n	8001364 <ADC1_IRQHandler>

08001366 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001366:	b580      	push	{r7, lr}
 8001368:	b082      	sub	sp, #8
 800136a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800136c:	1dfb      	adds	r3, r7, #7
 800136e:	2200      	movs	r2, #0
 8001370:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001372:	2003      	movs	r0, #3
 8001374:	f000 f80e 	bl	8001394 <HAL_InitTick>
 8001378:	1e03      	subs	r3, r0, #0
 800137a:	d003      	beq.n	8001384 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 800137c:	1dfb      	adds	r3, r7, #7
 800137e:	2201      	movs	r2, #1
 8001380:	701a      	strb	r2, [r3, #0]
 8001382:	e001      	b.n	8001388 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001384:	f7ff fe82 	bl	800108c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001388:	1dfb      	adds	r3, r7, #7
 800138a:	781b      	ldrb	r3, [r3, #0]
}
 800138c:	0018      	movs	r0, r3
 800138e:	46bd      	mov	sp, r7
 8001390:	b002      	add	sp, #8
 8001392:	bd80      	pop	{r7, pc}

08001394 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001394:	b590      	push	{r4, r7, lr}
 8001396:	b085      	sub	sp, #20
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800139c:	230f      	movs	r3, #15
 800139e:	18fb      	adds	r3, r7, r3
 80013a0:	2200      	movs	r2, #0
 80013a2:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 80013a4:	4b1d      	ldr	r3, [pc, #116]	@ (800141c <HAL_InitTick+0x88>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d02b      	beq.n	8001404 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 80013ac:	4b1c      	ldr	r3, [pc, #112]	@ (8001420 <HAL_InitTick+0x8c>)
 80013ae:	681c      	ldr	r4, [r3, #0]
 80013b0:	4b1a      	ldr	r3, [pc, #104]	@ (800141c <HAL_InitTick+0x88>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	0019      	movs	r1, r3
 80013b6:	23fa      	movs	r3, #250	@ 0xfa
 80013b8:	0098      	lsls	r0, r3, #2
 80013ba:	f7fe fea5 	bl	8000108 <__udivsi3>
 80013be:	0003      	movs	r3, r0
 80013c0:	0019      	movs	r1, r3
 80013c2:	0020      	movs	r0, r4
 80013c4:	f7fe fea0 	bl	8000108 <__udivsi3>
 80013c8:	0003      	movs	r3, r0
 80013ca:	0018      	movs	r0, r3
 80013cc:	f000 f93d 	bl	800164a <HAL_SYSTICK_Config>
 80013d0:	1e03      	subs	r3, r0, #0
 80013d2:	d112      	bne.n	80013fa <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2b03      	cmp	r3, #3
 80013d8:	d80a      	bhi.n	80013f0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013da:	6879      	ldr	r1, [r7, #4]
 80013dc:	2301      	movs	r3, #1
 80013de:	425b      	negs	r3, r3
 80013e0:	2200      	movs	r2, #0
 80013e2:	0018      	movs	r0, r3
 80013e4:	f000 f90c 	bl	8001600 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001424 <HAL_InitTick+0x90>)
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	601a      	str	r2, [r3, #0]
 80013ee:	e00d      	b.n	800140c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80013f0:	230f      	movs	r3, #15
 80013f2:	18fb      	adds	r3, r7, r3
 80013f4:	2201      	movs	r2, #1
 80013f6:	701a      	strb	r2, [r3, #0]
 80013f8:	e008      	b.n	800140c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80013fa:	230f      	movs	r3, #15
 80013fc:	18fb      	adds	r3, r7, r3
 80013fe:	2201      	movs	r2, #1
 8001400:	701a      	strb	r2, [r3, #0]
 8001402:	e003      	b.n	800140c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001404:	230f      	movs	r3, #15
 8001406:	18fb      	adds	r3, r7, r3
 8001408:	2201      	movs	r2, #1
 800140a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800140c:	230f      	movs	r3, #15
 800140e:	18fb      	adds	r3, r7, r3
 8001410:	781b      	ldrb	r3, [r3, #0]
}
 8001412:	0018      	movs	r0, r3
 8001414:	46bd      	mov	sp, r7
 8001416:	b005      	add	sp, #20
 8001418:	bd90      	pop	{r4, r7, pc}
 800141a:	46c0      	nop			@ (mov r8, r8)
 800141c:	20000014 	.word	0x20000014
 8001420:	2000000c 	.word	0x2000000c
 8001424:	20000010 	.word	0x20000010

08001428 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800142c:	4b05      	ldr	r3, [pc, #20]	@ (8001444 <HAL_IncTick+0x1c>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	001a      	movs	r2, r3
 8001432:	4b05      	ldr	r3, [pc, #20]	@ (8001448 <HAL_IncTick+0x20>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	18d2      	adds	r2, r2, r3
 8001438:	4b03      	ldr	r3, [pc, #12]	@ (8001448 <HAL_IncTick+0x20>)
 800143a:	601a      	str	r2, [r3, #0]
}
 800143c:	46c0      	nop			@ (mov r8, r8)
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	46c0      	nop			@ (mov r8, r8)
 8001444:	20000014 	.word	0x20000014
 8001448:	20000434 	.word	0x20000434

0800144c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  return uwTick;
 8001450:	4b02      	ldr	r3, [pc, #8]	@ (800145c <HAL_GetTick+0x10>)
 8001452:	681b      	ldr	r3, [r3, #0]
}
 8001454:	0018      	movs	r0, r3
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	46c0      	nop			@ (mov r8, r8)
 800145c:	20000434 	.word	0x20000434

08001460 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001468:	f7ff fff0 	bl	800144c <HAL_GetTick>
 800146c:	0003      	movs	r3, r0
 800146e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	3301      	adds	r3, #1
 8001478:	d005      	beq.n	8001486 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800147a:	4b0a      	ldr	r3, [pc, #40]	@ (80014a4 <HAL_Delay+0x44>)
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	001a      	movs	r2, r3
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	189b      	adds	r3, r3, r2
 8001484:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001486:	46c0      	nop			@ (mov r8, r8)
 8001488:	f7ff ffe0 	bl	800144c <HAL_GetTick>
 800148c:	0002      	movs	r2, r0
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	68fa      	ldr	r2, [r7, #12]
 8001494:	429a      	cmp	r2, r3
 8001496:	d8f7      	bhi.n	8001488 <HAL_Delay+0x28>
  {
  }
}
 8001498:	46c0      	nop			@ (mov r8, r8)
 800149a:	46c0      	nop			@ (mov r8, r8)
 800149c:	46bd      	mov	sp, r7
 800149e:	b004      	add	sp, #16
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	46c0      	nop			@ (mov r8, r8)
 80014a4:	20000014 	.word	0x20000014

080014a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	0002      	movs	r2, r0
 80014b0:	1dfb      	adds	r3, r7, #7
 80014b2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80014b4:	1dfb      	adds	r3, r7, #7
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	2b7f      	cmp	r3, #127	@ 0x7f
 80014ba:	d809      	bhi.n	80014d0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014bc:	1dfb      	adds	r3, r7, #7
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	001a      	movs	r2, r3
 80014c2:	231f      	movs	r3, #31
 80014c4:	401a      	ands	r2, r3
 80014c6:	4b04      	ldr	r3, [pc, #16]	@ (80014d8 <__NVIC_EnableIRQ+0x30>)
 80014c8:	2101      	movs	r1, #1
 80014ca:	4091      	lsls	r1, r2
 80014cc:	000a      	movs	r2, r1
 80014ce:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80014d0:	46c0      	nop			@ (mov r8, r8)
 80014d2:	46bd      	mov	sp, r7
 80014d4:	b002      	add	sp, #8
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	e000e100 	.word	0xe000e100

080014dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014dc:	b590      	push	{r4, r7, lr}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	0002      	movs	r2, r0
 80014e4:	6039      	str	r1, [r7, #0]
 80014e6:	1dfb      	adds	r3, r7, #7
 80014e8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80014ea:	1dfb      	adds	r3, r7, #7
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	2b7f      	cmp	r3, #127	@ 0x7f
 80014f0:	d828      	bhi.n	8001544 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014f2:	4a2f      	ldr	r2, [pc, #188]	@ (80015b0 <__NVIC_SetPriority+0xd4>)
 80014f4:	1dfb      	adds	r3, r7, #7
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	b25b      	sxtb	r3, r3
 80014fa:	089b      	lsrs	r3, r3, #2
 80014fc:	33c0      	adds	r3, #192	@ 0xc0
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	589b      	ldr	r3, [r3, r2]
 8001502:	1dfa      	adds	r2, r7, #7
 8001504:	7812      	ldrb	r2, [r2, #0]
 8001506:	0011      	movs	r1, r2
 8001508:	2203      	movs	r2, #3
 800150a:	400a      	ands	r2, r1
 800150c:	00d2      	lsls	r2, r2, #3
 800150e:	21ff      	movs	r1, #255	@ 0xff
 8001510:	4091      	lsls	r1, r2
 8001512:	000a      	movs	r2, r1
 8001514:	43d2      	mvns	r2, r2
 8001516:	401a      	ands	r2, r3
 8001518:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	019b      	lsls	r3, r3, #6
 800151e:	22ff      	movs	r2, #255	@ 0xff
 8001520:	401a      	ands	r2, r3
 8001522:	1dfb      	adds	r3, r7, #7
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	0018      	movs	r0, r3
 8001528:	2303      	movs	r3, #3
 800152a:	4003      	ands	r3, r0
 800152c:	00db      	lsls	r3, r3, #3
 800152e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001530:	481f      	ldr	r0, [pc, #124]	@ (80015b0 <__NVIC_SetPriority+0xd4>)
 8001532:	1dfb      	adds	r3, r7, #7
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	b25b      	sxtb	r3, r3
 8001538:	089b      	lsrs	r3, r3, #2
 800153a:	430a      	orrs	r2, r1
 800153c:	33c0      	adds	r3, #192	@ 0xc0
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001542:	e031      	b.n	80015a8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001544:	4a1b      	ldr	r2, [pc, #108]	@ (80015b4 <__NVIC_SetPriority+0xd8>)
 8001546:	1dfb      	adds	r3, r7, #7
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	0019      	movs	r1, r3
 800154c:	230f      	movs	r3, #15
 800154e:	400b      	ands	r3, r1
 8001550:	3b08      	subs	r3, #8
 8001552:	089b      	lsrs	r3, r3, #2
 8001554:	3306      	adds	r3, #6
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	18d3      	adds	r3, r2, r3
 800155a:	3304      	adds	r3, #4
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	1dfa      	adds	r2, r7, #7
 8001560:	7812      	ldrb	r2, [r2, #0]
 8001562:	0011      	movs	r1, r2
 8001564:	2203      	movs	r2, #3
 8001566:	400a      	ands	r2, r1
 8001568:	00d2      	lsls	r2, r2, #3
 800156a:	21ff      	movs	r1, #255	@ 0xff
 800156c:	4091      	lsls	r1, r2
 800156e:	000a      	movs	r2, r1
 8001570:	43d2      	mvns	r2, r2
 8001572:	401a      	ands	r2, r3
 8001574:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	019b      	lsls	r3, r3, #6
 800157a:	22ff      	movs	r2, #255	@ 0xff
 800157c:	401a      	ands	r2, r3
 800157e:	1dfb      	adds	r3, r7, #7
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	0018      	movs	r0, r3
 8001584:	2303      	movs	r3, #3
 8001586:	4003      	ands	r3, r0
 8001588:	00db      	lsls	r3, r3, #3
 800158a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800158c:	4809      	ldr	r0, [pc, #36]	@ (80015b4 <__NVIC_SetPriority+0xd8>)
 800158e:	1dfb      	adds	r3, r7, #7
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	001c      	movs	r4, r3
 8001594:	230f      	movs	r3, #15
 8001596:	4023      	ands	r3, r4
 8001598:	3b08      	subs	r3, #8
 800159a:	089b      	lsrs	r3, r3, #2
 800159c:	430a      	orrs	r2, r1
 800159e:	3306      	adds	r3, #6
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	18c3      	adds	r3, r0, r3
 80015a4:	3304      	adds	r3, #4
 80015a6:	601a      	str	r2, [r3, #0]
}
 80015a8:	46c0      	nop			@ (mov r8, r8)
 80015aa:	46bd      	mov	sp, r7
 80015ac:	b003      	add	sp, #12
 80015ae:	bd90      	pop	{r4, r7, pc}
 80015b0:	e000e100 	.word	0xe000e100
 80015b4:	e000ed00 	.word	0xe000ed00

080015b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	1e5a      	subs	r2, r3, #1
 80015c4:	2380      	movs	r3, #128	@ 0x80
 80015c6:	045b      	lsls	r3, r3, #17
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d301      	bcc.n	80015d0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015cc:	2301      	movs	r3, #1
 80015ce:	e010      	b.n	80015f2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015d0:	4b0a      	ldr	r3, [pc, #40]	@ (80015fc <SysTick_Config+0x44>)
 80015d2:	687a      	ldr	r2, [r7, #4]
 80015d4:	3a01      	subs	r2, #1
 80015d6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015d8:	2301      	movs	r3, #1
 80015da:	425b      	negs	r3, r3
 80015dc:	2103      	movs	r1, #3
 80015de:	0018      	movs	r0, r3
 80015e0:	f7ff ff7c 	bl	80014dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015e4:	4b05      	ldr	r3, [pc, #20]	@ (80015fc <SysTick_Config+0x44>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015ea:	4b04      	ldr	r3, [pc, #16]	@ (80015fc <SysTick_Config+0x44>)
 80015ec:	2207      	movs	r2, #7
 80015ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015f0:	2300      	movs	r3, #0
}
 80015f2:	0018      	movs	r0, r3
 80015f4:	46bd      	mov	sp, r7
 80015f6:	b002      	add	sp, #8
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	46c0      	nop			@ (mov r8, r8)
 80015fc:	e000e010 	.word	0xe000e010

08001600 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0
 8001606:	60b9      	str	r1, [r7, #8]
 8001608:	607a      	str	r2, [r7, #4]
 800160a:	210f      	movs	r1, #15
 800160c:	187b      	adds	r3, r7, r1
 800160e:	1c02      	adds	r2, r0, #0
 8001610:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001612:	68ba      	ldr	r2, [r7, #8]
 8001614:	187b      	adds	r3, r7, r1
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	b25b      	sxtb	r3, r3
 800161a:	0011      	movs	r1, r2
 800161c:	0018      	movs	r0, r3
 800161e:	f7ff ff5d 	bl	80014dc <__NVIC_SetPriority>
}
 8001622:	46c0      	nop			@ (mov r8, r8)
 8001624:	46bd      	mov	sp, r7
 8001626:	b004      	add	sp, #16
 8001628:	bd80      	pop	{r7, pc}

0800162a <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800162a:	b580      	push	{r7, lr}
 800162c:	b082      	sub	sp, #8
 800162e:	af00      	add	r7, sp, #0
 8001630:	0002      	movs	r2, r0
 8001632:	1dfb      	adds	r3, r7, #7
 8001634:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001636:	1dfb      	adds	r3, r7, #7
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	b25b      	sxtb	r3, r3
 800163c:	0018      	movs	r0, r3
 800163e:	f7ff ff33 	bl	80014a8 <__NVIC_EnableIRQ>
}
 8001642:	46c0      	nop			@ (mov r8, r8)
 8001644:	46bd      	mov	sp, r7
 8001646:	b002      	add	sp, #8
 8001648:	bd80      	pop	{r7, pc}

0800164a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800164a:	b580      	push	{r7, lr}
 800164c:	b082      	sub	sp, #8
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	0018      	movs	r0, r3
 8001656:	f7ff ffaf 	bl	80015b8 <SysTick_Config>
 800165a:	0003      	movs	r3, r0
}
 800165c:	0018      	movs	r0, r3
 800165e:	46bd      	mov	sp, r7
 8001660:	b002      	add	sp, #8
 8001662:	bd80      	pop	{r7, pc}

08001664 <HAL_DMA_Init>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d101      	bne.n	8001676 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e077      	b.n	8001766 <HAL_DMA_Init+0x102>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* calculation of the channel index */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a3d      	ldr	r2, [pc, #244]	@ (8001770 <HAL_DMA_Init+0x10c>)
 800167c:	4694      	mov	ip, r2
 800167e:	4463      	add	r3, ip
 8001680:	2114      	movs	r1, #20
 8001682:	0018      	movs	r0, r3
 8001684:	f7fe fd40 	bl	8000108 <__udivsi3>
 8001688:	0003      	movs	r3, r0
                                                                                (uint32_t)DMA1_Channel1)) << 2U;
 800168a:	009a      	lsls	r2, r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2225      	movs	r2, #37	@ 0x25
 8001694:	2102      	movs	r1, #2
 8001696:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4934      	ldr	r1, [pc, #208]	@ (8001774 <HAL_DMA_Init+0x110>)
 80016a4:	400a      	ands	r2, r1
 80016a6:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	6819      	ldr	r1, [r3, #0]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	689a      	ldr	r2, [r3, #8]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	68db      	ldr	r3, [r3, #12]
 80016b6:	431a      	orrs	r2, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	691b      	ldr	r3, [r3, #16]
 80016bc:	431a      	orrs	r2, r3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	695b      	ldr	r3, [r3, #20]
 80016c2:	431a      	orrs	r2, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	699b      	ldr	r3, [r3, #24]
 80016c8:	431a      	orrs	r2, r3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	69db      	ldr	r3, [r3, #28]
 80016ce:	431a      	orrs	r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6a1b      	ldr	r3, [r3, #32]
 80016d4:	431a      	orrs	r2, r3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	430a      	orrs	r2, r1
 80016dc:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	0018      	movs	r0, r3
 80016e2:	f000 fa9f 	bl	8001c24 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	689a      	ldr	r2, [r3, #8]
 80016ea:	2380      	movs	r3, #128	@ 0x80
 80016ec:	01db      	lsls	r3, r3, #7
 80016ee:	429a      	cmp	r2, r3
 80016f0:	d102      	bne.n	80016f8 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2200      	movs	r2, #0
 80016f6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	685a      	ldr	r2, [r3, #4]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001700:	21ff      	movs	r1, #255	@ 0xff
 8001702:	400a      	ands	r2, r1
 8001704:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800170e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d011      	beq.n	800173c <HAL_DMA_Init+0xd8>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	2b04      	cmp	r3, #4
 800171e:	d80d      	bhi.n	800173c <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	0018      	movs	r0, r3
 8001724:	f000 faaa 	bl	8001c7c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001734:	687a      	ldr	r2, [r7, #4]
 8001736:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001738:	605a      	str	r2, [r3, #4]
 800173a:	e008      	b.n	800174e <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2200      	movs	r2, #0
 8001740:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2200      	movs	r2, #0
 8001746:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2200      	movs	r2, #0
 800174c:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2200      	movs	r2, #0
 8001752:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2225      	movs	r2, #37	@ 0x25
 8001758:	2101      	movs	r1, #1
 800175a:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2224      	movs	r2, #36	@ 0x24
 8001760:	2100      	movs	r1, #0
 8001762:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001764:	2300      	movs	r3, #0
}
 8001766:	0018      	movs	r0, r3
 8001768:	46bd      	mov	sp, r7
 800176a:	b002      	add	sp, #8
 800176c:	bd80      	pop	{r7, pc}
 800176e:	46c0      	nop			@ (mov r8, r8)
 8001770:	bffdfff8 	.word	0xbffdfff8
 8001774:	ffff800f 	.word	0xffff800f

08001778 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b086      	sub	sp, #24
 800177c:	af00      	add	r7, sp, #0
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	60b9      	str	r1, [r7, #8]
 8001782:	607a      	str	r2, [r7, #4]
 8001784:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001786:	2317      	movs	r3, #23
 8001788:	18fb      	adds	r3, r7, r3
 800178a:	2200      	movs	r2, #0
 800178c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	2224      	movs	r2, #36	@ 0x24
 8001792:	5c9b      	ldrb	r3, [r3, r2]
 8001794:	2b01      	cmp	r3, #1
 8001796:	d101      	bne.n	800179c <HAL_DMA_Start_IT+0x24>
 8001798:	2302      	movs	r3, #2
 800179a:	e070      	b.n	800187e <HAL_DMA_Start_IT+0x106>
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	2224      	movs	r2, #36	@ 0x24
 80017a0:	2101      	movs	r1, #1
 80017a2:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	2225      	movs	r2, #37	@ 0x25
 80017a8:	5c9b      	ldrb	r3, [r3, r2]
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d157      	bne.n	8001860 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	2225      	movs	r2, #37	@ 0x25
 80017b4:	2102      	movs	r1, #2
 80017b6:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	2200      	movs	r2, #0
 80017bc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2101      	movs	r1, #1
 80017ca:	438a      	bics	r2, r1
 80017cc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	687a      	ldr	r2, [r7, #4]
 80017d2:	68b9      	ldr	r1, [r7, #8]
 80017d4:	68f8      	ldr	r0, [r7, #12]
 80017d6:	f000 f9e5 	bl	8001ba4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d008      	beq.n	80017f4 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	210e      	movs	r1, #14
 80017ee:	430a      	orrs	r2, r1
 80017f0:	601a      	str	r2, [r3, #0]
 80017f2:	e00f      	b.n	8001814 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	2104      	movs	r1, #4
 8001800:	438a      	bics	r2, r1
 8001802:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	210a      	movs	r1, #10
 8001810:	430a      	orrs	r2, r1
 8001812:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	2380      	movs	r3, #128	@ 0x80
 800181c:	025b      	lsls	r3, r3, #9
 800181e:	4013      	ands	r3, r2
 8001820:	d008      	beq.n	8001834 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800182c:	2180      	movs	r1, #128	@ 0x80
 800182e:	0049      	lsls	r1, r1, #1
 8001830:	430a      	orrs	r2, r1
 8001832:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001838:	2b00      	cmp	r3, #0
 800183a:	d008      	beq.n	800184e <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001846:	2180      	movs	r1, #128	@ 0x80
 8001848:	0049      	lsls	r1, r1, #1
 800184a:	430a      	orrs	r2, r1
 800184c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2101      	movs	r1, #1
 800185a:	430a      	orrs	r2, r1
 800185c:	601a      	str	r2, [r3, #0]
 800185e:	e007      	b.n	8001870 <HAL_DMA_Start_IT+0xf8>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	2224      	movs	r2, #36	@ 0x24
 8001864:	2100      	movs	r1, #0
 8001866:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001868:	2317      	movs	r3, #23
 800186a:	18fb      	adds	r3, r7, r3
 800186c:	2202      	movs	r2, #2
 800186e:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hdma);
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	2224      	movs	r2, #36	@ 0x24
 8001874:	2100      	movs	r1, #0
 8001876:	5499      	strb	r1, [r3, r2]

  return status;
 8001878:	2317      	movs	r3, #23
 800187a:	18fb      	adds	r3, r7, r3
 800187c:	781b      	ldrb	r3, [r3, #0]
}
 800187e:	0018      	movs	r0, r3
 8001880:	46bd      	mov	sp, r7
 8001882:	b006      	add	sp, #24
 8001884:	bd80      	pop	{r7, pc}
	...

08001888 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d101      	bne.n	800189a <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e050      	b.n	800193c <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2225      	movs	r2, #37	@ 0x25
 800189e:	5c9b      	ldrb	r3, [r3, r2]
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d008      	beq.n	80018b8 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2204      	movs	r2, #4
 80018aa:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2224      	movs	r2, #36	@ 0x24
 80018b0:	2100      	movs	r1, #0
 80018b2:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e041      	b.n	800193c <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	210e      	movs	r1, #14
 80018c4:	438a      	bics	r2, r1
 80018c6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018d2:	491c      	ldr	r1, [pc, #112]	@ (8001944 <HAL_DMA_Abort+0xbc>)
 80018d4:	400a      	ands	r2, r1
 80018d6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	2101      	movs	r1, #1
 80018e4:	438a      	bics	r2, r1
 80018e6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1cU)));
 80018e8:	4b17      	ldr	r3, [pc, #92]	@ (8001948 <HAL_DMA_Abort+0xc0>)
 80018ea:	6859      	ldr	r1, [r3, #4]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018f0:	221c      	movs	r2, #28
 80018f2:	4013      	ands	r3, r2
 80018f4:	2201      	movs	r2, #1
 80018f6:	409a      	lsls	r2, r3
 80018f8:	4b13      	ldr	r3, [pc, #76]	@ (8001948 <HAL_DMA_Abort+0xc0>)
 80018fa:	430a      	orrs	r2, r1
 80018fc:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001906:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800190c:	2b00      	cmp	r3, #0
 800190e:	d00c      	beq.n	800192a <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800191a:	490a      	ldr	r1, [pc, #40]	@ (8001944 <HAL_DMA_Abort+0xbc>)
 800191c:	400a      	ands	r2, r1
 800191e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001928:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2225      	movs	r2, #37	@ 0x25
 800192e:	2101      	movs	r1, #1
 8001930:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2224      	movs	r2, #36	@ 0x24
 8001936:	2100      	movs	r1, #0
 8001938:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 800193a:	2300      	movs	r3, #0
}
 800193c:	0018      	movs	r0, r3
 800193e:	46bd      	mov	sp, r7
 8001940:	b002      	add	sp, #8
 8001942:	bd80      	pop	{r7, pc}
 8001944:	fffffeff 	.word	0xfffffeff
 8001948:	40020000 	.word	0x40020000

0800194c <HAL_DMA_Abort_IT>:
  * @param  hdma    pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001954:	230f      	movs	r3, #15
 8001956:	18fb      	adds	r3, r7, r3
 8001958:	2200      	movs	r2, #0
 800195a:	701a      	strb	r2, [r3, #0]

  /* Process Unlocked/locked */
  __HAL_UNLOCK(hdma);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2224      	movs	r2, #36	@ 0x24
 8001960:	2100      	movs	r1, #0
 8001962:	5499      	strb	r1, [r3, r2]
  __HAL_LOCK(hdma);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2224      	movs	r2, #36	@ 0x24
 8001968:	5c9b      	ldrb	r3, [r3, r2]
 800196a:	2b01      	cmp	r3, #1
 800196c:	d101      	bne.n	8001972 <HAL_DMA_Abort_IT+0x26>
 800196e:	2302      	movs	r3, #2
 8001970:	e05e      	b.n	8001a30 <HAL_DMA_Abort_IT+0xe4>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2224      	movs	r2, #36	@ 0x24
 8001976:	2101      	movs	r1, #1
 8001978:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2225      	movs	r2, #37	@ 0x25
 800197e:	5c9b      	ldrb	r3, [r3, r2]
 8001980:	b2db      	uxtb	r3, r3
 8001982:	2b02      	cmp	r3, #2
 8001984:	d007      	beq.n	8001996 <HAL_DMA_Abort_IT+0x4a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2204      	movs	r2, #4
 800198a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800198c:	230f      	movs	r3, #15
 800198e:	18fb      	adds	r3, r7, r3
 8001990:	2201      	movs	r2, #1
 8001992:	701a      	strb	r2, [r3, #0]
 8001994:	e049      	b.n	8001a2a <HAL_DMA_Abort_IT+0xde>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	210e      	movs	r1, #14
 80019a2:	438a      	bics	r2, r1
 80019a4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2101      	movs	r1, #1
 80019b2:	438a      	bics	r2, r1
 80019b4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019c0:	491d      	ldr	r1, [pc, #116]	@ (8001a38 <HAL_DMA_Abort_IT+0xec>)
 80019c2:	400a      	ands	r2, r1
 80019c4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 80019c6:	4b1d      	ldr	r3, [pc, #116]	@ (8001a3c <HAL_DMA_Abort_IT+0xf0>)
 80019c8:	6859      	ldr	r1, [r3, #4]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ce:	221c      	movs	r2, #28
 80019d0:	4013      	ands	r3, r2
 80019d2:	2201      	movs	r2, #1
 80019d4:	409a      	lsls	r2, r3
 80019d6:	4b19      	ldr	r3, [pc, #100]	@ (8001a3c <HAL_DMA_Abort_IT+0xf0>)
 80019d8:	430a      	orrs	r2, r1
 80019da:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80019e4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d00c      	beq.n	8001a08 <HAL_DMA_Abort_IT+0xbc>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80019f8:	490f      	ldr	r1, [pc, #60]	@ (8001a38 <HAL_DMA_Abort_IT+0xec>)
 80019fa:	400a      	ands	r2, r1
 80019fc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a02:	687a      	ldr	r2, [r7, #4]
 8001a04:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001a06:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2225      	movs	r2, #37	@ 0x25
 8001a0c:	2101      	movs	r1, #1
 8001a0e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2224      	movs	r2, #36	@ 0x24
 8001a14:	2100      	movs	r1, #0
 8001a16:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d004      	beq.n	8001a2a <HAL_DMA_Abort_IT+0xde>
    {
      hdma->XferAbortCallback(hdma);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a24:	687a      	ldr	r2, [r7, #4]
 8001a26:	0010      	movs	r0, r2
 8001a28:	4798      	blx	r3
    }
  }
  return status;
 8001a2a:	230f      	movs	r3, #15
 8001a2c:	18fb      	adds	r3, r7, r3
 8001a2e:	781b      	ldrb	r3, [r3, #0]
}
 8001a30:	0018      	movs	r0, r3
 8001a32:	46bd      	mov	sp, r7
 8001a34:	b004      	add	sp, #16
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	fffffeff 	.word	0xfffffeff
 8001a3c:	40020000 	.word	0x40020000

08001a40 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = DMA1->ISR;
 8001a48:	4b55      	ldr	r3, [pc, #340]	@ (8001ba0 <HAL_DMA_IRQHandler+0x160>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a5a:	221c      	movs	r2, #28
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	2204      	movs	r2, #4
 8001a60:	409a      	lsls	r2, r3
 8001a62:	0013      	movs	r3, r2
 8001a64:	68fa      	ldr	r2, [r7, #12]
 8001a66:	4013      	ands	r3, r2
 8001a68:	d027      	beq.n	8001aba <HAL_DMA_IRQHandler+0x7a>
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	2204      	movs	r2, #4
 8001a6e:	4013      	ands	r3, r2
 8001a70:	d023      	beq.n	8001aba <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2220      	movs	r2, #32
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	d107      	bne.n	8001a8e <HAL_DMA_IRQHandler+0x4e>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2104      	movs	r1, #4
 8001a8a:	438a      	bics	r2, r1
 8001a8c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 8001a8e:	4b44      	ldr	r3, [pc, #272]	@ (8001ba0 <HAL_DMA_IRQHandler+0x160>)
 8001a90:	6859      	ldr	r1, [r3, #4]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a96:	221c      	movs	r2, #28
 8001a98:	4013      	ands	r3, r2
 8001a9a:	2204      	movs	r2, #4
 8001a9c:	409a      	lsls	r2, r3
 8001a9e:	4b40      	ldr	r3, [pc, #256]	@ (8001ba0 <HAL_DMA_IRQHandler+0x160>)
 8001aa0:	430a      	orrs	r2, r1
 8001aa2:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d100      	bne.n	8001aae <HAL_DMA_IRQHandler+0x6e>
 8001aac:	e073      	b.n	8001b96 <HAL_DMA_IRQHandler+0x156>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	0010      	movs	r0, r2
 8001ab6:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001ab8:	e06d      	b.n	8001b96 <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001abe:	221c      	movs	r2, #28
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	2202      	movs	r2, #2
 8001ac4:	409a      	lsls	r2, r3
 8001ac6:	0013      	movs	r3, r2
 8001ac8:	68fa      	ldr	r2, [r7, #12]
 8001aca:	4013      	ands	r3, r2
 8001acc:	d02e      	beq.n	8001b2c <HAL_DMA_IRQHandler+0xec>
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	2202      	movs	r2, #2
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	d02a      	beq.n	8001b2c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2220      	movs	r2, #32
 8001ade:	4013      	ands	r3, r2
 8001ae0:	d10b      	bne.n	8001afa <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	210a      	movs	r1, #10
 8001aee:	438a      	bics	r2, r1
 8001af0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2225      	movs	r2, #37	@ 0x25
 8001af6:	2101      	movs	r1, #1
 8001af8:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 8001afa:	4b29      	ldr	r3, [pc, #164]	@ (8001ba0 <HAL_DMA_IRQHandler+0x160>)
 8001afc:	6859      	ldr	r1, [r3, #4]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b02:	221c      	movs	r2, #28
 8001b04:	4013      	ands	r3, r2
 8001b06:	2202      	movs	r2, #2
 8001b08:	409a      	lsls	r2, r3
 8001b0a:	4b25      	ldr	r3, [pc, #148]	@ (8001ba0 <HAL_DMA_IRQHandler+0x160>)
 8001b0c:	430a      	orrs	r2, r1
 8001b0e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2224      	movs	r2, #36	@ 0x24
 8001b14:	2100      	movs	r1, #0
 8001b16:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d03a      	beq.n	8001b96 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b24:	687a      	ldr	r2, [r7, #4]
 8001b26:	0010      	movs	r0, r2
 8001b28:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001b2a:	e034      	b.n	8001b96 <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b30:	221c      	movs	r2, #28
 8001b32:	4013      	ands	r3, r2
 8001b34:	2208      	movs	r2, #8
 8001b36:	409a      	lsls	r2, r3
 8001b38:	0013      	movs	r3, r2
 8001b3a:	68fa      	ldr	r2, [r7, #12]
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	d02b      	beq.n	8001b98 <HAL_DMA_IRQHandler+0x158>
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	2208      	movs	r2, #8
 8001b44:	4013      	ands	r3, r2
 8001b46:	d027      	beq.n	8001b98 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	210e      	movs	r1, #14
 8001b54:	438a      	bics	r2, r1
 8001b56:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8001b58:	4b11      	ldr	r3, [pc, #68]	@ (8001ba0 <HAL_DMA_IRQHandler+0x160>)
 8001b5a:	6859      	ldr	r1, [r3, #4]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b60:	221c      	movs	r2, #28
 8001b62:	4013      	ands	r3, r2
 8001b64:	2201      	movs	r2, #1
 8001b66:	409a      	lsls	r2, r3
 8001b68:	4b0d      	ldr	r3, [pc, #52]	@ (8001ba0 <HAL_DMA_IRQHandler+0x160>)
 8001b6a:	430a      	orrs	r2, r1
 8001b6c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2201      	movs	r2, #1
 8001b72:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2225      	movs	r2, #37	@ 0x25
 8001b78:	2101      	movs	r1, #1
 8001b7a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2224      	movs	r2, #36	@ 0x24
 8001b80:	2100      	movs	r1, #0
 8001b82:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d005      	beq.n	8001b98 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	0010      	movs	r0, r2
 8001b94:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001b96:	46c0      	nop			@ (mov r8, r8)
 8001b98:	46c0      	nop			@ (mov r8, r8)
}
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	b004      	add	sp, #16
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	40020000 	.word	0x40020000

08001ba4 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	60f8      	str	r0, [r7, #12]
 8001bac:	60b9      	str	r1, [r7, #8]
 8001bae:	607a      	str	r2, [r7, #4]
 8001bb0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bb6:	68fa      	ldr	r2, [r7, #12]
 8001bb8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001bba:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d004      	beq.n	8001bce <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bc8:	68fa      	ldr	r2, [r7, #12]
 8001bca:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001bcc:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8001bce:	4b14      	ldr	r3, [pc, #80]	@ (8001c20 <DMA_SetConfig+0x7c>)
 8001bd0:	6859      	ldr	r1, [r3, #4]
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd6:	221c      	movs	r2, #28
 8001bd8:	4013      	ands	r3, r2
 8001bda:	2201      	movs	r2, #1
 8001bdc:	409a      	lsls	r2, r3
 8001bde:	4b10      	ldr	r3, [pc, #64]	@ (8001c20 <DMA_SetConfig+0x7c>)
 8001be0:	430a      	orrs	r2, r1
 8001be2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	683a      	ldr	r2, [r7, #0]
 8001bea:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	2b10      	cmp	r3, #16
 8001bf2:	d108      	bne.n	8001c06 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	68ba      	ldr	r2, [r7, #8]
 8001c02:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001c04:	e007      	b.n	8001c16 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	68ba      	ldr	r2, [r7, #8]
 8001c0c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	60da      	str	r2, [r3, #12]
}
 8001c16:	46c0      	nop			@ (mov r8, r8)
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	b004      	add	sp, #16
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	46c0      	nop			@ (mov r8, r8)
 8001c20:	40020000 	.word	0x40020000

08001c24 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	001a      	movs	r2, r3
 8001c32:	23ff      	movs	r3, #255	@ 0xff
 8001c34:	4013      	ands	r3, r2
 8001c36:	3b08      	subs	r3, #8
 8001c38:	2114      	movs	r1, #20
 8001c3a:	0018      	movs	r0, r3
 8001c3c:	f7fe fa64 	bl	8000108 <__udivsi3>
 8001c40:	0003      	movs	r3, r0
 8001c42:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
                                                             ((hdma->ChannelIndex >> 2U) * \
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c48:	089b      	lsrs	r3, r3, #2
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 8001c4a:	4a0a      	ldr	r2, [pc, #40]	@ (8001c74 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8001c4c:	4694      	mov	ip, r2
 8001c4e:	4463      	add	r3, ip
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	001a      	movs	r2, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	645a      	str	r2, [r3, #68]	@ 0x44
                                                              ((uint32_t)DMAMUX1_Channel1 - \
                                                               (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	4a07      	ldr	r2, [pc, #28]	@ (8001c78 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8001c5c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	221c      	movs	r2, #28
 8001c62:	4013      	ands	r3, r2
 8001c64:	2201      	movs	r2, #1
 8001c66:	409a      	lsls	r2, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8001c6c:	46c0      	nop			@ (mov r8, r8)
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	b004      	add	sp, #16
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	10008200 	.word	0x10008200
 8001c78:	40020880 	.word	0x40020880

08001c7c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	22ff      	movs	r2, #255	@ 0xff
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	4a0a      	ldr	r2, [pc, #40]	@ (8001cbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001c92:	4694      	mov	ip, r2
 8001c94:	4463      	add	r3, ip
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	001a      	movs	r2, r3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	651a      	str	r2, [r3, #80]	@ 0x50
                                                                    ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4a07      	ldr	r2, [pc, #28]	@ (8001cc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001ca2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	3b01      	subs	r3, #1
 8001ca8:	2203      	movs	r2, #3
 8001caa:	4013      	ands	r3, r2
 8001cac:	2201      	movs	r2, #1
 8001cae:	409a      	lsls	r2, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8001cb4:	46c0      	nop			@ (mov r8, r8)
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	b004      	add	sp, #16
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	1000823f 	.word	0x1000823f
 8001cc0:	40020940 	.word	0x40020940

08001cc4 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b086      	sub	sp, #24
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001cd2:	e153      	b.n	8001f7c <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	2101      	movs	r1, #1
 8001cda:	693a      	ldr	r2, [r7, #16]
 8001cdc:	4091      	lsls	r1, r2
 8001cde:	000a      	movs	r2, r1
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d100      	bne.n	8001cec <HAL_GPIO_Init+0x28>
 8001cea:	e144      	b.n	8001f76 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	d003      	beq.n	8001cfc <HAL_GPIO_Init+0x38>
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	2b12      	cmp	r3, #18
 8001cfa:	d125      	bne.n	8001d48 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	08da      	lsrs	r2, r3, #3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	3208      	adds	r2, #8
 8001d04:	0092      	lsls	r2, r2, #2
 8001d06:	58d3      	ldr	r3, [r2, r3]
 8001d08:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	2207      	movs	r2, #7
 8001d0e:	4013      	ands	r3, r2
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	220f      	movs	r2, #15
 8001d14:	409a      	lsls	r2, r3
 8001d16:	0013      	movs	r3, r2
 8001d18:	43da      	mvns	r2, r3
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	691b      	ldr	r3, [r3, #16]
 8001d24:	220f      	movs	r2, #15
 8001d26:	401a      	ands	r2, r3
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	2107      	movs	r1, #7
 8001d2c:	400b      	ands	r3, r1
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	409a      	lsls	r2, r3
 8001d32:	0013      	movs	r3, r2
 8001d34:	697a      	ldr	r2, [r7, #20]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	08da      	lsrs	r2, r3, #3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	3208      	adds	r2, #8
 8001d42:	0092      	lsls	r2, r2, #2
 8001d44:	6979      	ldr	r1, [r7, #20]
 8001d46:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	2203      	movs	r2, #3
 8001d54:	409a      	lsls	r2, r3
 8001d56:	0013      	movs	r3, r2
 8001d58:	43da      	mvns	r2, r3
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	2203      	movs	r2, #3
 8001d66:	401a      	ands	r2, r3
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	005b      	lsls	r3, r3, #1
 8001d6c:	409a      	lsls	r2, r3
 8001d6e:	0013      	movs	r3, r2
 8001d70:	697a      	ldr	r2, [r7, #20]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	697a      	ldr	r2, [r7, #20]
 8001d7a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d00b      	beq.n	8001d9c <HAL_GPIO_Init+0xd8>
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d007      	beq.n	8001d9c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d90:	2b11      	cmp	r3, #17
 8001d92:	d003      	beq.n	8001d9c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	2b12      	cmp	r3, #18
 8001d9a:	d130      	bne.n	8001dfe <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	005b      	lsls	r3, r3, #1
 8001da6:	2203      	movs	r2, #3
 8001da8:	409a      	lsls	r2, r3
 8001daa:	0013      	movs	r3, r2
 8001dac:	43da      	mvns	r2, r3
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	4013      	ands	r3, r2
 8001db2:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	68da      	ldr	r2, [r3, #12]
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	409a      	lsls	r2, r3
 8001dbe:	0013      	movs	r3, r2
 8001dc0:	697a      	ldr	r2, [r7, #20]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	697a      	ldr	r2, [r7, #20]
 8001dca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	409a      	lsls	r2, r3
 8001dd8:	0013      	movs	r3, r2
 8001dda:	43da      	mvns	r2, r3
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	4013      	ands	r3, r2
 8001de0:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	091b      	lsrs	r3, r3, #4
 8001de8:	2201      	movs	r2, #1
 8001dea:	401a      	ands	r2, r3
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	409a      	lsls	r2, r3
 8001df0:	0013      	movs	r3, r2
 8001df2:	697a      	ldr	r2, [r7, #20]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	697a      	ldr	r2, [r7, #20]
 8001dfc:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	2b03      	cmp	r3, #3
 8001e04:	d017      	beq.n	8001e36 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	005b      	lsls	r3, r3, #1
 8001e10:	2203      	movs	r2, #3
 8001e12:	409a      	lsls	r2, r3
 8001e14:	0013      	movs	r3, r2
 8001e16:	43da      	mvns	r2, r3
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	689a      	ldr	r2, [r3, #8]
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	409a      	lsls	r2, r3
 8001e28:	0013      	movs	r3, r2
 8001e2a:	697a      	ldr	r2, [r7, #20]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	697a      	ldr	r2, [r7, #20]
 8001e34:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	685a      	ldr	r2, [r3, #4]
 8001e3a:	2380      	movs	r3, #128	@ 0x80
 8001e3c:	055b      	lsls	r3, r3, #21
 8001e3e:	4013      	ands	r3, r2
 8001e40:	d100      	bne.n	8001e44 <HAL_GPIO_Init+0x180>
 8001e42:	e098      	b.n	8001f76 <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001e44:	4a53      	ldr	r2, [pc, #332]	@ (8001f94 <HAL_GPIO_Init+0x2d0>)
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	089b      	lsrs	r3, r3, #2
 8001e4a:	3318      	adds	r3, #24
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	589b      	ldr	r3, [r3, r2]
 8001e50:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	2203      	movs	r2, #3
 8001e56:	4013      	ands	r3, r2
 8001e58:	00db      	lsls	r3, r3, #3
 8001e5a:	220f      	movs	r2, #15
 8001e5c:	409a      	lsls	r2, r3
 8001e5e:	0013      	movs	r3, r2
 8001e60:	43da      	mvns	r2, r3
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	4013      	ands	r3, r2
 8001e66:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	23a0      	movs	r3, #160	@ 0xa0
 8001e6c:	05db      	lsls	r3, r3, #23
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d019      	beq.n	8001ea6 <HAL_GPIO_Init+0x1e2>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a48      	ldr	r2, [pc, #288]	@ (8001f98 <HAL_GPIO_Init+0x2d4>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d013      	beq.n	8001ea2 <HAL_GPIO_Init+0x1de>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a47      	ldr	r2, [pc, #284]	@ (8001f9c <HAL_GPIO_Init+0x2d8>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d00d      	beq.n	8001e9e <HAL_GPIO_Init+0x1da>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a46      	ldr	r2, [pc, #280]	@ (8001fa0 <HAL_GPIO_Init+0x2dc>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d007      	beq.n	8001e9a <HAL_GPIO_Init+0x1d6>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a45      	ldr	r2, [pc, #276]	@ (8001fa4 <HAL_GPIO_Init+0x2e0>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d101      	bne.n	8001e96 <HAL_GPIO_Init+0x1d2>
 8001e92:	2305      	movs	r3, #5
 8001e94:	e008      	b.n	8001ea8 <HAL_GPIO_Init+0x1e4>
 8001e96:	2306      	movs	r3, #6
 8001e98:	e006      	b.n	8001ea8 <HAL_GPIO_Init+0x1e4>
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e004      	b.n	8001ea8 <HAL_GPIO_Init+0x1e4>
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	e002      	b.n	8001ea8 <HAL_GPIO_Init+0x1e4>
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e000      	b.n	8001ea8 <HAL_GPIO_Init+0x1e4>
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	693a      	ldr	r2, [r7, #16]
 8001eaa:	2103      	movs	r1, #3
 8001eac:	400a      	ands	r2, r1
 8001eae:	00d2      	lsls	r2, r2, #3
 8001eb0:	4093      	lsls	r3, r2
 8001eb2:	697a      	ldr	r2, [r7, #20]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001eb8:	4936      	ldr	r1, [pc, #216]	@ (8001f94 <HAL_GPIO_Init+0x2d0>)
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	089b      	lsrs	r3, r3, #2
 8001ebe:	3318      	adds	r3, #24
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	697a      	ldr	r2, [r7, #20]
 8001ec4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8001ec6:	4a33      	ldr	r2, [pc, #204]	@ (8001f94 <HAL_GPIO_Init+0x2d0>)
 8001ec8:	2380      	movs	r3, #128	@ 0x80
 8001eca:	58d3      	ldr	r3, [r2, r3]
 8001ecc:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	43da      	mvns	r2, r3
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685a      	ldr	r2, [r3, #4]
 8001edc:	2380      	movs	r3, #128	@ 0x80
 8001ede:	025b      	lsls	r3, r3, #9
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	d003      	beq.n	8001eec <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 8001ee4:	697a      	ldr	r2, [r7, #20]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001eec:	4929      	ldr	r1, [pc, #164]	@ (8001f94 <HAL_GPIO_Init+0x2d0>)
 8001eee:	2280      	movs	r2, #128	@ 0x80
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8001ef4:	4a27      	ldr	r2, [pc, #156]	@ (8001f94 <HAL_GPIO_Init+0x2d0>)
 8001ef6:	2384      	movs	r3, #132	@ 0x84
 8001ef8:	58d3      	ldr	r3, [r2, r3]
 8001efa:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	43da      	mvns	r2, r3
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	4013      	ands	r3, r2
 8001f04:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685a      	ldr	r2, [r3, #4]
 8001f0a:	2380      	movs	r3, #128	@ 0x80
 8001f0c:	029b      	lsls	r3, r3, #10
 8001f0e:	4013      	ands	r3, r2
 8001f10:	d003      	beq.n	8001f1a <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 8001f12:	697a      	ldr	r2, [r7, #20]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8001f1a:	491e      	ldr	r1, [pc, #120]	@ (8001f94 <HAL_GPIO_Init+0x2d0>)
 8001f1c:	2284      	movs	r2, #132	@ 0x84
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001f22:	4b1c      	ldr	r3, [pc, #112]	@ (8001f94 <HAL_GPIO_Init+0x2d0>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	43da      	mvns	r2, r3
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	4013      	ands	r3, r2
 8001f30:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	685a      	ldr	r2, [r3, #4]
 8001f36:	2380      	movs	r3, #128	@ 0x80
 8001f38:	035b      	lsls	r3, r3, #13
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	d003      	beq.n	8001f46 <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 8001f3e:	697a      	ldr	r2, [r7, #20]
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8001f46:	4b13      	ldr	r3, [pc, #76]	@ (8001f94 <HAL_GPIO_Init+0x2d0>)
 8001f48:	697a      	ldr	r2, [r7, #20]
 8001f4a:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8001f4c:	4b11      	ldr	r3, [pc, #68]	@ (8001f94 <HAL_GPIO_Init+0x2d0>)
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	43da      	mvns	r2, r3
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	4013      	ands	r3, r2
 8001f5a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	685a      	ldr	r2, [r3, #4]
 8001f60:	2380      	movs	r3, #128	@ 0x80
 8001f62:	039b      	lsls	r3, r3, #14
 8001f64:	4013      	ands	r3, r2
 8001f66:	d003      	beq.n	8001f70 <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 8001f68:	697a      	ldr	r2, [r7, #20]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8001f70:	4b08      	ldr	r3, [pc, #32]	@ (8001f94 <HAL_GPIO_Init+0x2d0>)
 8001f72:	697a      	ldr	r2, [r7, #20]
 8001f74:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	3301      	adds	r3, #1
 8001f7a:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	40da      	lsrs	r2, r3
 8001f84:	1e13      	subs	r3, r2, #0
 8001f86:	d000      	beq.n	8001f8a <HAL_GPIO_Init+0x2c6>
 8001f88:	e6a4      	b.n	8001cd4 <HAL_GPIO_Init+0x10>
  }
}
 8001f8a:	46c0      	nop			@ (mov r8, r8)
 8001f8c:	46c0      	nop			@ (mov r8, r8)
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	b006      	add	sp, #24
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	40021800 	.word	0x40021800
 8001f98:	50000400 	.word	0x50000400
 8001f9c:	50000800 	.word	0x50000800
 8001fa0:	50000c00 	.word	0x50000c00
 8001fa4:	50001400 	.word	0x50001400

08001fa8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	000a      	movs	r2, r1
 8001fb2:	1cbb      	adds	r3, r7, #2
 8001fb4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	691b      	ldr	r3, [r3, #16]
 8001fba:	1cba      	adds	r2, r7, #2
 8001fbc:	8812      	ldrh	r2, [r2, #0]
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	d004      	beq.n	8001fcc <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001fc2:	230f      	movs	r3, #15
 8001fc4:	18fb      	adds	r3, r7, r3
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	701a      	strb	r2, [r3, #0]
 8001fca:	e003      	b.n	8001fd4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001fcc:	230f      	movs	r3, #15
 8001fce:	18fb      	adds	r3, r7, r3
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001fd4:	230f      	movs	r3, #15
 8001fd6:	18fb      	adds	r3, r7, r3
 8001fd8:	781b      	ldrb	r3, [r3, #0]
}
 8001fda:	0018      	movs	r0, r3
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	b004      	add	sp, #16
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	b082      	sub	sp, #8
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
 8001fea:	0008      	movs	r0, r1
 8001fec:	0011      	movs	r1, r2
 8001fee:	1cbb      	adds	r3, r7, #2
 8001ff0:	1c02      	adds	r2, r0, #0
 8001ff2:	801a      	strh	r2, [r3, #0]
 8001ff4:	1c7b      	adds	r3, r7, #1
 8001ff6:	1c0a      	adds	r2, r1, #0
 8001ff8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ffa:	1c7b      	adds	r3, r7, #1
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d004      	beq.n	800200c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002002:	1cbb      	adds	r3, r7, #2
 8002004:	881a      	ldrh	r2, [r3, #0]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800200a:	e003      	b.n	8002014 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800200c:	1cbb      	adds	r3, r7, #2
 800200e:	881a      	ldrh	r2, [r3, #0]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002014:	46c0      	nop			@ (mov r8, r8)
 8002016:	46bd      	mov	sp, r7
 8002018:	b002      	add	sp, #8
 800201a:	bd80      	pop	{r7, pc}

0800201c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b086      	sub	sp, #24
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d101      	bne.n	800202e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e20f      	b.n	800244e <HAL_RCC_OscConfig+0x432>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	2201      	movs	r2, #1
 8002034:	4013      	ands	r3, r2
 8002036:	d100      	bne.n	800203a <HAL_RCC_OscConfig+0x1e>
 8002038:	e069      	b.n	800210e <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800203a:	4bc8      	ldr	r3, [pc, #800]	@ (800235c <HAL_RCC_OscConfig+0x340>)
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	2238      	movs	r2, #56	@ 0x38
 8002040:	4013      	ands	r3, r2
 8002042:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	2b08      	cmp	r3, #8
 8002048:	d105      	bne.n	8002056 <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d15d      	bne.n	800210e <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e1fb      	b.n	800244e <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685a      	ldr	r2, [r3, #4]
 800205a:	2380      	movs	r3, #128	@ 0x80
 800205c:	025b      	lsls	r3, r3, #9
 800205e:	429a      	cmp	r2, r3
 8002060:	d107      	bne.n	8002072 <HAL_RCC_OscConfig+0x56>
 8002062:	4bbe      	ldr	r3, [pc, #760]	@ (800235c <HAL_RCC_OscConfig+0x340>)
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	4bbd      	ldr	r3, [pc, #756]	@ (800235c <HAL_RCC_OscConfig+0x340>)
 8002068:	2180      	movs	r1, #128	@ 0x80
 800206a:	0249      	lsls	r1, r1, #9
 800206c:	430a      	orrs	r2, r1
 800206e:	601a      	str	r2, [r3, #0]
 8002070:	e020      	b.n	80020b4 <HAL_RCC_OscConfig+0x98>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685a      	ldr	r2, [r3, #4]
 8002076:	23a0      	movs	r3, #160	@ 0xa0
 8002078:	02db      	lsls	r3, r3, #11
 800207a:	429a      	cmp	r2, r3
 800207c:	d10e      	bne.n	800209c <HAL_RCC_OscConfig+0x80>
 800207e:	4bb7      	ldr	r3, [pc, #732]	@ (800235c <HAL_RCC_OscConfig+0x340>)
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	4bb6      	ldr	r3, [pc, #728]	@ (800235c <HAL_RCC_OscConfig+0x340>)
 8002084:	2180      	movs	r1, #128	@ 0x80
 8002086:	02c9      	lsls	r1, r1, #11
 8002088:	430a      	orrs	r2, r1
 800208a:	601a      	str	r2, [r3, #0]
 800208c:	4bb3      	ldr	r3, [pc, #716]	@ (800235c <HAL_RCC_OscConfig+0x340>)
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	4bb2      	ldr	r3, [pc, #712]	@ (800235c <HAL_RCC_OscConfig+0x340>)
 8002092:	2180      	movs	r1, #128	@ 0x80
 8002094:	0249      	lsls	r1, r1, #9
 8002096:	430a      	orrs	r2, r1
 8002098:	601a      	str	r2, [r3, #0]
 800209a:	e00b      	b.n	80020b4 <HAL_RCC_OscConfig+0x98>
 800209c:	4baf      	ldr	r3, [pc, #700]	@ (800235c <HAL_RCC_OscConfig+0x340>)
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	4bae      	ldr	r3, [pc, #696]	@ (800235c <HAL_RCC_OscConfig+0x340>)
 80020a2:	49af      	ldr	r1, [pc, #700]	@ (8002360 <HAL_RCC_OscConfig+0x344>)
 80020a4:	400a      	ands	r2, r1
 80020a6:	601a      	str	r2, [r3, #0]
 80020a8:	4bac      	ldr	r3, [pc, #688]	@ (800235c <HAL_RCC_OscConfig+0x340>)
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	4bab      	ldr	r3, [pc, #684]	@ (800235c <HAL_RCC_OscConfig+0x340>)
 80020ae:	49ad      	ldr	r1, [pc, #692]	@ (8002364 <HAL_RCC_OscConfig+0x348>)
 80020b0:	400a      	ands	r2, r1
 80020b2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d014      	beq.n	80020e6 <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020bc:	f7ff f9c6 	bl	800144c <HAL_GetTick>
 80020c0:	0003      	movs	r3, r0
 80020c2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020c4:	e008      	b.n	80020d8 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80020c6:	f7ff f9c1 	bl	800144c <HAL_GetTick>
 80020ca:	0002      	movs	r2, r0
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	2b64      	cmp	r3, #100	@ 0x64
 80020d2:	d901      	bls.n	80020d8 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80020d4:	2303      	movs	r3, #3
 80020d6:	e1ba      	b.n	800244e <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020d8:	4ba0      	ldr	r3, [pc, #640]	@ (800235c <HAL_RCC_OscConfig+0x340>)
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	2380      	movs	r3, #128	@ 0x80
 80020de:	029b      	lsls	r3, r3, #10
 80020e0:	4013      	ands	r3, r2
 80020e2:	d0f0      	beq.n	80020c6 <HAL_RCC_OscConfig+0xaa>
 80020e4:	e013      	b.n	800210e <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020e6:	f7ff f9b1 	bl	800144c <HAL_GetTick>
 80020ea:	0003      	movs	r3, r0
 80020ec:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020ee:	e008      	b.n	8002102 <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80020f0:	f7ff f9ac 	bl	800144c <HAL_GetTick>
 80020f4:	0002      	movs	r2, r0
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	2b64      	cmp	r3, #100	@ 0x64
 80020fc:	d901      	bls.n	8002102 <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	e1a5      	b.n	800244e <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002102:	4b96      	ldr	r3, [pc, #600]	@ (800235c <HAL_RCC_OscConfig+0x340>)
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	2380      	movs	r3, #128	@ 0x80
 8002108:	029b      	lsls	r3, r3, #10
 800210a:	4013      	ands	r3, r2
 800210c:	d1f0      	bne.n	80020f0 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	2202      	movs	r2, #2
 8002114:	4013      	ands	r3, r2
 8002116:	d100      	bne.n	800211a <HAL_RCC_OscConfig+0xfe>
 8002118:	e086      	b.n	8002228 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800211a:	4b90      	ldr	r3, [pc, #576]	@ (800235c <HAL_RCC_OscConfig+0x340>)
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	2238      	movs	r2, #56	@ 0x38
 8002120:	4013      	ands	r3, r2
 8002122:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d12f      	bne.n	800218a <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	68db      	ldr	r3, [r3, #12]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d101      	bne.n	8002136 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e18b      	b.n	800244e <HAL_RCC_OscConfig+0x432>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002136:	4b89      	ldr	r3, [pc, #548]	@ (800235c <HAL_RCC_OscConfig+0x340>)
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	4a8b      	ldr	r2, [pc, #556]	@ (8002368 <HAL_RCC_OscConfig+0x34c>)
 800213c:	4013      	ands	r3, r2
 800213e:	0019      	movs	r1, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	695b      	ldr	r3, [r3, #20]
 8002144:	021a      	lsls	r2, r3, #8
 8002146:	4b85      	ldr	r3, [pc, #532]	@ (800235c <HAL_RCC_OscConfig+0x340>)
 8002148:	430a      	orrs	r2, r1
 800214a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d112      	bne.n	8002178 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002152:	4b82      	ldr	r3, [pc, #520]	@ (800235c <HAL_RCC_OscConfig+0x340>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a85      	ldr	r2, [pc, #532]	@ (800236c <HAL_RCC_OscConfig+0x350>)
 8002158:	4013      	ands	r3, r2
 800215a:	0019      	movs	r1, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	691a      	ldr	r2, [r3, #16]
 8002160:	4b7e      	ldr	r3, [pc, #504]	@ (800235c <HAL_RCC_OscConfig+0x340>)
 8002162:	430a      	orrs	r2, r1
 8002164:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002166:	4b7d      	ldr	r3, [pc, #500]	@ (800235c <HAL_RCC_OscConfig+0x340>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	0adb      	lsrs	r3, r3, #11
 800216c:	2207      	movs	r2, #7
 800216e:	4013      	ands	r3, r2
 8002170:	4a7f      	ldr	r2, [pc, #508]	@ (8002370 <HAL_RCC_OscConfig+0x354>)
 8002172:	40da      	lsrs	r2, r3
 8002174:	4b7f      	ldr	r3, [pc, #508]	@ (8002374 <HAL_RCC_OscConfig+0x358>)
 8002176:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002178:	4b7f      	ldr	r3, [pc, #508]	@ (8002378 <HAL_RCC_OscConfig+0x35c>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	0018      	movs	r0, r3
 800217e:	f7ff f909 	bl	8001394 <HAL_InitTick>
 8002182:	1e03      	subs	r3, r0, #0
 8002184:	d050      	beq.n	8002228 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e161      	b.n	800244e <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d030      	beq.n	80021f4 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002192:	4b72      	ldr	r3, [pc, #456]	@ (800235c <HAL_RCC_OscConfig+0x340>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a75      	ldr	r2, [pc, #468]	@ (800236c <HAL_RCC_OscConfig+0x350>)
 8002198:	4013      	ands	r3, r2
 800219a:	0019      	movs	r1, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	691a      	ldr	r2, [r3, #16]
 80021a0:	4b6e      	ldr	r3, [pc, #440]	@ (800235c <HAL_RCC_OscConfig+0x340>)
 80021a2:	430a      	orrs	r2, r1
 80021a4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 80021a6:	4b6d      	ldr	r3, [pc, #436]	@ (800235c <HAL_RCC_OscConfig+0x340>)
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	4b6c      	ldr	r3, [pc, #432]	@ (800235c <HAL_RCC_OscConfig+0x340>)
 80021ac:	2180      	movs	r1, #128	@ 0x80
 80021ae:	0049      	lsls	r1, r1, #1
 80021b0:	430a      	orrs	r2, r1
 80021b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b4:	f7ff f94a 	bl	800144c <HAL_GetTick>
 80021b8:	0003      	movs	r3, r0
 80021ba:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021bc:	e008      	b.n	80021d0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80021be:	f7ff f945 	bl	800144c <HAL_GetTick>
 80021c2:	0002      	movs	r2, r0
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	2b02      	cmp	r3, #2
 80021ca:	d901      	bls.n	80021d0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80021cc:	2303      	movs	r3, #3
 80021ce:	e13e      	b.n	800244e <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021d0:	4b62      	ldr	r3, [pc, #392]	@ (800235c <HAL_RCC_OscConfig+0x340>)
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	2380      	movs	r3, #128	@ 0x80
 80021d6:	00db      	lsls	r3, r3, #3
 80021d8:	4013      	ands	r3, r2
 80021da:	d0f0      	beq.n	80021be <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021dc:	4b5f      	ldr	r3, [pc, #380]	@ (800235c <HAL_RCC_OscConfig+0x340>)
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	4a61      	ldr	r2, [pc, #388]	@ (8002368 <HAL_RCC_OscConfig+0x34c>)
 80021e2:	4013      	ands	r3, r2
 80021e4:	0019      	movs	r1, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	695b      	ldr	r3, [r3, #20]
 80021ea:	021a      	lsls	r2, r3, #8
 80021ec:	4b5b      	ldr	r3, [pc, #364]	@ (800235c <HAL_RCC_OscConfig+0x340>)
 80021ee:	430a      	orrs	r2, r1
 80021f0:	605a      	str	r2, [r3, #4]
 80021f2:	e019      	b.n	8002228 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 80021f4:	4b59      	ldr	r3, [pc, #356]	@ (800235c <HAL_RCC_OscConfig+0x340>)
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	4b58      	ldr	r3, [pc, #352]	@ (800235c <HAL_RCC_OscConfig+0x340>)
 80021fa:	4960      	ldr	r1, [pc, #384]	@ (800237c <HAL_RCC_OscConfig+0x360>)
 80021fc:	400a      	ands	r2, r1
 80021fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002200:	f7ff f924 	bl	800144c <HAL_GetTick>
 8002204:	0003      	movs	r3, r0
 8002206:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002208:	e008      	b.n	800221c <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800220a:	f7ff f91f 	bl	800144c <HAL_GetTick>
 800220e:	0002      	movs	r2, r0
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	2b02      	cmp	r3, #2
 8002216:	d901      	bls.n	800221c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	e118      	b.n	800244e <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800221c:	4b4f      	ldr	r3, [pc, #316]	@ (800235c <HAL_RCC_OscConfig+0x340>)
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	2380      	movs	r3, #128	@ 0x80
 8002222:	00db      	lsls	r3, r3, #3
 8002224:	4013      	ands	r3, r2
 8002226:	d1f0      	bne.n	800220a <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	2208      	movs	r2, #8
 800222e:	4013      	ands	r3, r2
 8002230:	d042      	beq.n	80022b8 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002232:	4b4a      	ldr	r3, [pc, #296]	@ (800235c <HAL_RCC_OscConfig+0x340>)
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	2238      	movs	r2, #56	@ 0x38
 8002238:	4013      	ands	r3, r2
 800223a:	2b18      	cmp	r3, #24
 800223c:	d105      	bne.n	800224a <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	699b      	ldr	r3, [r3, #24]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d138      	bne.n	80022b8 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e101      	b.n	800244e <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	699b      	ldr	r3, [r3, #24]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d019      	beq.n	8002286 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002252:	4b42      	ldr	r3, [pc, #264]	@ (800235c <HAL_RCC_OscConfig+0x340>)
 8002254:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002256:	4b41      	ldr	r3, [pc, #260]	@ (800235c <HAL_RCC_OscConfig+0x340>)
 8002258:	2101      	movs	r1, #1
 800225a:	430a      	orrs	r2, r1
 800225c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800225e:	f7ff f8f5 	bl	800144c <HAL_GetTick>
 8002262:	0003      	movs	r3, r0
 8002264:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002266:	e008      	b.n	800227a <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002268:	f7ff f8f0 	bl	800144c <HAL_GetTick>
 800226c:	0002      	movs	r2, r0
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	2b02      	cmp	r3, #2
 8002274:	d901      	bls.n	800227a <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	e0e9      	b.n	800244e <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800227a:	4b38      	ldr	r3, [pc, #224]	@ (800235c <HAL_RCC_OscConfig+0x340>)
 800227c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800227e:	2202      	movs	r2, #2
 8002280:	4013      	ands	r3, r2
 8002282:	d0f1      	beq.n	8002268 <HAL_RCC_OscConfig+0x24c>
 8002284:	e018      	b.n	80022b8 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002286:	4b35      	ldr	r3, [pc, #212]	@ (800235c <HAL_RCC_OscConfig+0x340>)
 8002288:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800228a:	4b34      	ldr	r3, [pc, #208]	@ (800235c <HAL_RCC_OscConfig+0x340>)
 800228c:	2101      	movs	r1, #1
 800228e:	438a      	bics	r2, r1
 8002290:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002292:	f7ff f8db 	bl	800144c <HAL_GetTick>
 8002296:	0003      	movs	r3, r0
 8002298:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 800229a:	e008      	b.n	80022ae <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800229c:	f7ff f8d6 	bl	800144c <HAL_GetTick>
 80022a0:	0002      	movs	r2, r0
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d901      	bls.n	80022ae <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e0cf      	b.n	800244e <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 80022ae:	4b2b      	ldr	r3, [pc, #172]	@ (800235c <HAL_RCC_OscConfig+0x340>)
 80022b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022b2:	2202      	movs	r2, #2
 80022b4:	4013      	ands	r3, r2
 80022b6:	d1f1      	bne.n	800229c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	2204      	movs	r2, #4
 80022be:	4013      	ands	r3, r2
 80022c0:	d100      	bne.n	80022c4 <HAL_RCC_OscConfig+0x2a8>
 80022c2:	e084      	b.n	80023ce <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022c4:	230f      	movs	r3, #15
 80022c6:	18fb      	adds	r3, r7, r3
 80022c8:	2200      	movs	r2, #0
 80022ca:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80022cc:	4b23      	ldr	r3, [pc, #140]	@ (800235c <HAL_RCC_OscConfig+0x340>)
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	2238      	movs	r2, #56	@ 0x38
 80022d2:	4013      	ands	r3, r2
 80022d4:	2b20      	cmp	r3, #32
 80022d6:	d106      	bne.n	80022e6 <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d000      	beq.n	80022e2 <HAL_RCC_OscConfig+0x2c6>
 80022e0:	e075      	b.n	80023ce <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e0b3      	b.n	800244e <HAL_RCC_OscConfig+0x432>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d106      	bne.n	80022fc <HAL_RCC_OscConfig+0x2e0>
 80022ee:	4b1b      	ldr	r3, [pc, #108]	@ (800235c <HAL_RCC_OscConfig+0x340>)
 80022f0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80022f2:	4b1a      	ldr	r3, [pc, #104]	@ (800235c <HAL_RCC_OscConfig+0x340>)
 80022f4:	2101      	movs	r1, #1
 80022f6:	430a      	orrs	r2, r1
 80022f8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80022fa:	e01c      	b.n	8002336 <HAL_RCC_OscConfig+0x31a>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	2b05      	cmp	r3, #5
 8002302:	d10c      	bne.n	800231e <HAL_RCC_OscConfig+0x302>
 8002304:	4b15      	ldr	r3, [pc, #84]	@ (800235c <HAL_RCC_OscConfig+0x340>)
 8002306:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002308:	4b14      	ldr	r3, [pc, #80]	@ (800235c <HAL_RCC_OscConfig+0x340>)
 800230a:	2104      	movs	r1, #4
 800230c:	430a      	orrs	r2, r1
 800230e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002310:	4b12      	ldr	r3, [pc, #72]	@ (800235c <HAL_RCC_OscConfig+0x340>)
 8002312:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002314:	4b11      	ldr	r3, [pc, #68]	@ (800235c <HAL_RCC_OscConfig+0x340>)
 8002316:	2101      	movs	r1, #1
 8002318:	430a      	orrs	r2, r1
 800231a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800231c:	e00b      	b.n	8002336 <HAL_RCC_OscConfig+0x31a>
 800231e:	4b0f      	ldr	r3, [pc, #60]	@ (800235c <HAL_RCC_OscConfig+0x340>)
 8002320:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002322:	4b0e      	ldr	r3, [pc, #56]	@ (800235c <HAL_RCC_OscConfig+0x340>)
 8002324:	2101      	movs	r1, #1
 8002326:	438a      	bics	r2, r1
 8002328:	65da      	str	r2, [r3, #92]	@ 0x5c
 800232a:	4b0c      	ldr	r3, [pc, #48]	@ (800235c <HAL_RCC_OscConfig+0x340>)
 800232c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800232e:	4b0b      	ldr	r3, [pc, #44]	@ (800235c <HAL_RCC_OscConfig+0x340>)
 8002330:	2104      	movs	r1, #4
 8002332:	438a      	bics	r2, r1
 8002334:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d028      	beq.n	8002390 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800233e:	f7ff f885 	bl	800144c <HAL_GetTick>
 8002342:	0003      	movs	r3, r0
 8002344:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002346:	e01d      	b.n	8002384 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002348:	f7ff f880 	bl	800144c <HAL_GetTick>
 800234c:	0002      	movs	r2, r0
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	4a0b      	ldr	r2, [pc, #44]	@ (8002380 <HAL_RCC_OscConfig+0x364>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d915      	bls.n	8002384 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	e078      	b.n	800244e <HAL_RCC_OscConfig+0x432>
 800235c:	40021000 	.word	0x40021000
 8002360:	fffeffff 	.word	0xfffeffff
 8002364:	fffbffff 	.word	0xfffbffff
 8002368:	ffff80ff 	.word	0xffff80ff
 800236c:	ffffc7ff 	.word	0xffffc7ff
 8002370:	02dc6c00 	.word	0x02dc6c00
 8002374:	2000000c 	.word	0x2000000c
 8002378:	20000010 	.word	0x20000010
 800237c:	fffffeff 	.word	0xfffffeff
 8002380:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002384:	4b34      	ldr	r3, [pc, #208]	@ (8002458 <HAL_RCC_OscConfig+0x43c>)
 8002386:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002388:	2202      	movs	r2, #2
 800238a:	4013      	ands	r3, r2
 800238c:	d0dc      	beq.n	8002348 <HAL_RCC_OscConfig+0x32c>
 800238e:	e013      	b.n	80023b8 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002390:	f7ff f85c 	bl	800144c <HAL_GetTick>
 8002394:	0003      	movs	r3, r0
 8002396:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8002398:	e009      	b.n	80023ae <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800239a:	f7ff f857 	bl	800144c <HAL_GetTick>
 800239e:	0002      	movs	r2, r0
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	4a2d      	ldr	r2, [pc, #180]	@ (800245c <HAL_RCC_OscConfig+0x440>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d901      	bls.n	80023ae <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e04f      	b.n	800244e <HAL_RCC_OscConfig+0x432>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 80023ae:	4b2a      	ldr	r3, [pc, #168]	@ (8002458 <HAL_RCC_OscConfig+0x43c>)
 80023b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023b2:	2202      	movs	r2, #2
 80023b4:	4013      	ands	r3, r2
 80023b6:	d1f0      	bne.n	800239a <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80023b8:	230f      	movs	r3, #15
 80023ba:	18fb      	adds	r3, r7, r3
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d105      	bne.n	80023ce <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80023c2:	4b25      	ldr	r3, [pc, #148]	@ (8002458 <HAL_RCC_OscConfig+0x43c>)
 80023c4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80023c6:	4b24      	ldr	r3, [pc, #144]	@ (8002458 <HAL_RCC_OscConfig+0x43c>)
 80023c8:	4925      	ldr	r1, [pc, #148]	@ (8002460 <HAL_RCC_OscConfig+0x444>)
 80023ca:	400a      	ands	r2, r1
 80023cc:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_CR_HSIUSB48ON)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2210      	movs	r2, #16
 80023d4:	4013      	ands	r3, r2
 80023d6:	d039      	beq.n	800244c <HAL_RCC_OscConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	69db      	ldr	r3, [r3, #28]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d01b      	beq.n	8002418 <HAL_RCC_OscConfig+0x3fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80023e0:	4b1d      	ldr	r3, [pc, #116]	@ (8002458 <HAL_RCC_OscConfig+0x43c>)
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	4b1c      	ldr	r3, [pc, #112]	@ (8002458 <HAL_RCC_OscConfig+0x43c>)
 80023e6:	2180      	movs	r1, #128	@ 0x80
 80023e8:	03c9      	lsls	r1, r1, #15
 80023ea:	430a      	orrs	r2, r1
 80023ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023ee:	f7ff f82d 	bl	800144c <HAL_GetTick>
 80023f2:	0003      	movs	r3, r0
 80023f4:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 80023f6:	e008      	b.n	800240a <HAL_RCC_OscConfig+0x3ee>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80023f8:	f7ff f828 	bl	800144c <HAL_GetTick>
 80023fc:	0002      	movs	r2, r0
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	2b02      	cmp	r3, #2
 8002404:	d901      	bls.n	800240a <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e021      	b.n	800244e <HAL_RCC_OscConfig+0x432>
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 800240a:	4b13      	ldr	r3, [pc, #76]	@ (8002458 <HAL_RCC_OscConfig+0x43c>)
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	2380      	movs	r3, #128	@ 0x80
 8002410:	041b      	lsls	r3, r3, #16
 8002412:	4013      	ands	r3, r2
 8002414:	d0f0      	beq.n	80023f8 <HAL_RCC_OscConfig+0x3dc>
 8002416:	e019      	b.n	800244c <HAL_RCC_OscConfig+0x430>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002418:	4b0f      	ldr	r3, [pc, #60]	@ (8002458 <HAL_RCC_OscConfig+0x43c>)
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	4b0e      	ldr	r3, [pc, #56]	@ (8002458 <HAL_RCC_OscConfig+0x43c>)
 800241e:	4911      	ldr	r1, [pc, #68]	@ (8002464 <HAL_RCC_OscConfig+0x448>)
 8002420:	400a      	ands	r2, r1
 8002422:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002424:	f7ff f812 	bl	800144c <HAL_GetTick>
 8002428:	0003      	movs	r3, r0
 800242a:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) != 0U)
 800242c:	e008      	b.n	8002440 <HAL_RCC_OscConfig+0x424>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800242e:	f7ff f80d 	bl	800144c <HAL_GetTick>
 8002432:	0002      	movs	r2, r0
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	2b02      	cmp	r3, #2
 800243a:	d901      	bls.n	8002440 <HAL_RCC_OscConfig+0x424>
        {
          return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e006      	b.n	800244e <HAL_RCC_OscConfig+0x432>
      while (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) != 0U)
 8002440:	4b05      	ldr	r3, [pc, #20]	@ (8002458 <HAL_RCC_OscConfig+0x43c>)
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	2380      	movs	r3, #128	@ 0x80
 8002446:	041b      	lsls	r3, r3, #16
 8002448:	4013      	ands	r3, r2
 800244a:	d1f0      	bne.n	800242e <HAL_RCC_OscConfig+0x412>
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 800244c:	2300      	movs	r3, #0
}
 800244e:	0018      	movs	r0, r3
 8002450:	46bd      	mov	sp, r7
 8002452:	b006      	add	sp, #24
 8002454:	bd80      	pop	{r7, pc}
 8002456:	46c0      	nop			@ (mov r8, r8)
 8002458:	40021000 	.word	0x40021000
 800245c:	00001388 	.word	0x00001388
 8002460:	efffffff 	.word	0xefffffff
 8002464:	ffbfffff 	.word	0xffbfffff

08002468 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d101      	bne.n	800247c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e0f6      	b.n	800266a <HAL_RCC_ClockConfig+0x202>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800247c:	4b7d      	ldr	r3, [pc, #500]	@ (8002674 <HAL_RCC_ClockConfig+0x20c>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	2207      	movs	r2, #7
 8002482:	4013      	ands	r3, r2
 8002484:	683a      	ldr	r2, [r7, #0]
 8002486:	429a      	cmp	r2, r3
 8002488:	d91e      	bls.n	80024c8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800248a:	4b7a      	ldr	r3, [pc, #488]	@ (8002674 <HAL_RCC_ClockConfig+0x20c>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	2207      	movs	r2, #7
 8002490:	4393      	bics	r3, r2
 8002492:	0019      	movs	r1, r3
 8002494:	4b77      	ldr	r3, [pc, #476]	@ (8002674 <HAL_RCC_ClockConfig+0x20c>)
 8002496:	683a      	ldr	r2, [r7, #0]
 8002498:	430a      	orrs	r2, r1
 800249a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800249c:	f7fe ffd6 	bl	800144c <HAL_GetTick>
 80024a0:	0003      	movs	r3, r0
 80024a2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80024a4:	e009      	b.n	80024ba <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80024a6:	f7fe ffd1 	bl	800144c <HAL_GetTick>
 80024aa:	0002      	movs	r2, r0
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	4a71      	ldr	r2, [pc, #452]	@ (8002678 <HAL_RCC_ClockConfig+0x210>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d901      	bls.n	80024ba <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e0d7      	b.n	800266a <HAL_RCC_ClockConfig+0x202>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80024ba:	4b6e      	ldr	r3, [pc, #440]	@ (8002674 <HAL_RCC_ClockConfig+0x20c>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	2207      	movs	r2, #7
 80024c0:	4013      	ands	r3, r2
 80024c2:	683a      	ldr	r2, [r7, #0]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d1ee      	bne.n	80024a6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2202      	movs	r2, #2
 80024ce:	4013      	ands	r3, r2
 80024d0:	d017      	beq.n	8002502 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	2204      	movs	r2, #4
 80024d8:	4013      	ands	r3, r2
 80024da:	d008      	beq.n	80024ee <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80024dc:	4b67      	ldr	r3, [pc, #412]	@ (800267c <HAL_RCC_ClockConfig+0x214>)
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	4a67      	ldr	r2, [pc, #412]	@ (8002680 <HAL_RCC_ClockConfig+0x218>)
 80024e2:	401a      	ands	r2, r3
 80024e4:	4b65      	ldr	r3, [pc, #404]	@ (800267c <HAL_RCC_ClockConfig+0x214>)
 80024e6:	21b0      	movs	r1, #176	@ 0xb0
 80024e8:	0109      	lsls	r1, r1, #4
 80024ea:	430a      	orrs	r2, r1
 80024ec:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024ee:	4b63      	ldr	r3, [pc, #396]	@ (800267c <HAL_RCC_ClockConfig+0x214>)
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	4a64      	ldr	r2, [pc, #400]	@ (8002684 <HAL_RCC_ClockConfig+0x21c>)
 80024f4:	4013      	ands	r3, r2
 80024f6:	0019      	movs	r1, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	68da      	ldr	r2, [r3, #12]
 80024fc:	4b5f      	ldr	r3, [pc, #380]	@ (800267c <HAL_RCC_ClockConfig+0x214>)
 80024fe:	430a      	orrs	r2, r1
 8002500:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	2201      	movs	r2, #1
 8002508:	4013      	ands	r3, r2
 800250a:	d100      	bne.n	800250e <HAL_RCC_ClockConfig+0xa6>
 800250c:	e061      	b.n	80025d2 <HAL_RCC_ClockConfig+0x16a>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 800250e:	4b5b      	ldr	r3, [pc, #364]	@ (800267c <HAL_RCC_ClockConfig+0x214>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	221c      	movs	r2, #28
 8002514:	4393      	bics	r3, r2
 8002516:	0019      	movs	r1, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	689a      	ldr	r2, [r3, #8]
 800251c:	4b57      	ldr	r3, [pc, #348]	@ (800267c <HAL_RCC_ClockConfig+0x214>)
 800251e:	430a      	orrs	r2, r1
 8002520:	601a      	str	r2, [r3, #0]
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	2b01      	cmp	r3, #1
 8002528:	d107      	bne.n	800253a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800252a:	4b54      	ldr	r3, [pc, #336]	@ (800267c <HAL_RCC_ClockConfig+0x214>)
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	2380      	movs	r3, #128	@ 0x80
 8002530:	029b      	lsls	r3, r3, #10
 8002532:	4013      	ands	r3, r2
 8002534:	d12b      	bne.n	800258e <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e097      	b.n	800266a <HAL_RCC_ClockConfig+0x202>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d107      	bne.n	8002552 <HAL_RCC_ClockConfig+0xea>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002542:	4b4e      	ldr	r3, [pc, #312]	@ (800267c <HAL_RCC_ClockConfig+0x214>)
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	2380      	movs	r3, #128	@ 0x80
 8002548:	00db      	lsls	r3, r3, #3
 800254a:	4013      	ands	r3, r2
 800254c:	d11f      	bne.n	800258e <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e08b      	b.n	800266a <HAL_RCC_ClockConfig+0x202>
      }
    }
#if defined(RCC_HSI48_SUPPORT)
    /* HSIUSB48 is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSIUSB48)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	2b02      	cmp	r3, #2
 8002558:	d107      	bne.n	800256a <HAL_RCC_ClockConfig+0x102>
    {
      /* Check the HSIUSB48 ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIUSB48RDY) == 0U)
 800255a:	4b48      	ldr	r3, [pc, #288]	@ (800267c <HAL_RCC_ClockConfig+0x214>)
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	2380      	movs	r3, #128	@ 0x80
 8002560:	041b      	lsls	r3, r3, #16
 8002562:	4013      	ands	r3, r2
 8002564:	d113      	bne.n	800258e <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e07f      	b.n	800266a <HAL_RCC_ClockConfig+0x202>
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	2b03      	cmp	r3, #3
 8002570:	d106      	bne.n	8002580 <HAL_RCC_ClockConfig+0x118>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002572:	4b42      	ldr	r3, [pc, #264]	@ (800267c <HAL_RCC_ClockConfig+0x214>)
 8002574:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002576:	2202      	movs	r2, #2
 8002578:	4013      	ands	r3, r2
 800257a:	d108      	bne.n	800258e <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e074      	b.n	800266a <HAL_RCC_ClockConfig+0x202>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002580:	4b3e      	ldr	r3, [pc, #248]	@ (800267c <HAL_RCC_ClockConfig+0x214>)
 8002582:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002584:	2202      	movs	r2, #2
 8002586:	4013      	ands	r3, r2
 8002588:	d101      	bne.n	800258e <HAL_RCC_ClockConfig+0x126>
      {
        return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e06d      	b.n	800266a <HAL_RCC_ClockConfig+0x202>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800258e:	4b3b      	ldr	r3, [pc, #236]	@ (800267c <HAL_RCC_ClockConfig+0x214>)
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	2207      	movs	r2, #7
 8002594:	4393      	bics	r3, r2
 8002596:	0019      	movs	r1, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	685a      	ldr	r2, [r3, #4]
 800259c:	4b37      	ldr	r3, [pc, #220]	@ (800267c <HAL_RCC_ClockConfig+0x214>)
 800259e:	430a      	orrs	r2, r1
 80025a0:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025a2:	f7fe ff53 	bl	800144c <HAL_GetTick>
 80025a6:	0003      	movs	r3, r0
 80025a8:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025aa:	e009      	b.n	80025c0 <HAL_RCC_ClockConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80025ac:	f7fe ff4e 	bl	800144c <HAL_GetTick>
 80025b0:	0002      	movs	r2, r0
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	4a30      	ldr	r2, [pc, #192]	@ (8002678 <HAL_RCC_ClockConfig+0x210>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d901      	bls.n	80025c0 <HAL_RCC_ClockConfig+0x158>
      {
        return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e054      	b.n	800266a <HAL_RCC_ClockConfig+0x202>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025c0:	4b2e      	ldr	r3, [pc, #184]	@ (800267c <HAL_RCC_ClockConfig+0x214>)
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	2238      	movs	r2, #56	@ 0x38
 80025c6:	401a      	ands	r2, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	00db      	lsls	r3, r3, #3
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d1ec      	bne.n	80025ac <HAL_RCC_ClockConfig+0x144>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025d2:	4b28      	ldr	r3, [pc, #160]	@ (8002674 <HAL_RCC_ClockConfig+0x20c>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	2207      	movs	r2, #7
 80025d8:	4013      	ands	r3, r2
 80025da:	683a      	ldr	r2, [r7, #0]
 80025dc:	429a      	cmp	r2, r3
 80025de:	d21e      	bcs.n	800261e <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025e0:	4b24      	ldr	r3, [pc, #144]	@ (8002674 <HAL_RCC_ClockConfig+0x20c>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	2207      	movs	r2, #7
 80025e6:	4393      	bics	r3, r2
 80025e8:	0019      	movs	r1, r3
 80025ea:	4b22      	ldr	r3, [pc, #136]	@ (8002674 <HAL_RCC_ClockConfig+0x20c>)
 80025ec:	683a      	ldr	r2, [r7, #0]
 80025ee:	430a      	orrs	r2, r1
 80025f0:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80025f2:	f7fe ff2b 	bl	800144c <HAL_GetTick>
 80025f6:	0003      	movs	r3, r0
 80025f8:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80025fa:	e009      	b.n	8002610 <HAL_RCC_ClockConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80025fc:	f7fe ff26 	bl	800144c <HAL_GetTick>
 8002600:	0002      	movs	r2, r0
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	4a1c      	ldr	r2, [pc, #112]	@ (8002678 <HAL_RCC_ClockConfig+0x210>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d901      	bls.n	8002610 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e02c      	b.n	800266a <HAL_RCC_ClockConfig+0x202>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002610:	4b18      	ldr	r3, [pc, #96]	@ (8002674 <HAL_RCC_ClockConfig+0x20c>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	2207      	movs	r2, #7
 8002616:	4013      	ands	r3, r2
 8002618:	683a      	ldr	r2, [r7, #0]
 800261a:	429a      	cmp	r2, r3
 800261c:	d1ee      	bne.n	80025fc <HAL_RCC_ClockConfig+0x194>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	2204      	movs	r2, #4
 8002624:	4013      	ands	r3, r2
 8002626:	d009      	beq.n	800263c <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002628:	4b14      	ldr	r3, [pc, #80]	@ (800267c <HAL_RCC_ClockConfig+0x214>)
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	4a16      	ldr	r2, [pc, #88]	@ (8002688 <HAL_RCC_ClockConfig+0x220>)
 800262e:	4013      	ands	r3, r2
 8002630:	0019      	movs	r1, r3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	691a      	ldr	r2, [r3, #16]
 8002636:	4b11      	ldr	r3, [pc, #68]	@ (800267c <HAL_RCC_ClockConfig+0x214>)
 8002638:	430a      	orrs	r2, r1
 800263a:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800263c:	f000 f82c 	bl	8002698 <HAL_RCC_GetSysClockFreq>
 8002640:	0001      	movs	r1, r0
 8002642:	4b0e      	ldr	r3, [pc, #56]	@ (800267c <HAL_RCC_ClockConfig+0x214>)
 8002644:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002646:	0a1b      	lsrs	r3, r3, #8
 8002648:	220f      	movs	r2, #15
 800264a:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800264c:	4b0f      	ldr	r3, [pc, #60]	@ (800268c <HAL_RCC_ClockConfig+0x224>)
 800264e:	0092      	lsls	r2, r2, #2
 8002650:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002652:	221f      	movs	r2, #31
 8002654:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002656:	000a      	movs	r2, r1
 8002658:	40da      	lsrs	r2, r3
 800265a:	4b0d      	ldr	r3, [pc, #52]	@ (8002690 <HAL_RCC_ClockConfig+0x228>)
 800265c:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800265e:	4b0d      	ldr	r3, [pc, #52]	@ (8002694 <HAL_RCC_ClockConfig+0x22c>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	0018      	movs	r0, r3
 8002664:	f7fe fe96 	bl	8001394 <HAL_InitTick>
 8002668:	0003      	movs	r3, r0
}
 800266a:	0018      	movs	r0, r3
 800266c:	46bd      	mov	sp, r7
 800266e:	b004      	add	sp, #16
 8002670:	bd80      	pop	{r7, pc}
 8002672:	46c0      	nop			@ (mov r8, r8)
 8002674:	40022000 	.word	0x40022000
 8002678:	00001388 	.word	0x00001388
 800267c:	40021000 	.word	0x40021000
 8002680:	ffff84ff 	.word	0xffff84ff
 8002684:	fffff0ff 	.word	0xfffff0ff
 8002688:	ffff8fff 	.word	0xffff8fff
 800268c:	08004b08 	.word	0x08004b08
 8002690:	2000000c 	.word	0x2000000c
 8002694:	20000010 	.word	0x20000010

08002698 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
 800269e:	4b27      	ldr	r3, [pc, #156]	@ (800273c <HAL_RCC_GetSysClockFreq+0xa4>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	089b      	lsrs	r3, r3, #2
 80026a4:	2207      	movs	r2, #7
 80026a6:	4013      	ands	r3, r2
 80026a8:	3301      	adds	r3, #1
 80026aa:	60bb      	str	r3, [r7, #8]
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80026ac:	4b23      	ldr	r3, [pc, #140]	@ (800273c <HAL_RCC_GetSysClockFreq+0xa4>)
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	2238      	movs	r2, #56	@ 0x38
 80026b2:	4013      	ands	r3, r2
 80026b4:	d10f      	bne.n	80026d6 <HAL_RCC_GetSysClockFreq+0x3e>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80026b6:	4b21      	ldr	r3, [pc, #132]	@ (800273c <HAL_RCC_GetSysClockFreq+0xa4>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	0adb      	lsrs	r3, r3, #11
 80026bc:	2207      	movs	r2, #7
 80026be:	4013      	ands	r3, r2
 80026c0:	2201      	movs	r2, #1
 80026c2:	409a      	lsls	r2, r3
 80026c4:	0013      	movs	r3, r2
 80026c6:	607b      	str	r3, [r7, #4]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80026c8:	6879      	ldr	r1, [r7, #4]
 80026ca:	481d      	ldr	r0, [pc, #116]	@ (8002740 <HAL_RCC_GetSysClockFreq+0xa8>)
 80026cc:	f7fd fd1c 	bl	8000108 <__udivsi3>
 80026d0:	0003      	movs	r3, r0
 80026d2:	60fb      	str	r3, [r7, #12]
 80026d4:	e027      	b.n	8002726 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80026d6:	4b19      	ldr	r3, [pc, #100]	@ (800273c <HAL_RCC_GetSysClockFreq+0xa4>)
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	2238      	movs	r2, #56	@ 0x38
 80026dc:	4013      	ands	r3, r2
 80026de:	2b08      	cmp	r3, #8
 80026e0:	d102      	bne.n	80026e8 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80026e2:	4b18      	ldr	r3, [pc, #96]	@ (8002744 <HAL_RCC_GetSysClockFreq+0xac>)
 80026e4:	60fb      	str	r3, [r7, #12]
 80026e6:	e01e      	b.n	8002726 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80026e8:	4b14      	ldr	r3, [pc, #80]	@ (800273c <HAL_RCC_GetSysClockFreq+0xa4>)
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	2238      	movs	r2, #56	@ 0x38
 80026ee:	4013      	ands	r3, r2
 80026f0:	2b20      	cmp	r3, #32
 80026f2:	d103      	bne.n	80026fc <HAL_RCC_GetSysClockFreq+0x64>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80026f4:	2380      	movs	r3, #128	@ 0x80
 80026f6:	021b      	lsls	r3, r3, #8
 80026f8:	60fb      	str	r3, [r7, #12]
 80026fa:	e014      	b.n	8002726 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80026fc:	4b0f      	ldr	r3, [pc, #60]	@ (800273c <HAL_RCC_GetSysClockFreq+0xa4>)
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	2238      	movs	r2, #56	@ 0x38
 8002702:	4013      	ands	r3, r2
 8002704:	2b18      	cmp	r3, #24
 8002706:	d103      	bne.n	8002710 <HAL_RCC_GetSysClockFreq+0x78>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002708:	23fa      	movs	r3, #250	@ 0xfa
 800270a:	01db      	lsls	r3, r3, #7
 800270c:	60fb      	str	r3, [r7, #12]
 800270e:	e00a      	b.n	8002726 <HAL_RCC_GetSysClockFreq+0x8e>
  }
#if defined(RCC_HSI48_SUPPORT)
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI48)
 8002710:	4b0a      	ldr	r3, [pc, #40]	@ (800273c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	2238      	movs	r2, #56	@ 0x38
 8002716:	4013      	ands	r3, r2
 8002718:	2b10      	cmp	r3, #16
 800271a:	d102      	bne.n	8002722 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    /* HSI48 used as system clock source */
    sysclockfreq = HSI48_VALUE;
 800271c:	4b08      	ldr	r3, [pc, #32]	@ (8002740 <HAL_RCC_GetSysClockFreq+0xa8>)
 800271e:	60fb      	str	r3, [r7, #12]
 8002720:	e001      	b.n	8002726 <HAL_RCC_GetSysClockFreq+0x8e>
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 8002722:	2300      	movs	r3, #0
 8002724:	60fb      	str	r3, [r7, #12]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
 8002726:	68b9      	ldr	r1, [r7, #8]
 8002728:	68f8      	ldr	r0, [r7, #12]
 800272a:	f7fd fced 	bl	8000108 <__udivsi3>
 800272e:	0003      	movs	r3, r0
 8002730:	60fb      	str	r3, [r7, #12]
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 8002732:	68fb      	ldr	r3, [r7, #12]
}
 8002734:	0018      	movs	r0, r3
 8002736:	46bd      	mov	sp, r7
 8002738:	b004      	add	sp, #16
 800273a:	bd80      	pop	{r7, pc}
 800273c:	40021000 	.word	0x40021000
 8002740:	02dc6c00 	.word	0x02dc6c00
 8002744:	007a1200 	.word	0x007a1200

08002748 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	af00      	add	r7, sp, #0
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800274c:	f7ff ffa4 	bl	8002698 <HAL_RCC_GetSysClockFreq>
 8002750:	0001      	movs	r1, r0
 8002752:	4b09      	ldr	r3, [pc, #36]	@ (8002778 <HAL_RCC_GetHCLKFreq+0x30>)
 8002754:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002756:	0a1b      	lsrs	r3, r3, #8
 8002758:	220f      	movs	r2, #15
 800275a:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800275c:	4b07      	ldr	r3, [pc, #28]	@ (800277c <HAL_RCC_GetHCLKFreq+0x34>)
 800275e:	0092      	lsls	r2, r2, #2
 8002760:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002762:	221f      	movs	r2, #31
 8002764:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002766:	000a      	movs	r2, r1
 8002768:	40da      	lsrs	r2, r3
 800276a:	4b05      	ldr	r3, [pc, #20]	@ (8002780 <HAL_RCC_GetHCLKFreq+0x38>)
 800276c:	601a      	str	r2, [r3, #0]
  return SystemCoreClock;
 800276e:	4b04      	ldr	r3, [pc, #16]	@ (8002780 <HAL_RCC_GetHCLKFreq+0x38>)
 8002770:	681b      	ldr	r3, [r3, #0]
}
 8002772:	0018      	movs	r0, r3
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}
 8002778:	40021000 	.word	0x40021000
 800277c:	08004b08 	.word	0x08004b08
 8002780:	2000000c 	.word	0x2000000c

08002784 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8002788:	f7ff ffde 	bl	8002748 <HAL_RCC_GetHCLKFreq>
 800278c:	0001      	movs	r1, r0
 800278e:	4b07      	ldr	r3, [pc, #28]	@ (80027ac <HAL_RCC_GetPCLK1Freq+0x28>)
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	0b1b      	lsrs	r3, r3, #12
 8002794:	2207      	movs	r2, #7
 8002796:	401a      	ands	r2, r3
 8002798:	4b05      	ldr	r3, [pc, #20]	@ (80027b0 <HAL_RCC_GetPCLK1Freq+0x2c>)
 800279a:	0092      	lsls	r2, r2, #2
 800279c:	58d3      	ldr	r3, [r2, r3]
 800279e:	221f      	movs	r2, #31
 80027a0:	4013      	ands	r3, r2
 80027a2:	40d9      	lsrs	r1, r3
 80027a4:	000b      	movs	r3, r1
}
 80027a6:	0018      	movs	r0, r3
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	40021000 	.word	0x40021000
 80027b0:	08004b48 	.word	0x08004b48

080027b4 <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b086      	sub	sp, #24
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80027bc:	2313      	movs	r3, #19
 80027be:	18fb      	adds	r3, r7, r3
 80027c0:	2200      	movs	r2, #0
 80027c2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80027c4:	2312      	movs	r3, #18
 80027c6:	18fb      	adds	r3, r7, r3
 80027c8:	2200      	movs	r2, #0
 80027ca:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2240      	movs	r2, #64	@ 0x40
 80027d2:	4013      	ands	r3, r2
 80027d4:	d100      	bne.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x24>
 80027d6:	e079      	b.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027d8:	2011      	movs	r0, #17
 80027da:	183b      	adds	r3, r7, r0
 80027dc:	2200      	movs	r2, #0
 80027de:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027e0:	4b6a      	ldr	r3, [pc, #424]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80027e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80027e4:	2380      	movs	r3, #128	@ 0x80
 80027e6:	055b      	lsls	r3, r3, #21
 80027e8:	4013      	ands	r3, r2
 80027ea:	d110      	bne.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027ec:	4b67      	ldr	r3, [pc, #412]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80027ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80027f0:	4b66      	ldr	r3, [pc, #408]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80027f2:	2180      	movs	r1, #128	@ 0x80
 80027f4:	0549      	lsls	r1, r1, #21
 80027f6:	430a      	orrs	r2, r1
 80027f8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80027fa:	4b64      	ldr	r3, [pc, #400]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80027fc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80027fe:	2380      	movs	r3, #128	@ 0x80
 8002800:	055b      	lsls	r3, r3, #21
 8002802:	4013      	ands	r3, r2
 8002804:	60bb      	str	r3, [r7, #8]
 8002806:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002808:	183b      	adds	r3, r7, r0
 800280a:	2201      	movs	r2, #1
 800280c:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 800280e:	4b5f      	ldr	r3, [pc, #380]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002810:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002812:	23c0      	movs	r3, #192	@ 0xc0
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	4013      	ands	r3, r2
 8002818:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d019      	beq.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	69db      	ldr	r3, [r3, #28]
 8002824:	697a      	ldr	r2, [r7, #20]
 8002826:	429a      	cmp	r2, r3
 8002828:	d014      	beq.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 800282a:	4b58      	ldr	r3, [pc, #352]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800282c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800282e:	4a58      	ldr	r2, [pc, #352]	@ (8002990 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8002830:	4013      	ands	r3, r2
 8002832:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002834:	4b55      	ldr	r3, [pc, #340]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002836:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002838:	4b54      	ldr	r3, [pc, #336]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800283a:	2180      	movs	r1, #128	@ 0x80
 800283c:	0249      	lsls	r1, r1, #9
 800283e:	430a      	orrs	r2, r1
 8002840:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002842:	4b52      	ldr	r3, [pc, #328]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002844:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002846:	4b51      	ldr	r3, [pc, #324]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002848:	4952      	ldr	r1, [pc, #328]	@ (8002994 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800284a:	400a      	ands	r2, r1
 800284c:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 800284e:	4b4f      	ldr	r3, [pc, #316]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002850:	697a      	ldr	r2, [r7, #20]
 8002852:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	2201      	movs	r2, #1
 8002858:	4013      	ands	r3, r2
 800285a:	d016      	beq.n	800288a <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800285c:	f7fe fdf6 	bl	800144c <HAL_GetTick>
 8002860:	0003      	movs	r3, r0
 8002862:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002864:	e00c      	b.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002866:	f7fe fdf1 	bl	800144c <HAL_GetTick>
 800286a:	0002      	movs	r2, r0
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	4a49      	ldr	r2, [pc, #292]	@ (8002998 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d904      	bls.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0xcc>
        {
          ret = HAL_TIMEOUT;
 8002876:	2313      	movs	r3, #19
 8002878:	18fb      	adds	r3, r7, r3
 800287a:	2203      	movs	r2, #3
 800287c:	701a      	strb	r2, [r3, #0]
          break;
 800287e:	e004      	b.n	800288a <HAL_RCCEx_PeriphCLKConfig+0xd6>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002880:	4b42      	ldr	r3, [pc, #264]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002882:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002884:	2202      	movs	r2, #2
 8002886:	4013      	ands	r3, r2
 8002888:	d0ed      	beq.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    if (ret == HAL_OK)
 800288a:	2313      	movs	r3, #19
 800288c:	18fb      	adds	r3, r7, r3
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d10a      	bne.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0xf6>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002894:	4b3d      	ldr	r3, [pc, #244]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002896:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002898:	4a3d      	ldr	r2, [pc, #244]	@ (8002990 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800289a:	4013      	ands	r3, r2
 800289c:	0019      	movs	r1, r3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	69da      	ldr	r2, [r3, #28]
 80028a2:	4b3a      	ldr	r3, [pc, #232]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80028a4:	430a      	orrs	r2, r1
 80028a6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80028a8:	e005      	b.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x102>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028aa:	2312      	movs	r3, #18
 80028ac:	18fb      	adds	r3, r7, r3
 80028ae:	2213      	movs	r2, #19
 80028b0:	18ba      	adds	r2, r7, r2
 80028b2:	7812      	ldrb	r2, [r2, #0]
 80028b4:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80028b6:	2311      	movs	r3, #17
 80028b8:	18fb      	adds	r3, r7, r3
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d105      	bne.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028c0:	4b32      	ldr	r3, [pc, #200]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80028c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80028c4:	4b31      	ldr	r3, [pc, #196]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80028c6:	4935      	ldr	r1, [pc, #212]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80028c8:	400a      	ands	r2, r1
 80028ca:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2201      	movs	r2, #1
 80028d2:	4013      	ands	r3, r2
 80028d4:	d009      	beq.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028d6:	4b2d      	ldr	r3, [pc, #180]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80028d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028da:	2203      	movs	r2, #3
 80028dc:	4393      	bics	r3, r2
 80028de:	0019      	movs	r1, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	689a      	ldr	r2, [r3, #8]
 80028e4:	4b29      	ldr	r3, [pc, #164]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80028e6:	430a      	orrs	r2, r1
 80028e8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	2202      	movs	r2, #2
 80028f0:	4013      	ands	r3, r2
 80028f2:	d009      	beq.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80028f4:	4b25      	ldr	r3, [pc, #148]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80028f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028f8:	4a29      	ldr	r2, [pc, #164]	@ (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80028fa:	4013      	ands	r3, r2
 80028fc:	0019      	movs	r1, r3
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	68da      	ldr	r2, [r3, #12]
 8002902:	4b22      	ldr	r3, [pc, #136]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002904:	430a      	orrs	r2, r1
 8002906:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2220      	movs	r2, #32
 800290e:	4013      	ands	r3, r2
 8002910:	d008      	beq.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002912:	4b1e      	ldr	r3, [pc, #120]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002914:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	0899      	lsrs	r1, r3, #2
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	699a      	ldr	r2, [r3, #24]
 800291e:	4b1b      	ldr	r3, [pc, #108]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002920:	430a      	orrs	r2, r1
 8002922:	655a      	str	r2, [r3, #84]	@ 0x54

  }
#if defined (USB_DRD_FS)
  /*-------------------------- USB clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	2208      	movs	r2, #8
 800292a:	4013      	ands	r3, r2
 800292c:	d009      	beq.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800292e:	4b17      	ldr	r3, [pc, #92]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002930:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002932:	4a1c      	ldr	r2, [pc, #112]	@ (80029a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8002934:	4013      	ands	r3, r2
 8002936:	0019      	movs	r1, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	695a      	ldr	r2, [r3, #20]
 800293c:	4b13      	ldr	r3, [pc, #76]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800293e:	430a      	orrs	r2, r1
 8002940:	659a      	str	r2, [r3, #88]	@ 0x58

  }
#endif /* USB_DRD_FS */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	2204      	movs	r2, #4
 8002948:	4013      	ands	r3, r2
 800294a:	d009      	beq.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800294c:	4b0f      	ldr	r3, [pc, #60]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800294e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002950:	4a15      	ldr	r2, [pc, #84]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8002952:	4013      	ands	r3, r2
 8002954:	0019      	movs	r1, r3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	691a      	ldr	r2, [r3, #16]
 800295a:	4b0c      	ldr	r3, [pc, #48]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800295c:	430a      	orrs	r2, r1
 800295e:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2280      	movs	r2, #128	@ 0x80
 8002966:	4013      	ands	r3, r2
 8002968:	d009      	beq.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 800296a:	4b08      	ldr	r3, [pc, #32]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	22e0      	movs	r2, #224	@ 0xe0
 8002970:	4393      	bics	r3, r2
 8002972:	0019      	movs	r1, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	685a      	ldr	r2, [r3, #4]
 8002978:	4b04      	ldr	r3, [pc, #16]	@ (800298c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800297a:	430a      	orrs	r2, r1
 800297c:	601a      	str	r2, [r3, #0]
  }
  return status;
 800297e:	2312      	movs	r3, #18
 8002980:	18fb      	adds	r3, r7, r3
 8002982:	781b      	ldrb	r3, [r3, #0]
}
 8002984:	0018      	movs	r0, r3
 8002986:	46bd      	mov	sp, r7
 8002988:	b006      	add	sp, #24
 800298a:	bd80      	pop	{r7, pc}
 800298c:	40021000 	.word	0x40021000
 8002990:	fffffcff 	.word	0xfffffcff
 8002994:	fffeffff 	.word	0xfffeffff
 8002998:	00001388 	.word	0x00001388
 800299c:	efffffff 	.word	0xefffffff
 80029a0:	ffffcfff 	.word	0xffffcfff
 80029a4:	ffffefff 	.word	0xffffefff
 80029a8:	ffff3fff 	.word	0xffff3fff

080029ac <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b08c      	sub	sp, #48	@ 0x30
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	60b9      	str	r1, [r7, #8]
 80029b6:	1dbb      	adds	r3, r7, #6
 80029b8:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2288      	movs	r2, #136	@ 0x88
 80029be:	589b      	ldr	r3, [r3, r2]
 80029c0:	2b20      	cmp	r3, #32
 80029c2:	d000      	beq.n	80029c6 <HAL_UART_Transmit_IT+0x1a>
 80029c4:	e08d      	b.n	8002ae2 <HAL_UART_Transmit_IT+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d003      	beq.n	80029d4 <HAL_UART_Transmit_IT+0x28>
 80029cc:	1dbb      	adds	r3, r7, #6
 80029ce:	881b      	ldrh	r3, [r3, #0]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d101      	bne.n	80029d8 <HAL_UART_Transmit_IT+0x2c>
    {
      return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e085      	b.n	8002ae4 <HAL_UART_Transmit_IT+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	689a      	ldr	r2, [r3, #8]
 80029dc:	2380      	movs	r3, #128	@ 0x80
 80029de:	015b      	lsls	r3, r3, #5
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d109      	bne.n	80029f8 <HAL_UART_Transmit_IT+0x4c>
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	691b      	ldr	r3, [r3, #16]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d105      	bne.n	80029f8 <HAL_UART_Transmit_IT+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	2201      	movs	r2, #1
 80029f0:	4013      	ands	r3, r2
 80029f2:	d001      	beq.n	80029f8 <HAL_UART_Transmit_IT+0x4c>
      {
        return  HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e075      	b.n	8002ae4 <HAL_UART_Transmit_IT+0x138>
      }
    }

    huart->pTxBuffPtr  = pData;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	68ba      	ldr	r2, [r7, #8]
 80029fc:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	1dba      	adds	r2, r7, #6
 8002a02:	2154      	movs	r1, #84	@ 0x54
 8002a04:	8812      	ldrh	r2, [r2, #0]
 8002a06:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	1dba      	adds	r2, r7, #6
 8002a0c:	2156      	movs	r1, #86	@ 0x56
 8002a0e:	8812      	ldrh	r2, [r2, #0]
 8002a10:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2200      	movs	r2, #0
 8002a16:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2290      	movs	r2, #144	@ 0x90
 8002a1c:	2100      	movs	r1, #0
 8002a1e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2288      	movs	r2, #136	@ 0x88
 8002a24:	2121      	movs	r1, #33	@ 0x21
 8002a26:	5099      	str	r1, [r3, r2]

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002a2c:	2380      	movs	r3, #128	@ 0x80
 8002a2e:	059b      	lsls	r3, r3, #22
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d12a      	bne.n	8002a8a <HAL_UART_Transmit_IT+0xde>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	689a      	ldr	r2, [r3, #8]
 8002a38:	2380      	movs	r3, #128	@ 0x80
 8002a3a:	015b      	lsls	r3, r3, #5
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d107      	bne.n	8002a50 <HAL_UART_Transmit_IT+0xa4>
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	691b      	ldr	r3, [r3, #16]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d103      	bne.n	8002a50 <HAL_UART_Transmit_IT+0xa4>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	4a28      	ldr	r2, [pc, #160]	@ (8002aec <HAL_UART_Transmit_IT+0x140>)
 8002a4c:	679a      	str	r2, [r3, #120]	@ 0x78
 8002a4e:	e002      	b.n	8002a56 <HAL_UART_Transmit_IT+0xaa>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	4a27      	ldr	r2, [pc, #156]	@ (8002af0 <HAL_UART_Transmit_IT+0x144>)
 8002a54:	679a      	str	r2, [r3, #120]	@ 0x78
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002a56:	f3ef 8310 	mrs	r3, PRIMASK
 8002a5a:	61fb      	str	r3, [r7, #28]
  return(result);
 8002a5c:	69fb      	ldr	r3, [r7, #28]
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8002a5e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002a60:	2301      	movs	r3, #1
 8002a62:	623b      	str	r3, [r7, #32]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a64:	6a3b      	ldr	r3, [r7, #32]
 8002a66:	f383 8810 	msr	PRIMASK, r3
}
 8002a6a:	46c0      	nop			@ (mov r8, r8)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	689a      	ldr	r2, [r3, #8]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	2180      	movs	r1, #128	@ 0x80
 8002a78:	0409      	lsls	r1, r1, #16
 8002a7a:	430a      	orrs	r2, r1
 8002a7c:	609a      	str	r2, [r3, #8]
 8002a7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a80:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a84:	f383 8810 	msr	PRIMASK, r3
}
 8002a88:	e029      	b.n	8002ade <HAL_UART_Transmit_IT+0x132>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	689a      	ldr	r2, [r3, #8]
 8002a8e:	2380      	movs	r3, #128	@ 0x80
 8002a90:	015b      	lsls	r3, r3, #5
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d107      	bne.n	8002aa6 <HAL_UART_Transmit_IT+0xfa>
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d103      	bne.n	8002aa6 <HAL_UART_Transmit_IT+0xfa>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	4a14      	ldr	r2, [pc, #80]	@ (8002af4 <HAL_UART_Transmit_IT+0x148>)
 8002aa2:	679a      	str	r2, [r3, #120]	@ 0x78
 8002aa4:	e002      	b.n	8002aac <HAL_UART_Transmit_IT+0x100>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	4a13      	ldr	r2, [pc, #76]	@ (8002af8 <HAL_UART_Transmit_IT+0x14c>)
 8002aaa:	679a      	str	r2, [r3, #120]	@ 0x78
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002aac:	f3ef 8310 	mrs	r3, PRIMASK
 8002ab0:	613b      	str	r3, [r7, #16]
  return(result);
 8002ab2:	693b      	ldr	r3, [r7, #16]
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8002ab4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	f383 8810 	msr	PRIMASK, r3
}
 8002ac0:	46c0      	nop			@ (mov r8, r8)
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2180      	movs	r1, #128	@ 0x80
 8002ace:	430a      	orrs	r2, r1
 8002ad0:	601a      	str	r2, [r3, #0]
 8002ad2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ad4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	f383 8810 	msr	PRIMASK, r3
}
 8002adc:	46c0      	nop			@ (mov r8, r8)
    }

    return HAL_OK;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	e000      	b.n	8002ae4 <HAL_UART_Transmit_IT+0x138>
  }
  else
  {
    return HAL_BUSY;
 8002ae2:	2302      	movs	r3, #2
  }
}
 8002ae4:	0018      	movs	r0, r3
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	b00c      	add	sp, #48	@ 0x30
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	080042f9 	.word	0x080042f9
 8002af0:	0800420d 	.word	0x0800420d
 8002af4:	0800414d 	.word	0x0800414d
 8002af8:	08004099 	.word	0x08004099

08002afc <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b098      	sub	sp, #96	@ 0x60
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt = 1U;
 8002b04:	2301      	movs	r3, #1
 8002b06:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002b08:	f3ef 8310 	mrs	r3, PRIMASK
 8002b0c:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8002b0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

  /* Disable interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_TCIE | USART_CR1_RXNEIE_RXFNEIE |
 8002b10:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002b12:	2301      	movs	r3, #1
 8002b14:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b18:	f383 8810 	msr	PRIMASK, r3
}
 8002b1c:	46c0      	nop			@ (mov r8, r8)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	498a      	ldr	r1, [pc, #552]	@ (8002d54 <HAL_UART_Abort_IT+0x258>)
 8002b2a:	400a      	ands	r2, r1
 8002b2c:	601a      	str	r2, [r3, #0]
 8002b2e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b30:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b34:	f383 8810 	msr	PRIMASK, r3
}
 8002b38:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002b3a:	f3ef 8310 	mrs	r3, PRIMASK
 8002b3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8002b40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
                                          USART_CR1_TXEIE_TXFNFIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
 8002b42:	657b      	str	r3, [r7, #84]	@ 0x54
 8002b44:	2301      	movs	r3, #1
 8002b46:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b4a:	f383 8810 	msr	PRIMASK, r3
}
 8002b4e:	46c0      	nop			@ (mov r8, r8)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	689a      	ldr	r2, [r3, #8]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	497f      	ldr	r1, [pc, #508]	@ (8002d58 <HAL_UART_Abort_IT+0x25c>)
 8002b5c:	400a      	ands	r2, r1
 8002b5e:	609a      	str	r2, [r3, #8]
 8002b60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b62:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b66:	f383 8810 	msr	PRIMASK, r3
}
 8002b6a:	46c0      	nop			@ (mov r8, r8)

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d118      	bne.n	8002ba6 <HAL_UART_Abort_IT+0xaa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002b74:	f3ef 8310 	mrs	r3, PRIMASK
 8002b78:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8002b7c:	653b      	str	r3, [r7, #80]	@ 0x50
 8002b7e:	2301      	movs	r3, #1
 8002b80:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b84:	f383 8810 	msr	PRIMASK, r3
}
 8002b88:	46c0      	nop			@ (mov r8, r8)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	2110      	movs	r1, #16
 8002b96:	438a      	bics	r2, r1
 8002b98:	601a      	str	r2, [r3, #0]
 8002b9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ba0:	f383 8810 	msr	PRIMASK, r3
}
 8002ba4:	46c0      	nop			@ (mov r8, r8)

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d00f      	beq.n	8002bce <HAL_UART_Abort_IT+0xd2>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	2280      	movs	r2, #128	@ 0x80
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	2b80      	cmp	r3, #128	@ 0x80
 8002bba:	d104      	bne.n	8002bc6 <HAL_UART_Abort_IT+0xca>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002bc0:	4a66      	ldr	r2, [pc, #408]	@ (8002d5c <HAL_UART_Abort_IT+0x260>)
 8002bc2:	639a      	str	r2, [r3, #56]	@ 0x38
 8002bc4:	e003      	b.n	8002bce <HAL_UART_Abort_IT+0xd2>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002bca:	2200      	movs	r2, #0
 8002bcc:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2280      	movs	r2, #128	@ 0x80
 8002bd2:	589b      	ldr	r3, [r3, r2]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d011      	beq.n	8002bfc <HAL_UART_Abort_IT+0x100>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	2240      	movs	r2, #64	@ 0x40
 8002be0:	4013      	ands	r3, r2
 8002be2:	2b40      	cmp	r3, #64	@ 0x40
 8002be4:	d105      	bne.n	8002bf2 <HAL_UART_Abort_IT+0xf6>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2280      	movs	r2, #128	@ 0x80
 8002bea:	589b      	ldr	r3, [r3, r2]
 8002bec:	4a5c      	ldr	r2, [pc, #368]	@ (8002d60 <HAL_UART_Abort_IT+0x264>)
 8002bee:	639a      	str	r2, [r3, #56]	@ 0x38
 8002bf0:	e004      	b.n	8002bfc <HAL_UART_Abort_IT+0x100>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2280      	movs	r2, #128	@ 0x80
 8002bf6:	589b      	ldr	r3, [r3, r2]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	2280      	movs	r2, #128	@ 0x80
 8002c04:	4013      	ands	r3, r2
 8002c06:	2b80      	cmp	r3, #128	@ 0x80
 8002c08:	d12a      	bne.n	8002c60 <HAL_UART_Abort_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002c0a:	f3ef 8310 	mrs	r3, PRIMASK
 8002c0e:	61bb      	str	r3, [r7, #24]
  return(result);
 8002c10:	69bb      	ldr	r3, [r7, #24]
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002c12:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c14:	2301      	movs	r3, #1
 8002c16:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	f383 8810 	msr	PRIMASK, r3
}
 8002c1e:	46c0      	nop			@ (mov r8, r8)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	689a      	ldr	r2, [r3, #8]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	2180      	movs	r1, #128	@ 0x80
 8002c2c:	438a      	bics	r2, r1
 8002c2e:	609a      	str	r2, [r3, #8]
 8002c30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002c32:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c34:	6a3b      	ldr	r3, [r7, #32]
 8002c36:	f383 8810 	msr	PRIMASK, r3
}
 8002c3a:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d00d      	beq.n	8002c60 <HAL_UART_Abort_IT+0x164>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c48:	0018      	movs	r0, r3
 8002c4a:	f7fe fe7f 	bl	800194c <HAL_DMA_Abort_IT>
 8002c4e:	1e03      	subs	r3, r0, #0
 8002c50:	d004      	beq.n	8002c5c <HAL_UART_Abort_IT+0x160>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c56:	2200      	movs	r2, #0
 8002c58:	639a      	str	r2, [r3, #56]	@ 0x38
 8002c5a:	e001      	b.n	8002c60 <HAL_UART_Abort_IT+0x164>
      }
      else
      {
        abortcplt = 0U;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	65fb      	str	r3, [r7, #92]	@ 0x5c
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	2240      	movs	r2, #64	@ 0x40
 8002c68:	4013      	ands	r3, r2
 8002c6a:	2b40      	cmp	r3, #64	@ 0x40
 8002c6c:	d12f      	bne.n	8002cce <HAL_UART_Abort_IT+0x1d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002c6e:	f3ef 8310 	mrs	r3, PRIMASK
 8002c72:	60fb      	str	r3, [r7, #12]
  return(result);
 8002c74:	68fb      	ldr	r3, [r7, #12]
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c76:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002c78:	2301      	movs	r3, #1
 8002c7a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	f383 8810 	msr	PRIMASK, r3
}
 8002c82:	46c0      	nop			@ (mov r8, r8)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	689a      	ldr	r2, [r3, #8]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2140      	movs	r1, #64	@ 0x40
 8002c90:	438a      	bics	r2, r1
 8002c92:	609a      	str	r2, [r3, #8]
 8002c94:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c96:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	f383 8810 	msr	PRIMASK, r3
}
 8002c9e:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2280      	movs	r2, #128	@ 0x80
 8002ca4:	589b      	ldr	r3, [r3, r2]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d011      	beq.n	8002cce <HAL_UART_Abort_IT+0x1d2>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2280      	movs	r2, #128	@ 0x80
 8002cae:	589b      	ldr	r3, [r3, r2]
 8002cb0:	0018      	movs	r0, r3
 8002cb2:	f7fe fe4b 	bl	800194c <HAL_DMA_Abort_IT>
 8002cb6:	1e03      	subs	r3, r0, #0
 8002cb8:	d007      	beq.n	8002cca <HAL_UART_Abort_IT+0x1ce>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2280      	movs	r2, #128	@ 0x80
 8002cbe:	589b      	ldr	r3, [r3, r2]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	639a      	str	r2, [r3, #56]	@ 0x38
        abortcplt = 1U;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002cc8:	e001      	b.n	8002cce <HAL_UART_Abort_IT+0x1d2>
      }
      else
      {
        abortcplt = 0U;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    }
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (abortcplt == 1U)
 8002cce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d13a      	bne.n	8002d4a <HAL_UART_Abort_IT+0x24e>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0U;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2256      	movs	r2, #86	@ 0x56
 8002cd8:	2100      	movs	r1, #0
 8002cda:	5299      	strh	r1, [r3, r2]
    huart->RxXferCount = 0U;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	225e      	movs	r2, #94	@ 0x5e
 8002ce0:	2100      	movs	r1, #0
 8002ce2:	5299      	strh	r1, [r3, r2]

    /* Clear ISR function pointers */
    huart->RxISR = NULL;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	675a      	str	r2, [r3, #116]	@ 0x74
    huart->TxISR = NULL;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Reset errorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2290      	movs	r2, #144	@ 0x90
 8002cf4:	2100      	movs	r1, #0
 8002cf6:	5099      	str	r1, [r3, r2]

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	220f      	movs	r2, #15
 8002cfe:	621a      	str	r2, [r3, #32]

    /* Flush the whole TX FIFO (if needed) */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002d04:	2380      	movs	r3, #128	@ 0x80
 8002d06:	059b      	lsls	r3, r3, #22
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d107      	bne.n	8002d1c <HAL_UART_Abort_IT+0x220>
    {
      __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	699a      	ldr	r2, [r3, #24]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	2110      	movs	r1, #16
 8002d18:	430a      	orrs	r2, r1
 8002d1a:	619a      	str	r2, [r3, #24]
    }

    /* Discard the received data */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	699a      	ldr	r2, [r3, #24]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	2108      	movs	r1, #8
 8002d28:	430a      	orrs	r2, r1
 8002d2a:	619a      	str	r2, [r3, #24]

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2288      	movs	r2, #136	@ 0x88
 8002d30:	2120      	movs	r1, #32
 8002d32:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_READY;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	228c      	movs	r2, #140	@ 0x8c
 8002d38:	2120      	movs	r1, #32
 8002d3a:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	0018      	movs	r0, r3
 8002d46:	f000 fb6b 	bl	8003420 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8002d4a:	2300      	movs	r3, #0
}
 8002d4c:	0018      	movs	r0, r3
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	b018      	add	sp, #96	@ 0x60
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	fffffe1f 	.word	0xfffffe1f
 8002d58:	ef7ffffe 	.word	0xef7ffffe
 8002d5c:	08003f87 	.word	0x08003f87
 8002d60:	08004017 	.word	0x08004017

08002d64 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002d64:	b5b0      	push	{r4, r5, r7, lr}
 8002d66:	b0aa      	sub	sp, #168	@ 0xa8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	69db      	ldr	r3, [r3, #28]
 8002d72:	22a4      	movs	r2, #164	@ 0xa4
 8002d74:	18b9      	adds	r1, r7, r2
 8002d76:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	20a0      	movs	r0, #160	@ 0xa0
 8002d80:	1839      	adds	r1, r7, r0
 8002d82:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	249c      	movs	r4, #156	@ 0x9c
 8002d8c:	1939      	adds	r1, r7, r4
 8002d8e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002d90:	0011      	movs	r1, r2
 8002d92:	18bb      	adds	r3, r7, r2
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4aa2      	ldr	r2, [pc, #648]	@ (8003020 <HAL_UART_IRQHandler+0x2bc>)
 8002d98:	4013      	ands	r3, r2
 8002d9a:	2298      	movs	r2, #152	@ 0x98
 8002d9c:	18bd      	adds	r5, r7, r2
 8002d9e:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8002da0:	18bb      	adds	r3, r7, r2
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d11a      	bne.n	8002dde <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002da8:	187b      	adds	r3, r7, r1
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2220      	movs	r2, #32
 8002dae:	4013      	ands	r3, r2
 8002db0:	d015      	beq.n	8002dde <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002db2:	183b      	adds	r3, r7, r0
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2220      	movs	r2, #32
 8002db8:	4013      	ands	r3, r2
 8002dba:	d105      	bne.n	8002dc8 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002dbc:	193b      	adds	r3, r7, r4
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	2380      	movs	r3, #128	@ 0x80
 8002dc2:	055b      	lsls	r3, r3, #21
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	d00a      	beq.n	8002dde <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d100      	bne.n	8002dd2 <HAL_UART_IRQHandler+0x6e>
 8002dd0:	e2fb      	b.n	80033ca <HAL_UART_IRQHandler+0x666>
      {
        huart->RxISR(huart);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	0010      	movs	r0, r2
 8002dda:	4798      	blx	r3
      }
      return;
 8002ddc:	e2f5      	b.n	80033ca <HAL_UART_IRQHandler+0x666>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002dde:	2398      	movs	r3, #152	@ 0x98
 8002de0:	18fb      	adds	r3, r7, r3
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d100      	bne.n	8002dea <HAL_UART_IRQHandler+0x86>
 8002de8:	e122      	b.n	8003030 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002dea:	239c      	movs	r3, #156	@ 0x9c
 8002dec:	18fb      	adds	r3, r7, r3
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a8c      	ldr	r2, [pc, #560]	@ (8003024 <HAL_UART_IRQHandler+0x2c0>)
 8002df2:	4013      	ands	r3, r2
 8002df4:	d106      	bne.n	8002e04 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002df6:	23a0      	movs	r3, #160	@ 0xa0
 8002df8:	18fb      	adds	r3, r7, r3
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a8a      	ldr	r2, [pc, #552]	@ (8003028 <HAL_UART_IRQHandler+0x2c4>)
 8002dfe:	4013      	ands	r3, r2
 8002e00:	d100      	bne.n	8002e04 <HAL_UART_IRQHandler+0xa0>
 8002e02:	e115      	b.n	8003030 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002e04:	23a4      	movs	r3, #164	@ 0xa4
 8002e06:	18fb      	adds	r3, r7, r3
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	d012      	beq.n	8002e36 <HAL_UART_IRQHandler+0xd2>
 8002e10:	23a0      	movs	r3, #160	@ 0xa0
 8002e12:	18fb      	adds	r3, r7, r3
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	2380      	movs	r3, #128	@ 0x80
 8002e18:	005b      	lsls	r3, r3, #1
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	d00b      	beq.n	8002e36 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	2201      	movs	r2, #1
 8002e24:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2290      	movs	r2, #144	@ 0x90
 8002e2a:	589b      	ldr	r3, [r3, r2]
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	431a      	orrs	r2, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2190      	movs	r1, #144	@ 0x90
 8002e34:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002e36:	23a4      	movs	r3, #164	@ 0xa4
 8002e38:	18fb      	adds	r3, r7, r3
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	2202      	movs	r2, #2
 8002e3e:	4013      	ands	r3, r2
 8002e40:	d011      	beq.n	8002e66 <HAL_UART_IRQHandler+0x102>
 8002e42:	239c      	movs	r3, #156	@ 0x9c
 8002e44:	18fb      	adds	r3, r7, r3
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2201      	movs	r2, #1
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	d00b      	beq.n	8002e66 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	2202      	movs	r2, #2
 8002e54:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2290      	movs	r2, #144	@ 0x90
 8002e5a:	589b      	ldr	r3, [r3, r2]
 8002e5c:	2204      	movs	r2, #4
 8002e5e:	431a      	orrs	r2, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2190      	movs	r1, #144	@ 0x90
 8002e64:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002e66:	23a4      	movs	r3, #164	@ 0xa4
 8002e68:	18fb      	adds	r3, r7, r3
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2204      	movs	r2, #4
 8002e6e:	4013      	ands	r3, r2
 8002e70:	d011      	beq.n	8002e96 <HAL_UART_IRQHandler+0x132>
 8002e72:	239c      	movs	r3, #156	@ 0x9c
 8002e74:	18fb      	adds	r3, r7, r3
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	2201      	movs	r2, #1
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	d00b      	beq.n	8002e96 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2204      	movs	r2, #4
 8002e84:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2290      	movs	r2, #144	@ 0x90
 8002e8a:	589b      	ldr	r3, [r3, r2]
 8002e8c:	2202      	movs	r2, #2
 8002e8e:	431a      	orrs	r2, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2190      	movs	r1, #144	@ 0x90
 8002e94:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002e96:	23a4      	movs	r3, #164	@ 0xa4
 8002e98:	18fb      	adds	r3, r7, r3
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2208      	movs	r2, #8
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	d017      	beq.n	8002ed2 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002ea2:	23a0      	movs	r3, #160	@ 0xa0
 8002ea4:	18fb      	adds	r3, r7, r3
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2220      	movs	r2, #32
 8002eaa:	4013      	ands	r3, r2
 8002eac:	d105      	bne.n	8002eba <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002eae:	239c      	movs	r3, #156	@ 0x9c
 8002eb0:	18fb      	adds	r3, r7, r3
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a5b      	ldr	r2, [pc, #364]	@ (8003024 <HAL_UART_IRQHandler+0x2c0>)
 8002eb6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002eb8:	d00b      	beq.n	8002ed2 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	2208      	movs	r2, #8
 8002ec0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2290      	movs	r2, #144	@ 0x90
 8002ec6:	589b      	ldr	r3, [r3, r2]
 8002ec8:	2208      	movs	r2, #8
 8002eca:	431a      	orrs	r2, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2190      	movs	r1, #144	@ 0x90
 8002ed0:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002ed2:	23a4      	movs	r3, #164	@ 0xa4
 8002ed4:	18fb      	adds	r3, r7, r3
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	2380      	movs	r3, #128	@ 0x80
 8002eda:	011b      	lsls	r3, r3, #4
 8002edc:	4013      	ands	r3, r2
 8002ede:	d013      	beq.n	8002f08 <HAL_UART_IRQHandler+0x1a4>
 8002ee0:	23a0      	movs	r3, #160	@ 0xa0
 8002ee2:	18fb      	adds	r3, r7, r3
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	2380      	movs	r3, #128	@ 0x80
 8002ee8:	04db      	lsls	r3, r3, #19
 8002eea:	4013      	ands	r3, r2
 8002eec:	d00c      	beq.n	8002f08 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2280      	movs	r2, #128	@ 0x80
 8002ef4:	0112      	lsls	r2, r2, #4
 8002ef6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2290      	movs	r2, #144	@ 0x90
 8002efc:	589b      	ldr	r3, [r3, r2]
 8002efe:	2220      	movs	r2, #32
 8002f00:	431a      	orrs	r2, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2190      	movs	r1, #144	@ 0x90
 8002f06:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2290      	movs	r2, #144	@ 0x90
 8002f0c:	589b      	ldr	r3, [r3, r2]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d100      	bne.n	8002f14 <HAL_UART_IRQHandler+0x1b0>
 8002f12:	e25c      	b.n	80033ce <HAL_UART_IRQHandler+0x66a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002f14:	23a4      	movs	r3, #164	@ 0xa4
 8002f16:	18fb      	adds	r3, r7, r3
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	2220      	movs	r2, #32
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	d015      	beq.n	8002f4c <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002f20:	23a0      	movs	r3, #160	@ 0xa0
 8002f22:	18fb      	adds	r3, r7, r3
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	2220      	movs	r2, #32
 8002f28:	4013      	ands	r3, r2
 8002f2a:	d106      	bne.n	8002f3a <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002f2c:	239c      	movs	r3, #156	@ 0x9c
 8002f2e:	18fb      	adds	r3, r7, r3
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	2380      	movs	r3, #128	@ 0x80
 8002f34:	055b      	lsls	r3, r3, #21
 8002f36:	4013      	ands	r3, r2
 8002f38:	d008      	beq.n	8002f4c <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d004      	beq.n	8002f4c <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	0010      	movs	r0, r2
 8002f4a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2290      	movs	r2, #144	@ 0x90
 8002f50:	589b      	ldr	r3, [r3, r2]
 8002f52:	2194      	movs	r1, #148	@ 0x94
 8002f54:	187a      	adds	r2, r7, r1
 8002f56:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	2240      	movs	r2, #64	@ 0x40
 8002f60:	4013      	ands	r3, r2
 8002f62:	2b40      	cmp	r3, #64	@ 0x40
 8002f64:	d004      	beq.n	8002f70 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002f66:	187b      	adds	r3, r7, r1
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2228      	movs	r2, #40	@ 0x28
 8002f6c:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002f6e:	d04c      	beq.n	800300a <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	0018      	movs	r0, r3
 8002f74:	f000 fe8e 	bl	8003c94 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	2240      	movs	r2, #64	@ 0x40
 8002f80:	4013      	ands	r3, r2
 8002f82:	2b40      	cmp	r3, #64	@ 0x40
 8002f84:	d13c      	bne.n	8003000 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002f86:	f3ef 8310 	mrs	r3, PRIMASK
 8002f8a:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8002f8c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f8e:	2090      	movs	r0, #144	@ 0x90
 8002f90:	183a      	adds	r2, r7, r0
 8002f92:	6013      	str	r3, [r2, #0]
 8002f94:	2301      	movs	r3, #1
 8002f96:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f98:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002f9a:	f383 8810 	msr	PRIMASK, r3
}
 8002f9e:	46c0      	nop			@ (mov r8, r8)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	689a      	ldr	r2, [r3, #8]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	2140      	movs	r1, #64	@ 0x40
 8002fac:	438a      	bics	r2, r1
 8002fae:	609a      	str	r2, [r3, #8]
 8002fb0:	183b      	adds	r3, r7, r0
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fb6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002fb8:	f383 8810 	msr	PRIMASK, r3
}
 8002fbc:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2280      	movs	r2, #128	@ 0x80
 8002fc2:	589b      	ldr	r3, [r3, r2]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d016      	beq.n	8002ff6 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2280      	movs	r2, #128	@ 0x80
 8002fcc:	589b      	ldr	r3, [r3, r2]
 8002fce:	4a17      	ldr	r2, [pc, #92]	@ (800302c <HAL_UART_IRQHandler+0x2c8>)
 8002fd0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2280      	movs	r2, #128	@ 0x80
 8002fd6:	589b      	ldr	r3, [r3, r2]
 8002fd8:	0018      	movs	r0, r3
 8002fda:	f7fe fcb7 	bl	800194c <HAL_DMA_Abort_IT>
 8002fde:	1e03      	subs	r3, r0, #0
 8002fe0:	d01c      	beq.n	800301c <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2280      	movs	r2, #128	@ 0x80
 8002fe6:	589b      	ldr	r3, [r3, r2]
 8002fe8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	2180      	movs	r1, #128	@ 0x80
 8002fee:	5852      	ldr	r2, [r2, r1]
 8002ff0:	0010      	movs	r0, r2
 8002ff2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ff4:	e012      	b.n	800301c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	0018      	movs	r0, r3
 8002ffa:	f000 fa09 	bl	8003410 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ffe:	e00d      	b.n	800301c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	0018      	movs	r0, r3
 8003004:	f000 fa04 	bl	8003410 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003008:	e008      	b.n	800301c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	0018      	movs	r0, r3
 800300e:	f000 f9ff 	bl	8003410 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2290      	movs	r2, #144	@ 0x90
 8003016:	2100      	movs	r1, #0
 8003018:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800301a:	e1d8      	b.n	80033ce <HAL_UART_IRQHandler+0x66a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800301c:	46c0      	nop			@ (mov r8, r8)
    return;
 800301e:	e1d6      	b.n	80033ce <HAL_UART_IRQHandler+0x66a>
 8003020:	0000080f 	.word	0x0000080f
 8003024:	10000001 	.word	0x10000001
 8003028:	04000120 	.word	0x04000120
 800302c:	08003f59 	.word	0x08003f59

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003034:	2b01      	cmp	r3, #1
 8003036:	d000      	beq.n	800303a <HAL_UART_IRQHandler+0x2d6>
 8003038:	e15d      	b.n	80032f6 <HAL_UART_IRQHandler+0x592>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800303a:	23a4      	movs	r3, #164	@ 0xa4
 800303c:	18fb      	adds	r3, r7, r3
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2210      	movs	r2, #16
 8003042:	4013      	ands	r3, r2
 8003044:	d100      	bne.n	8003048 <HAL_UART_IRQHandler+0x2e4>
 8003046:	e156      	b.n	80032f6 <HAL_UART_IRQHandler+0x592>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003048:	23a0      	movs	r3, #160	@ 0xa0
 800304a:	18fb      	adds	r3, r7, r3
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	2210      	movs	r2, #16
 8003050:	4013      	ands	r3, r2
 8003052:	d100      	bne.n	8003056 <HAL_UART_IRQHandler+0x2f2>
 8003054:	e14f      	b.n	80032f6 <HAL_UART_IRQHandler+0x592>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	2210      	movs	r2, #16
 800305c:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	2240      	movs	r2, #64	@ 0x40
 8003066:	4013      	ands	r3, r2
 8003068:	2b40      	cmp	r3, #64	@ 0x40
 800306a:	d000      	beq.n	800306e <HAL_UART_IRQHandler+0x30a>
 800306c:	e0c3      	b.n	80031f6 <HAL_UART_IRQHandler+0x492>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2280      	movs	r2, #128	@ 0x80
 8003072:	589b      	ldr	r3, [r3, r2]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	685a      	ldr	r2, [r3, #4]
 8003078:	217e      	movs	r1, #126	@ 0x7e
 800307a:	187b      	adds	r3, r7, r1
 800307c:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800307e:	187b      	adds	r3, r7, r1
 8003080:	881b      	ldrh	r3, [r3, #0]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d100      	bne.n	8003088 <HAL_UART_IRQHandler+0x324>
 8003086:	e097      	b.n	80031b8 <HAL_UART_IRQHandler+0x454>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	225c      	movs	r2, #92	@ 0x5c
 800308c:	5a9b      	ldrh	r3, [r3, r2]
 800308e:	187a      	adds	r2, r7, r1
 8003090:	8812      	ldrh	r2, [r2, #0]
 8003092:	429a      	cmp	r2, r3
 8003094:	d300      	bcc.n	8003098 <HAL_UART_IRQHandler+0x334>
 8003096:	e08f      	b.n	80031b8 <HAL_UART_IRQHandler+0x454>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	187a      	adds	r2, r7, r1
 800309c:	215e      	movs	r1, #94	@ 0x5e
 800309e:	8812      	ldrh	r2, [r2, #0]
 80030a0:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2280      	movs	r2, #128	@ 0x80
 80030a6:	589b      	ldr	r3, [r3, r2]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2220      	movs	r2, #32
 80030ae:	4013      	ands	r3, r2
 80030b0:	d170      	bne.n	8003194 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80030b2:	f3ef 8310 	mrs	r3, PRIMASK
 80030b6:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80030b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80030ba:	67bb      	str	r3, [r7, #120]	@ 0x78
 80030bc:	2301      	movs	r3, #1
 80030be:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030c2:	f383 8810 	msr	PRIMASK, r3
}
 80030c6:	46c0      	nop			@ (mov r8, r8)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	49c4      	ldr	r1, [pc, #784]	@ (80033e4 <HAL_UART_IRQHandler+0x680>)
 80030d4:	400a      	ands	r2, r1
 80030d6:	601a      	str	r2, [r3, #0]
 80030d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80030da:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030de:	f383 8810 	msr	PRIMASK, r3
}
 80030e2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80030e4:	f3ef 8310 	mrs	r3, PRIMASK
 80030e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 80030ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030ec:	677b      	str	r3, [r7, #116]	@ 0x74
 80030ee:	2301      	movs	r3, #1
 80030f0:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80030f4:	f383 8810 	msr	PRIMASK, r3
}
 80030f8:	46c0      	nop			@ (mov r8, r8)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	689a      	ldr	r2, [r3, #8]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2101      	movs	r1, #1
 8003106:	438a      	bics	r2, r1
 8003108:	609a      	str	r2, [r3, #8]
 800310a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800310c:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800310e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003110:	f383 8810 	msr	PRIMASK, r3
}
 8003114:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003116:	f3ef 8310 	mrs	r3, PRIMASK
 800311a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 800311c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800311e:	673b      	str	r3, [r7, #112]	@ 0x70
 8003120:	2301      	movs	r3, #1
 8003122:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003124:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003126:	f383 8810 	msr	PRIMASK, r3
}
 800312a:	46c0      	nop			@ (mov r8, r8)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	689a      	ldr	r2, [r3, #8]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	2140      	movs	r1, #64	@ 0x40
 8003138:	438a      	bics	r2, r1
 800313a:	609a      	str	r2, [r3, #8]
 800313c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800313e:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003140:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003142:	f383 8810 	msr	PRIMASK, r3
}
 8003146:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	228c      	movs	r2, #140	@ 0x8c
 800314c:	2120      	movs	r1, #32
 800314e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003156:	f3ef 8310 	mrs	r3, PRIMASK
 800315a:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 800315c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800315e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003160:	2301      	movs	r3, #1
 8003162:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003164:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003166:	f383 8810 	msr	PRIMASK, r3
}
 800316a:	46c0      	nop			@ (mov r8, r8)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2110      	movs	r1, #16
 8003178:	438a      	bics	r2, r1
 800317a:	601a      	str	r2, [r3, #0]
 800317c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800317e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003180:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003182:	f383 8810 	msr	PRIMASK, r3
}
 8003186:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2280      	movs	r2, #128	@ 0x80
 800318c:	589b      	ldr	r3, [r3, r2]
 800318e:	0018      	movs	r0, r3
 8003190:	f7fe fb7a 	bl	8001888 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2202      	movs	r2, #2
 8003198:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	225c      	movs	r2, #92	@ 0x5c
 800319e:	5a9a      	ldrh	r2, [r3, r2]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	215e      	movs	r1, #94	@ 0x5e
 80031a4:	5a5b      	ldrh	r3, [r3, r1]
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	b29a      	uxth	r2, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	0011      	movs	r1, r2
 80031b0:	0018      	movs	r0, r3
 80031b2:	f7fd fb07 	bl	80007c4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80031b6:	e10c      	b.n	80033d2 <HAL_UART_IRQHandler+0x66e>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	225c      	movs	r2, #92	@ 0x5c
 80031bc:	5a9b      	ldrh	r3, [r3, r2]
 80031be:	227e      	movs	r2, #126	@ 0x7e
 80031c0:	18ba      	adds	r2, r7, r2
 80031c2:	8812      	ldrh	r2, [r2, #0]
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d000      	beq.n	80031ca <HAL_UART_IRQHandler+0x466>
 80031c8:	e103      	b.n	80033d2 <HAL_UART_IRQHandler+0x66e>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2280      	movs	r2, #128	@ 0x80
 80031ce:	589b      	ldr	r3, [r3, r2]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2220      	movs	r2, #32
 80031d6:	4013      	ands	r3, r2
 80031d8:	2b20      	cmp	r3, #32
 80031da:	d000      	beq.n	80031de <HAL_UART_IRQHandler+0x47a>
 80031dc:	e0f9      	b.n	80033d2 <HAL_UART_IRQHandler+0x66e>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2202      	movs	r2, #2
 80031e2:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	225c      	movs	r2, #92	@ 0x5c
 80031e8:	5a9a      	ldrh	r2, [r3, r2]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	0011      	movs	r1, r2
 80031ee:	0018      	movs	r0, r3
 80031f0:	f7fd fae8 	bl	80007c4 <HAL_UARTEx_RxEventCallback>
      return;
 80031f4:	e0ed      	b.n	80033d2 <HAL_UART_IRQHandler+0x66e>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	225c      	movs	r2, #92	@ 0x5c
 80031fa:	5a99      	ldrh	r1, [r3, r2]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	225e      	movs	r2, #94	@ 0x5e
 8003200:	5a9b      	ldrh	r3, [r3, r2]
 8003202:	b29a      	uxth	r2, r3
 8003204:	208e      	movs	r0, #142	@ 0x8e
 8003206:	183b      	adds	r3, r7, r0
 8003208:	1a8a      	subs	r2, r1, r2
 800320a:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	225e      	movs	r2, #94	@ 0x5e
 8003210:	5a9b      	ldrh	r3, [r3, r2]
 8003212:	b29b      	uxth	r3, r3
 8003214:	2b00      	cmp	r3, #0
 8003216:	d100      	bne.n	800321a <HAL_UART_IRQHandler+0x4b6>
 8003218:	e0dd      	b.n	80033d6 <HAL_UART_IRQHandler+0x672>
          && (nb_rx_data > 0U))
 800321a:	183b      	adds	r3, r7, r0
 800321c:	881b      	ldrh	r3, [r3, #0]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d100      	bne.n	8003224 <HAL_UART_IRQHandler+0x4c0>
 8003222:	e0d8      	b.n	80033d6 <HAL_UART_IRQHandler+0x672>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003224:	f3ef 8310 	mrs	r3, PRIMASK
 8003228:	60fb      	str	r3, [r7, #12]
  return(result);
 800322a:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800322c:	2488      	movs	r4, #136	@ 0x88
 800322e:	193a      	adds	r2, r7, r4
 8003230:	6013      	str	r3, [r2, #0]
 8003232:	2301      	movs	r3, #1
 8003234:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	f383 8810 	msr	PRIMASK, r3
}
 800323c:	46c0      	nop			@ (mov r8, r8)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4967      	ldr	r1, [pc, #412]	@ (80033e8 <HAL_UART_IRQHandler+0x684>)
 800324a:	400a      	ands	r2, r1
 800324c:	601a      	str	r2, [r3, #0]
 800324e:	193b      	adds	r3, r7, r4
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	f383 8810 	msr	PRIMASK, r3
}
 800325a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800325c:	f3ef 8310 	mrs	r3, PRIMASK
 8003260:	61bb      	str	r3, [r7, #24]
  return(result);
 8003262:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003264:	2484      	movs	r4, #132	@ 0x84
 8003266:	193a      	adds	r2, r7, r4
 8003268:	6013      	str	r3, [r2, #0]
 800326a:	2301      	movs	r3, #1
 800326c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	f383 8810 	msr	PRIMASK, r3
}
 8003274:	46c0      	nop			@ (mov r8, r8)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	689a      	ldr	r2, [r3, #8]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	495a      	ldr	r1, [pc, #360]	@ (80033ec <HAL_UART_IRQHandler+0x688>)
 8003282:	400a      	ands	r2, r1
 8003284:	609a      	str	r2, [r3, #8]
 8003286:	193b      	adds	r3, r7, r4
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800328c:	6a3b      	ldr	r3, [r7, #32]
 800328e:	f383 8810 	msr	PRIMASK, r3
}
 8003292:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	228c      	movs	r2, #140	@ 0x8c
 8003298:	2120      	movs	r1, #32
 800329a:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80032a8:	f3ef 8310 	mrs	r3, PRIMASK
 80032ac:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80032ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032b0:	2480      	movs	r4, #128	@ 0x80
 80032b2:	193a      	adds	r2, r7, r4
 80032b4:	6013      	str	r3, [r2, #0]
 80032b6:	2301      	movs	r3, #1
 80032b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032bc:	f383 8810 	msr	PRIMASK, r3
}
 80032c0:	46c0      	nop			@ (mov r8, r8)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2110      	movs	r1, #16
 80032ce:	438a      	bics	r2, r1
 80032d0:	601a      	str	r2, [r3, #0]
 80032d2:	193b      	adds	r3, r7, r4
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032da:	f383 8810 	msr	PRIMASK, r3
}
 80032de:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2202      	movs	r2, #2
 80032e4:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80032e6:	183b      	adds	r3, r7, r0
 80032e8:	881a      	ldrh	r2, [r3, #0]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	0011      	movs	r1, r2
 80032ee:	0018      	movs	r0, r3
 80032f0:	f7fd fa68 	bl	80007c4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80032f4:	e06f      	b.n	80033d6 <HAL_UART_IRQHandler+0x672>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80032f6:	23a4      	movs	r3, #164	@ 0xa4
 80032f8:	18fb      	adds	r3, r7, r3
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	2380      	movs	r3, #128	@ 0x80
 80032fe:	035b      	lsls	r3, r3, #13
 8003300:	4013      	ands	r3, r2
 8003302:	d010      	beq.n	8003326 <HAL_UART_IRQHandler+0x5c2>
 8003304:	239c      	movs	r3, #156	@ 0x9c
 8003306:	18fb      	adds	r3, r7, r3
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	2380      	movs	r3, #128	@ 0x80
 800330c:	03db      	lsls	r3, r3, #15
 800330e:	4013      	ands	r3, r2
 8003310:	d009      	beq.n	8003326 <HAL_UART_IRQHandler+0x5c2>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	2280      	movs	r2, #128	@ 0x80
 8003318:	0352      	lsls	r2, r2, #13
 800331a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	0018      	movs	r0, r3
 8003320:	f001 f902 	bl	8004528 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003324:	e05a      	b.n	80033dc <HAL_UART_IRQHandler+0x678>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003326:	23a4      	movs	r3, #164	@ 0xa4
 8003328:	18fb      	adds	r3, r7, r3
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2280      	movs	r2, #128	@ 0x80
 800332e:	4013      	ands	r3, r2
 8003330:	d016      	beq.n	8003360 <HAL_UART_IRQHandler+0x5fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003332:	23a0      	movs	r3, #160	@ 0xa0
 8003334:	18fb      	adds	r3, r7, r3
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2280      	movs	r2, #128	@ 0x80
 800333a:	4013      	ands	r3, r2
 800333c:	d106      	bne.n	800334c <HAL_UART_IRQHandler+0x5e8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800333e:	239c      	movs	r3, #156	@ 0x9c
 8003340:	18fb      	adds	r3, r7, r3
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	2380      	movs	r3, #128	@ 0x80
 8003346:	041b      	lsls	r3, r3, #16
 8003348:	4013      	ands	r3, r2
 800334a:	d009      	beq.n	8003360 <HAL_UART_IRQHandler+0x5fc>
  {
    if (huart->TxISR != NULL)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003350:	2b00      	cmp	r3, #0
 8003352:	d042      	beq.n	80033da <HAL_UART_IRQHandler+0x676>
    {
      huart->TxISR(huart);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	0010      	movs	r0, r2
 800335c:	4798      	blx	r3
    }
    return;
 800335e:	e03c      	b.n	80033da <HAL_UART_IRQHandler+0x676>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003360:	23a4      	movs	r3, #164	@ 0xa4
 8003362:	18fb      	adds	r3, r7, r3
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	2240      	movs	r2, #64	@ 0x40
 8003368:	4013      	ands	r3, r2
 800336a:	d00a      	beq.n	8003382 <HAL_UART_IRQHandler+0x61e>
 800336c:	23a0      	movs	r3, #160	@ 0xa0
 800336e:	18fb      	adds	r3, r7, r3
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	2240      	movs	r2, #64	@ 0x40
 8003374:	4013      	ands	r3, r2
 8003376:	d004      	beq.n	8003382 <HAL_UART_IRQHandler+0x61e>
  {
    UART_EndTransmit_IT(huart);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	0018      	movs	r0, r3
 800337c:	f001 f836 	bl	80043ec <UART_EndTransmit_IT>
    return;
 8003380:	e02c      	b.n	80033dc <HAL_UART_IRQHandler+0x678>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003382:	23a4      	movs	r3, #164	@ 0xa4
 8003384:	18fb      	adds	r3, r7, r3
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	2380      	movs	r3, #128	@ 0x80
 800338a:	041b      	lsls	r3, r3, #16
 800338c:	4013      	ands	r3, r2
 800338e:	d00b      	beq.n	80033a8 <HAL_UART_IRQHandler+0x644>
 8003390:	23a0      	movs	r3, #160	@ 0xa0
 8003392:	18fb      	adds	r3, r7, r3
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	2380      	movs	r3, #128	@ 0x80
 8003398:	05db      	lsls	r3, r3, #23
 800339a:	4013      	ands	r3, r2
 800339c:	d004      	beq.n	80033a8 <HAL_UART_IRQHandler+0x644>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	0018      	movs	r0, r3
 80033a2:	f001 f8d1 	bl	8004548 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80033a6:	e019      	b.n	80033dc <HAL_UART_IRQHandler+0x678>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80033a8:	23a4      	movs	r3, #164	@ 0xa4
 80033aa:	18fb      	adds	r3, r7, r3
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	2380      	movs	r3, #128	@ 0x80
 80033b0:	045b      	lsls	r3, r3, #17
 80033b2:	4013      	ands	r3, r2
 80033b4:	d012      	beq.n	80033dc <HAL_UART_IRQHandler+0x678>
 80033b6:	23a0      	movs	r3, #160	@ 0xa0
 80033b8:	18fb      	adds	r3, r7, r3
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	da0d      	bge.n	80033dc <HAL_UART_IRQHandler+0x678>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	0018      	movs	r0, r3
 80033c4:	f001 f8b8 	bl	8004538 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80033c8:	e008      	b.n	80033dc <HAL_UART_IRQHandler+0x678>
      return;
 80033ca:	46c0      	nop			@ (mov r8, r8)
 80033cc:	e006      	b.n	80033dc <HAL_UART_IRQHandler+0x678>
    return;
 80033ce:	46c0      	nop			@ (mov r8, r8)
 80033d0:	e004      	b.n	80033dc <HAL_UART_IRQHandler+0x678>
      return;
 80033d2:	46c0      	nop			@ (mov r8, r8)
 80033d4:	e002      	b.n	80033dc <HAL_UART_IRQHandler+0x678>
      return;
 80033d6:	46c0      	nop			@ (mov r8, r8)
 80033d8:	e000      	b.n	80033dc <HAL_UART_IRQHandler+0x678>
    return;
 80033da:	46c0      	nop			@ (mov r8, r8)
  }
}
 80033dc:	46bd      	mov	sp, r7
 80033de:	b02a      	add	sp, #168	@ 0xa8
 80033e0:	bdb0      	pop	{r4, r5, r7, pc}
 80033e2:	46c0      	nop			@ (mov r8, r8)
 80033e4:	fffffeff 	.word	0xfffffeff
 80033e8:	fffffedf 	.word	0xfffffedf
 80033ec:	effffffe 	.word	0xeffffffe

080033f0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80033f8:	46c0      	nop			@ (mov r8, r8)
 80033fa:	46bd      	mov	sp, r7
 80033fc:	b002      	add	sp, #8
 80033fe:	bd80      	pop	{r7, pc}

08003400 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003408:	46c0      	nop			@ (mov r8, r8)
 800340a:	46bd      	mov	sp, r7
 800340c:	b002      	add	sp, #8
 800340e:	bd80      	pop	{r7, pc}

08003410 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b082      	sub	sp, #8
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003418:	46c0      	nop			@ (mov r8, r8)
 800341a:	46bd      	mov	sp, r7
 800341c:	b002      	add	sp, #8
 800341e:	bd80      	pop	{r7, pc}

08003420 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8003428:	46c0      	nop			@ (mov r8, r8)
 800342a:	46bd      	mov	sp, r7
 800342c:	b002      	add	sp, #8
 800342e:	bd80      	pop	{r7, pc}

08003430 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b088      	sub	sp, #32
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003438:	231e      	movs	r3, #30
 800343a:	18fb      	adds	r3, r7, r3
 800343c:	2200      	movs	r2, #0
 800343e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	689a      	ldr	r2, [r3, #8]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	691b      	ldr	r3, [r3, #16]
 8003448:	431a      	orrs	r2, r3
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	695b      	ldr	r3, [r3, #20]
 800344e:	431a      	orrs	r2, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	69db      	ldr	r3, [r3, #28]
 8003454:	4313      	orrs	r3, r2
 8003456:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4aab      	ldr	r2, [pc, #684]	@ (800370c <UART_SetConfig+0x2dc>)
 8003460:	4013      	ands	r3, r2
 8003462:	0019      	movs	r1, r3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	697a      	ldr	r2, [r7, #20]
 800346a:	430a      	orrs	r2, r1
 800346c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	4aa6      	ldr	r2, [pc, #664]	@ (8003710 <UART_SetConfig+0x2e0>)
 8003476:	4013      	ands	r3, r2
 8003478:	0019      	movs	r1, r3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	68da      	ldr	r2, [r3, #12]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	430a      	orrs	r2, r1
 8003484:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	699b      	ldr	r3, [r3, #24]
 800348a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a1b      	ldr	r3, [r3, #32]
 8003490:	697a      	ldr	r2, [r7, #20]
 8003492:	4313      	orrs	r3, r2
 8003494:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	4a9d      	ldr	r2, [pc, #628]	@ (8003714 <UART_SetConfig+0x2e4>)
 800349e:	4013      	ands	r3, r2
 80034a0:	0019      	movs	r1, r3
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	697a      	ldr	r2, [r7, #20]
 80034a8:	430a      	orrs	r2, r1
 80034aa:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034b2:	220f      	movs	r2, #15
 80034b4:	4393      	bics	r3, r2
 80034b6:	0019      	movs	r1, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	430a      	orrs	r2, r1
 80034c2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a93      	ldr	r2, [pc, #588]	@ (8003718 <UART_SetConfig+0x2e8>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d127      	bne.n	800351e <UART_SetConfig+0xee>
 80034ce:	4b93      	ldr	r3, [pc, #588]	@ (800371c <UART_SetConfig+0x2ec>)
 80034d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034d2:	2203      	movs	r2, #3
 80034d4:	4013      	ands	r3, r2
 80034d6:	2b03      	cmp	r3, #3
 80034d8:	d017      	beq.n	800350a <UART_SetConfig+0xda>
 80034da:	d81b      	bhi.n	8003514 <UART_SetConfig+0xe4>
 80034dc:	2b02      	cmp	r3, #2
 80034de:	d00a      	beq.n	80034f6 <UART_SetConfig+0xc6>
 80034e0:	d818      	bhi.n	8003514 <UART_SetConfig+0xe4>
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d002      	beq.n	80034ec <UART_SetConfig+0xbc>
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d00a      	beq.n	8003500 <UART_SetConfig+0xd0>
 80034ea:	e013      	b.n	8003514 <UART_SetConfig+0xe4>
 80034ec:	231f      	movs	r3, #31
 80034ee:	18fb      	adds	r3, r7, r3
 80034f0:	2200      	movs	r2, #0
 80034f2:	701a      	strb	r2, [r3, #0]
 80034f4:	e021      	b.n	800353a <UART_SetConfig+0x10a>
 80034f6:	231f      	movs	r3, #31
 80034f8:	18fb      	adds	r3, r7, r3
 80034fa:	2202      	movs	r2, #2
 80034fc:	701a      	strb	r2, [r3, #0]
 80034fe:	e01c      	b.n	800353a <UART_SetConfig+0x10a>
 8003500:	231f      	movs	r3, #31
 8003502:	18fb      	adds	r3, r7, r3
 8003504:	2204      	movs	r2, #4
 8003506:	701a      	strb	r2, [r3, #0]
 8003508:	e017      	b.n	800353a <UART_SetConfig+0x10a>
 800350a:	231f      	movs	r3, #31
 800350c:	18fb      	adds	r3, r7, r3
 800350e:	2208      	movs	r2, #8
 8003510:	701a      	strb	r2, [r3, #0]
 8003512:	e012      	b.n	800353a <UART_SetConfig+0x10a>
 8003514:	231f      	movs	r3, #31
 8003516:	18fb      	adds	r3, r7, r3
 8003518:	2210      	movs	r2, #16
 800351a:	701a      	strb	r2, [r3, #0]
 800351c:	e00d      	b.n	800353a <UART_SetConfig+0x10a>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a7f      	ldr	r2, [pc, #508]	@ (8003720 <UART_SetConfig+0x2f0>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d104      	bne.n	8003532 <UART_SetConfig+0x102>
 8003528:	231f      	movs	r3, #31
 800352a:	18fb      	adds	r3, r7, r3
 800352c:	2200      	movs	r2, #0
 800352e:	701a      	strb	r2, [r3, #0]
 8003530:	e003      	b.n	800353a <UART_SetConfig+0x10a>
 8003532:	231f      	movs	r3, #31
 8003534:	18fb      	adds	r3, r7, r3
 8003536:	2210      	movs	r2, #16
 8003538:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	69da      	ldr	r2, [r3, #28]
 800353e:	2380      	movs	r3, #128	@ 0x80
 8003540:	021b      	lsls	r3, r3, #8
 8003542:	429a      	cmp	r2, r3
 8003544:	d000      	beq.n	8003548 <UART_SetConfig+0x118>
 8003546:	e06f      	b.n	8003628 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8003548:	231f      	movs	r3, #31
 800354a:	18fb      	adds	r3, r7, r3
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	2b08      	cmp	r3, #8
 8003550:	d01f      	beq.n	8003592 <UART_SetConfig+0x162>
 8003552:	dc22      	bgt.n	800359a <UART_SetConfig+0x16a>
 8003554:	2b04      	cmp	r3, #4
 8003556:	d017      	beq.n	8003588 <UART_SetConfig+0x158>
 8003558:	dc1f      	bgt.n	800359a <UART_SetConfig+0x16a>
 800355a:	2b00      	cmp	r3, #0
 800355c:	d002      	beq.n	8003564 <UART_SetConfig+0x134>
 800355e:	2b02      	cmp	r3, #2
 8003560:	d005      	beq.n	800356e <UART_SetConfig+0x13e>
 8003562:	e01a      	b.n	800359a <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003564:	f7ff f90e 	bl	8002784 <HAL_RCC_GetPCLK1Freq>
 8003568:	0003      	movs	r3, r0
 800356a:	61bb      	str	r3, [r7, #24]
        break;
 800356c:	e01c      	b.n	80035a8 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 800356e:	4b6b      	ldr	r3, [pc, #428]	@ (800371c <UART_SetConfig+0x2ec>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	095b      	lsrs	r3, r3, #5
 8003574:	2207      	movs	r2, #7
 8003576:	4013      	ands	r3, r2
 8003578:	3301      	adds	r3, #1
 800357a:	0019      	movs	r1, r3
 800357c:	4869      	ldr	r0, [pc, #420]	@ (8003724 <UART_SetConfig+0x2f4>)
 800357e:	f7fc fdc3 	bl	8000108 <__udivsi3>
 8003582:	0003      	movs	r3, r0
 8003584:	61bb      	str	r3, [r7, #24]
        break;
 8003586:	e00f      	b.n	80035a8 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003588:	f7ff f886 	bl	8002698 <HAL_RCC_GetSysClockFreq>
 800358c:	0003      	movs	r3, r0
 800358e:	61bb      	str	r3, [r7, #24]
        break;
 8003590:	e00a      	b.n	80035a8 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003592:	2380      	movs	r3, #128	@ 0x80
 8003594:	021b      	lsls	r3, r3, #8
 8003596:	61bb      	str	r3, [r7, #24]
        break;
 8003598:	e006      	b.n	80035a8 <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 800359a:	2300      	movs	r3, #0
 800359c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800359e:	231e      	movs	r3, #30
 80035a0:	18fb      	adds	r3, r7, r3
 80035a2:	2201      	movs	r2, #1
 80035a4:	701a      	strb	r2, [r3, #0]
        break;
 80035a6:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d100      	bne.n	80035b0 <UART_SetConfig+0x180>
 80035ae:	e097      	b.n	80036e0 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80035b4:	4b5c      	ldr	r3, [pc, #368]	@ (8003728 <UART_SetConfig+0x2f8>)
 80035b6:	0052      	lsls	r2, r2, #1
 80035b8:	5ad3      	ldrh	r3, [r2, r3]
 80035ba:	0019      	movs	r1, r3
 80035bc:	69b8      	ldr	r0, [r7, #24]
 80035be:	f7fc fda3 	bl	8000108 <__udivsi3>
 80035c2:	0003      	movs	r3, r0
 80035c4:	005a      	lsls	r2, r3, #1
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	085b      	lsrs	r3, r3, #1
 80035cc:	18d2      	adds	r2, r2, r3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	0019      	movs	r1, r3
 80035d4:	0010      	movs	r0, r2
 80035d6:	f7fc fd97 	bl	8000108 <__udivsi3>
 80035da:	0003      	movs	r3, r0
 80035dc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	2b0f      	cmp	r3, #15
 80035e2:	d91c      	bls.n	800361e <UART_SetConfig+0x1ee>
 80035e4:	693a      	ldr	r2, [r7, #16]
 80035e6:	2380      	movs	r3, #128	@ 0x80
 80035e8:	025b      	lsls	r3, r3, #9
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d217      	bcs.n	800361e <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	b29a      	uxth	r2, r3
 80035f2:	200e      	movs	r0, #14
 80035f4:	183b      	adds	r3, r7, r0
 80035f6:	210f      	movs	r1, #15
 80035f8:	438a      	bics	r2, r1
 80035fa:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	085b      	lsrs	r3, r3, #1
 8003600:	b29b      	uxth	r3, r3
 8003602:	2207      	movs	r2, #7
 8003604:	4013      	ands	r3, r2
 8003606:	b299      	uxth	r1, r3
 8003608:	183b      	adds	r3, r7, r0
 800360a:	183a      	adds	r2, r7, r0
 800360c:	8812      	ldrh	r2, [r2, #0]
 800360e:	430a      	orrs	r2, r1
 8003610:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	183a      	adds	r2, r7, r0
 8003618:	8812      	ldrh	r2, [r2, #0]
 800361a:	60da      	str	r2, [r3, #12]
 800361c:	e060      	b.n	80036e0 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 800361e:	231e      	movs	r3, #30
 8003620:	18fb      	adds	r3, r7, r3
 8003622:	2201      	movs	r2, #1
 8003624:	701a      	strb	r2, [r3, #0]
 8003626:	e05b      	b.n	80036e0 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003628:	231f      	movs	r3, #31
 800362a:	18fb      	adds	r3, r7, r3
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	2b08      	cmp	r3, #8
 8003630:	d01f      	beq.n	8003672 <UART_SetConfig+0x242>
 8003632:	dc22      	bgt.n	800367a <UART_SetConfig+0x24a>
 8003634:	2b04      	cmp	r3, #4
 8003636:	d017      	beq.n	8003668 <UART_SetConfig+0x238>
 8003638:	dc1f      	bgt.n	800367a <UART_SetConfig+0x24a>
 800363a:	2b00      	cmp	r3, #0
 800363c:	d002      	beq.n	8003644 <UART_SetConfig+0x214>
 800363e:	2b02      	cmp	r3, #2
 8003640:	d005      	beq.n	800364e <UART_SetConfig+0x21e>
 8003642:	e01a      	b.n	800367a <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003644:	f7ff f89e 	bl	8002784 <HAL_RCC_GetPCLK1Freq>
 8003648:	0003      	movs	r3, r0
 800364a:	61bb      	str	r3, [r7, #24]
        break;
 800364c:	e01c      	b.n	8003688 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 800364e:	4b33      	ldr	r3, [pc, #204]	@ (800371c <UART_SetConfig+0x2ec>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	095b      	lsrs	r3, r3, #5
 8003654:	2207      	movs	r2, #7
 8003656:	4013      	ands	r3, r2
 8003658:	3301      	adds	r3, #1
 800365a:	0019      	movs	r1, r3
 800365c:	4831      	ldr	r0, [pc, #196]	@ (8003724 <UART_SetConfig+0x2f4>)
 800365e:	f7fc fd53 	bl	8000108 <__udivsi3>
 8003662:	0003      	movs	r3, r0
 8003664:	61bb      	str	r3, [r7, #24]
        break;
 8003666:	e00f      	b.n	8003688 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003668:	f7ff f816 	bl	8002698 <HAL_RCC_GetSysClockFreq>
 800366c:	0003      	movs	r3, r0
 800366e:	61bb      	str	r3, [r7, #24]
        break;
 8003670:	e00a      	b.n	8003688 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003672:	2380      	movs	r3, #128	@ 0x80
 8003674:	021b      	lsls	r3, r3, #8
 8003676:	61bb      	str	r3, [r7, #24]
        break;
 8003678:	e006      	b.n	8003688 <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 800367a:	2300      	movs	r3, #0
 800367c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800367e:	231e      	movs	r3, #30
 8003680:	18fb      	adds	r3, r7, r3
 8003682:	2201      	movs	r2, #1
 8003684:	701a      	strb	r2, [r3, #0]
        break;
 8003686:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d028      	beq.n	80036e0 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003692:	4b25      	ldr	r3, [pc, #148]	@ (8003728 <UART_SetConfig+0x2f8>)
 8003694:	0052      	lsls	r2, r2, #1
 8003696:	5ad3      	ldrh	r3, [r2, r3]
 8003698:	0019      	movs	r1, r3
 800369a:	69b8      	ldr	r0, [r7, #24]
 800369c:	f7fc fd34 	bl	8000108 <__udivsi3>
 80036a0:	0003      	movs	r3, r0
 80036a2:	001a      	movs	r2, r3
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	085b      	lsrs	r3, r3, #1
 80036aa:	18d2      	adds	r2, r2, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	0019      	movs	r1, r3
 80036b2:	0010      	movs	r0, r2
 80036b4:	f7fc fd28 	bl	8000108 <__udivsi3>
 80036b8:	0003      	movs	r3, r0
 80036ba:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	2b0f      	cmp	r3, #15
 80036c0:	d90a      	bls.n	80036d8 <UART_SetConfig+0x2a8>
 80036c2:	693a      	ldr	r2, [r7, #16]
 80036c4:	2380      	movs	r3, #128	@ 0x80
 80036c6:	025b      	lsls	r3, r3, #9
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d205      	bcs.n	80036d8 <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	b29a      	uxth	r2, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	60da      	str	r2, [r3, #12]
 80036d6:	e003      	b.n	80036e0 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 80036d8:	231e      	movs	r3, #30
 80036da:	18fb      	adds	r3, r7, r3
 80036dc:	2201      	movs	r2, #1
 80036de:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	226a      	movs	r2, #106	@ 0x6a
 80036e4:	2101      	movs	r1, #1
 80036e6:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2268      	movs	r2, #104	@ 0x68
 80036ec:	2101      	movs	r1, #1
 80036ee:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80036fc:	231e      	movs	r3, #30
 80036fe:	18fb      	adds	r3, r7, r3
 8003700:	781b      	ldrb	r3, [r3, #0]
}
 8003702:	0018      	movs	r0, r3
 8003704:	46bd      	mov	sp, r7
 8003706:	b008      	add	sp, #32
 8003708:	bd80      	pop	{r7, pc}
 800370a:	46c0      	nop			@ (mov r8, r8)
 800370c:	cfff69f3 	.word	0xcfff69f3
 8003710:	ffffcfff 	.word	0xffffcfff
 8003714:	11fff4ff 	.word	0x11fff4ff
 8003718:	40013800 	.word	0x40013800
 800371c:	40021000 	.word	0x40021000
 8003720:	40004400 	.word	0x40004400
 8003724:	02dc6c00 	.word	0x02dc6c00
 8003728:	08004b68 	.word	0x08004b68

0800372c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b082      	sub	sp, #8
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003738:	2208      	movs	r2, #8
 800373a:	4013      	ands	r3, r2
 800373c:	d00b      	beq.n	8003756 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	4a4a      	ldr	r2, [pc, #296]	@ (8003870 <UART_AdvFeatureConfig+0x144>)
 8003746:	4013      	ands	r3, r2
 8003748:	0019      	movs	r1, r3
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	430a      	orrs	r2, r1
 8003754:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800375a:	2201      	movs	r2, #1
 800375c:	4013      	ands	r3, r2
 800375e:	d00b      	beq.n	8003778 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	4a43      	ldr	r2, [pc, #268]	@ (8003874 <UART_AdvFeatureConfig+0x148>)
 8003768:	4013      	ands	r3, r2
 800376a:	0019      	movs	r1, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	430a      	orrs	r2, r1
 8003776:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800377c:	2202      	movs	r2, #2
 800377e:	4013      	ands	r3, r2
 8003780:	d00b      	beq.n	800379a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	4a3b      	ldr	r2, [pc, #236]	@ (8003878 <UART_AdvFeatureConfig+0x14c>)
 800378a:	4013      	ands	r3, r2
 800378c:	0019      	movs	r1, r3
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	430a      	orrs	r2, r1
 8003798:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800379e:	2204      	movs	r2, #4
 80037a0:	4013      	ands	r3, r2
 80037a2:	d00b      	beq.n	80037bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	4a34      	ldr	r2, [pc, #208]	@ (800387c <UART_AdvFeatureConfig+0x150>)
 80037ac:	4013      	ands	r3, r2
 80037ae:	0019      	movs	r1, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	430a      	orrs	r2, r1
 80037ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037c0:	2210      	movs	r2, #16
 80037c2:	4013      	ands	r3, r2
 80037c4:	d00b      	beq.n	80037de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	4a2c      	ldr	r2, [pc, #176]	@ (8003880 <UART_AdvFeatureConfig+0x154>)
 80037ce:	4013      	ands	r3, r2
 80037d0:	0019      	movs	r1, r3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	430a      	orrs	r2, r1
 80037dc:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037e2:	2220      	movs	r2, #32
 80037e4:	4013      	ands	r3, r2
 80037e6:	d00b      	beq.n	8003800 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	4a25      	ldr	r2, [pc, #148]	@ (8003884 <UART_AdvFeatureConfig+0x158>)
 80037f0:	4013      	ands	r3, r2
 80037f2:	0019      	movs	r1, r3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	430a      	orrs	r2, r1
 80037fe:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003804:	2240      	movs	r2, #64	@ 0x40
 8003806:	4013      	ands	r3, r2
 8003808:	d01d      	beq.n	8003846 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	4a1d      	ldr	r2, [pc, #116]	@ (8003888 <UART_AdvFeatureConfig+0x15c>)
 8003812:	4013      	ands	r3, r2
 8003814:	0019      	movs	r1, r3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	430a      	orrs	r2, r1
 8003820:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003826:	2380      	movs	r3, #128	@ 0x80
 8003828:	035b      	lsls	r3, r3, #13
 800382a:	429a      	cmp	r2, r3
 800382c:	d10b      	bne.n	8003846 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	4a15      	ldr	r2, [pc, #84]	@ (800388c <UART_AdvFeatureConfig+0x160>)
 8003836:	4013      	ands	r3, r2
 8003838:	0019      	movs	r1, r3
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	430a      	orrs	r2, r1
 8003844:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800384a:	2280      	movs	r2, #128	@ 0x80
 800384c:	4013      	ands	r3, r2
 800384e:	d00b      	beq.n	8003868 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	4a0e      	ldr	r2, [pc, #56]	@ (8003890 <UART_AdvFeatureConfig+0x164>)
 8003858:	4013      	ands	r3, r2
 800385a:	0019      	movs	r1, r3
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	430a      	orrs	r2, r1
 8003866:	605a      	str	r2, [r3, #4]
  }
}
 8003868:	46c0      	nop			@ (mov r8, r8)
 800386a:	46bd      	mov	sp, r7
 800386c:	b002      	add	sp, #8
 800386e:	bd80      	pop	{r7, pc}
 8003870:	ffff7fff 	.word	0xffff7fff
 8003874:	fffdffff 	.word	0xfffdffff
 8003878:	fffeffff 	.word	0xfffeffff
 800387c:	fffbffff 	.word	0xfffbffff
 8003880:	ffffefff 	.word	0xffffefff
 8003884:	ffffdfff 	.word	0xffffdfff
 8003888:	ffefffff 	.word	0xffefffff
 800388c:	ff9fffff 	.word	0xff9fffff
 8003890:	fff7ffff 	.word	0xfff7ffff

08003894 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b092      	sub	sp, #72	@ 0x48
 8003898:	af02      	add	r7, sp, #8
 800389a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2290      	movs	r2, #144	@ 0x90
 80038a0:	2100      	movs	r1, #0
 80038a2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80038a4:	f7fd fdd2 	bl	800144c <HAL_GetTick>
 80038a8:	0003      	movs	r3, r0
 80038aa:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	2208      	movs	r2, #8
 80038b4:	4013      	ands	r3, r2
 80038b6:	2b08      	cmp	r3, #8
 80038b8:	d12d      	bne.n	8003916 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038bc:	2280      	movs	r2, #128	@ 0x80
 80038be:	0391      	lsls	r1, r2, #14
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	4a47      	ldr	r2, [pc, #284]	@ (80039e0 <UART_CheckIdleState+0x14c>)
 80038c4:	9200      	str	r2, [sp, #0]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f000 f88e 	bl	80039e8 <UART_WaitOnFlagUntilTimeout>
 80038cc:	1e03      	subs	r3, r0, #0
 80038ce:	d022      	beq.n	8003916 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80038d0:	f3ef 8310 	mrs	r3, PRIMASK
 80038d4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80038d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80038d8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80038da:	2301      	movs	r3, #1
 80038dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038e0:	f383 8810 	msr	PRIMASK, r3
}
 80038e4:	46c0      	nop			@ (mov r8, r8)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	2180      	movs	r1, #128	@ 0x80
 80038f2:	438a      	bics	r2, r1
 80038f4:	601a      	str	r2, [r3, #0]
 80038f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038fc:	f383 8810 	msr	PRIMASK, r3
}
 8003900:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2288      	movs	r2, #136	@ 0x88
 8003906:	2120      	movs	r1, #32
 8003908:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2284      	movs	r2, #132	@ 0x84
 800390e:	2100      	movs	r1, #0
 8003910:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e060      	b.n	80039d8 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	2204      	movs	r2, #4
 800391e:	4013      	ands	r3, r2
 8003920:	2b04      	cmp	r3, #4
 8003922:	d146      	bne.n	80039b2 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003924:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003926:	2280      	movs	r2, #128	@ 0x80
 8003928:	03d1      	lsls	r1, r2, #15
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	4a2c      	ldr	r2, [pc, #176]	@ (80039e0 <UART_CheckIdleState+0x14c>)
 800392e:	9200      	str	r2, [sp, #0]
 8003930:	2200      	movs	r2, #0
 8003932:	f000 f859 	bl	80039e8 <UART_WaitOnFlagUntilTimeout>
 8003936:	1e03      	subs	r3, r0, #0
 8003938:	d03b      	beq.n	80039b2 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800393a:	f3ef 8310 	mrs	r3, PRIMASK
 800393e:	60fb      	str	r3, [r7, #12]
  return(result);
 8003940:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003942:	637b      	str	r3, [r7, #52]	@ 0x34
 8003944:	2301      	movs	r3, #1
 8003946:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	f383 8810 	msr	PRIMASK, r3
}
 800394e:	46c0      	nop			@ (mov r8, r8)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4922      	ldr	r1, [pc, #136]	@ (80039e4 <UART_CheckIdleState+0x150>)
 800395c:	400a      	ands	r2, r1
 800395e:	601a      	str	r2, [r3, #0]
 8003960:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003962:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	f383 8810 	msr	PRIMASK, r3
}
 800396a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800396c:	f3ef 8310 	mrs	r3, PRIMASK
 8003970:	61bb      	str	r3, [r7, #24]
  return(result);
 8003972:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003974:	633b      	str	r3, [r7, #48]	@ 0x30
 8003976:	2301      	movs	r3, #1
 8003978:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	f383 8810 	msr	PRIMASK, r3
}
 8003980:	46c0      	nop			@ (mov r8, r8)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	689a      	ldr	r2, [r3, #8]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2101      	movs	r1, #1
 800398e:	438a      	bics	r2, r1
 8003990:	609a      	str	r2, [r3, #8]
 8003992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003994:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003996:	6a3b      	ldr	r3, [r7, #32]
 8003998:	f383 8810 	msr	PRIMASK, r3
}
 800399c:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	228c      	movs	r2, #140	@ 0x8c
 80039a2:	2120      	movs	r1, #32
 80039a4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2284      	movs	r2, #132	@ 0x84
 80039aa:	2100      	movs	r1, #0
 80039ac:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e012      	b.n	80039d8 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2288      	movs	r2, #136	@ 0x88
 80039b6:	2120      	movs	r1, #32
 80039b8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	228c      	movs	r2, #140	@ 0x8c
 80039be:	2120      	movs	r1, #32
 80039c0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2200      	movs	r2, #0
 80039cc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2284      	movs	r2, #132	@ 0x84
 80039d2:	2100      	movs	r1, #0
 80039d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80039d6:	2300      	movs	r3, #0
}
 80039d8:	0018      	movs	r0, r3
 80039da:	46bd      	mov	sp, r7
 80039dc:	b010      	add	sp, #64	@ 0x40
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	01ffffff 	.word	0x01ffffff
 80039e4:	fffffedf 	.word	0xfffffedf

080039e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b084      	sub	sp, #16
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	60f8      	str	r0, [r7, #12]
 80039f0:	60b9      	str	r1, [r7, #8]
 80039f2:	603b      	str	r3, [r7, #0]
 80039f4:	1dfb      	adds	r3, r7, #7
 80039f6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039f8:	e051      	b.n	8003a9e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	3301      	adds	r3, #1
 80039fe:	d04e      	beq.n	8003a9e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a00:	f7fd fd24 	bl	800144c <HAL_GetTick>
 8003a04:	0002      	movs	r2, r0
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	69ba      	ldr	r2, [r7, #24]
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d302      	bcc.n	8003a16 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003a10:	69bb      	ldr	r3, [r7, #24]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d101      	bne.n	8003a1a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e051      	b.n	8003abe <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	2204      	movs	r2, #4
 8003a22:	4013      	ands	r3, r2
 8003a24:	d03b      	beq.n	8003a9e <UART_WaitOnFlagUntilTimeout+0xb6>
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	2b80      	cmp	r3, #128	@ 0x80
 8003a2a:	d038      	beq.n	8003a9e <UART_WaitOnFlagUntilTimeout+0xb6>
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	2b40      	cmp	r3, #64	@ 0x40
 8003a30:	d035      	beq.n	8003a9e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	69db      	ldr	r3, [r3, #28]
 8003a38:	2208      	movs	r2, #8
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	2b08      	cmp	r3, #8
 8003a3e:	d111      	bne.n	8003a64 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	2208      	movs	r2, #8
 8003a46:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	0018      	movs	r0, r3
 8003a4c:	f000 f922 	bl	8003c94 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2290      	movs	r2, #144	@ 0x90
 8003a54:	2108      	movs	r1, #8
 8003a56:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2284      	movs	r2, #132	@ 0x84
 8003a5c:	2100      	movs	r1, #0
 8003a5e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e02c      	b.n	8003abe <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	69da      	ldr	r2, [r3, #28]
 8003a6a:	2380      	movs	r3, #128	@ 0x80
 8003a6c:	011b      	lsls	r3, r3, #4
 8003a6e:	401a      	ands	r2, r3
 8003a70:	2380      	movs	r3, #128	@ 0x80
 8003a72:	011b      	lsls	r3, r3, #4
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d112      	bne.n	8003a9e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	2280      	movs	r2, #128	@ 0x80
 8003a7e:	0112      	lsls	r2, r2, #4
 8003a80:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	0018      	movs	r0, r3
 8003a86:	f000 f905 	bl	8003c94 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2290      	movs	r2, #144	@ 0x90
 8003a8e:	2120      	movs	r1, #32
 8003a90:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2284      	movs	r2, #132	@ 0x84
 8003a96:	2100      	movs	r1, #0
 8003a98:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e00f      	b.n	8003abe <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	69db      	ldr	r3, [r3, #28]
 8003aa4:	68ba      	ldr	r2, [r7, #8]
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	68ba      	ldr	r2, [r7, #8]
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	425a      	negs	r2, r3
 8003aae:	4153      	adcs	r3, r2
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	001a      	movs	r2, r3
 8003ab4:	1dfb      	adds	r3, r7, #7
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d09e      	beq.n	80039fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	0018      	movs	r0, r3
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	b004      	add	sp, #16
 8003ac4:	bd80      	pop	{r7, pc}
	...

08003ac8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b090      	sub	sp, #64	@ 0x40
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	60f8      	str	r0, [r7, #12]
 8003ad0:	60b9      	str	r1, [r7, #8]
 8003ad2:	1dbb      	adds	r3, r7, #6
 8003ad4:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	68ba      	ldr	r2, [r7, #8]
 8003ada:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	1dba      	adds	r2, r7, #6
 8003ae0:	215c      	movs	r1, #92	@ 0x5c
 8003ae2:	8812      	ldrh	r2, [r2, #0]
 8003ae4:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2290      	movs	r2, #144	@ 0x90
 8003aea:	2100      	movs	r1, #0
 8003aec:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	228c      	movs	r2, #140	@ 0x8c
 8003af2:	2122      	movs	r1, #34	@ 0x22
 8003af4:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2280      	movs	r2, #128	@ 0x80
 8003afa:	589b      	ldr	r3, [r3, r2]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d02d      	beq.n	8003b5c <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2280      	movs	r2, #128	@ 0x80
 8003b04:	589b      	ldr	r3, [r3, r2]
 8003b06:	4a40      	ldr	r2, [pc, #256]	@ (8003c08 <UART_Start_Receive_DMA+0x140>)
 8003b08:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2280      	movs	r2, #128	@ 0x80
 8003b0e:	589b      	ldr	r3, [r3, r2]
 8003b10:	4a3e      	ldr	r2, [pc, #248]	@ (8003c0c <UART_Start_Receive_DMA+0x144>)
 8003b12:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2280      	movs	r2, #128	@ 0x80
 8003b18:	589b      	ldr	r3, [r3, r2]
 8003b1a:	4a3d      	ldr	r2, [pc, #244]	@ (8003c10 <UART_Start_Receive_DMA+0x148>)
 8003b1c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2280      	movs	r2, #128	@ 0x80
 8003b22:	589b      	ldr	r3, [r3, r2]
 8003b24:	2200      	movs	r2, #0
 8003b26:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2280      	movs	r2, #128	@ 0x80
 8003b2c:	5898      	ldr	r0, [r3, r2]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	3324      	adds	r3, #36	@ 0x24
 8003b34:	0019      	movs	r1, r3
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b3a:	001a      	movs	r2, r3
 8003b3c:	1dbb      	adds	r3, r7, #6
 8003b3e:	881b      	ldrh	r3, [r3, #0]
 8003b40:	f7fd fe1a 	bl	8001778 <HAL_DMA_Start_IT>
 8003b44:	1e03      	subs	r3, r0, #0
 8003b46:	d009      	beq.n	8003b5c <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2290      	movs	r2, #144	@ 0x90
 8003b4c:	2110      	movs	r1, #16
 8003b4e:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	228c      	movs	r2, #140	@ 0x8c
 8003b54:	2120      	movs	r1, #32
 8003b56:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e050      	b.n	8003bfe <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	691b      	ldr	r3, [r3, #16]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d019      	beq.n	8003b98 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003b64:	f3ef 8310 	mrs	r3, PRIMASK
 8003b68:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8003b6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b6e:	2301      	movs	r3, #1
 8003b70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b74:	f383 8810 	msr	PRIMASK, r3
}
 8003b78:	46c0      	nop			@ (mov r8, r8)
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2180      	movs	r1, #128	@ 0x80
 8003b86:	0049      	lsls	r1, r1, #1
 8003b88:	430a      	orrs	r2, r1
 8003b8a:	601a      	str	r2, [r3, #0]
 8003b8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b8e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b92:	f383 8810 	msr	PRIMASK, r3
}
 8003b96:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003b98:	f3ef 8310 	mrs	r3, PRIMASK
 8003b9c:	613b      	str	r3, [r7, #16]
  return(result);
 8003b9e:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ba0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	f383 8810 	msr	PRIMASK, r3
}
 8003bac:	46c0      	nop			@ (mov r8, r8)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	689a      	ldr	r2, [r3, #8]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	2101      	movs	r1, #1
 8003bba:	430a      	orrs	r2, r1
 8003bbc:	609a      	str	r2, [r3, #8]
 8003bbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bc0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bc2:	69bb      	ldr	r3, [r7, #24]
 8003bc4:	f383 8810 	msr	PRIMASK, r3
}
 8003bc8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003bca:	f3ef 8310 	mrs	r3, PRIMASK
 8003bce:	61fb      	str	r3, [r7, #28]
  return(result);
 8003bd0:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bd2:	637b      	str	r3, [r7, #52]	@ 0x34
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bd8:	6a3b      	ldr	r3, [r7, #32]
 8003bda:	f383 8810 	msr	PRIMASK, r3
}
 8003bde:	46c0      	nop			@ (mov r8, r8)
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	689a      	ldr	r2, [r3, #8]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	2140      	movs	r1, #64	@ 0x40
 8003bec:	430a      	orrs	r2, r1
 8003bee:	609a      	str	r2, [r3, #8]
 8003bf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bf2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bf6:	f383 8810 	msr	PRIMASK, r3
}
 8003bfa:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8003bfc:	2300      	movs	r3, #0
}
 8003bfe:	0018      	movs	r0, r3
 8003c00:	46bd      	mov	sp, r7
 8003c02:	b010      	add	sp, #64	@ 0x40
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	46c0      	nop			@ (mov r8, r8)
 8003c08:	08003d61 	.word	0x08003d61
 8003c0c:	08003e91 	.word	0x08003e91
 8003c10:	08003ed3 	.word	0x08003ed3

08003c14 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b08a      	sub	sp, #40	@ 0x28
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003c1c:	f3ef 8310 	mrs	r3, PRIMASK
 8003c20:	60bb      	str	r3, [r7, #8]
  return(result);
 8003c22:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8003c24:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c26:	2301      	movs	r3, #1
 8003c28:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	f383 8810 	msr	PRIMASK, r3
}
 8003c30:	46c0      	nop			@ (mov r8, r8)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	21c0      	movs	r1, #192	@ 0xc0
 8003c3e:	438a      	bics	r2, r1
 8003c40:	601a      	str	r2, [r3, #0]
 8003c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c44:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	f383 8810 	msr	PRIMASK, r3
}
 8003c4c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003c4e:	f3ef 8310 	mrs	r3, PRIMASK
 8003c52:	617b      	str	r3, [r7, #20]
  return(result);
 8003c54:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8003c56:	623b      	str	r3, [r7, #32]
 8003c58:	2301      	movs	r3, #1
 8003c5a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c5c:	69bb      	ldr	r3, [r7, #24]
 8003c5e:	f383 8810 	msr	PRIMASK, r3
}
 8003c62:	46c0      	nop			@ (mov r8, r8)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	689a      	ldr	r2, [r3, #8]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4908      	ldr	r1, [pc, #32]	@ (8003c90 <UART_EndTxTransfer+0x7c>)
 8003c70:	400a      	ands	r2, r1
 8003c72:	609a      	str	r2, [r3, #8]
 8003c74:	6a3b      	ldr	r3, [r7, #32]
 8003c76:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	f383 8810 	msr	PRIMASK, r3
}
 8003c7e:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2288      	movs	r2, #136	@ 0x88
 8003c84:	2120      	movs	r1, #32
 8003c86:	5099      	str	r1, [r3, r2]
}
 8003c88:	46c0      	nop			@ (mov r8, r8)
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	b00a      	add	sp, #40	@ 0x28
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	ff7fffff 	.word	0xff7fffff

08003c94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b08e      	sub	sp, #56	@ 0x38
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003c9c:	f3ef 8310 	mrs	r3, PRIMASK
 8003ca0:	617b      	str	r3, [r7, #20]
  return(result);
 8003ca2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003ca4:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003caa:	69bb      	ldr	r3, [r7, #24]
 8003cac:	f383 8810 	msr	PRIMASK, r3
}
 8003cb0:	46c0      	nop			@ (mov r8, r8)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4926      	ldr	r1, [pc, #152]	@ (8003d58 <UART_EndRxTransfer+0xc4>)
 8003cbe:	400a      	ands	r2, r1
 8003cc0:	601a      	str	r2, [r3, #0]
 8003cc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cc4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cc6:	69fb      	ldr	r3, [r7, #28]
 8003cc8:	f383 8810 	msr	PRIMASK, r3
}
 8003ccc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003cce:	f3ef 8310 	mrs	r3, PRIMASK
 8003cd2:	623b      	str	r3, [r7, #32]
  return(result);
 8003cd4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003cd6:	633b      	str	r3, [r7, #48]	@ 0x30
 8003cd8:	2301      	movs	r3, #1
 8003cda:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cde:	f383 8810 	msr	PRIMASK, r3
}
 8003ce2:	46c0      	nop			@ (mov r8, r8)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	689a      	ldr	r2, [r3, #8]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	491b      	ldr	r1, [pc, #108]	@ (8003d5c <UART_EndRxTransfer+0xc8>)
 8003cf0:	400a      	ands	r2, r1
 8003cf2:	609a      	str	r2, [r3, #8]
 8003cf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cf6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cfa:	f383 8810 	msr	PRIMASK, r3
}
 8003cfe:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d118      	bne.n	8003d3a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003d08:	f3ef 8310 	mrs	r3, PRIMASK
 8003d0c:	60bb      	str	r3, [r7, #8]
  return(result);
 8003d0e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d12:	2301      	movs	r3, #1
 8003d14:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	f383 8810 	msr	PRIMASK, r3
}
 8003d1c:	46c0      	nop			@ (mov r8, r8)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	2110      	movs	r1, #16
 8003d2a:	438a      	bics	r2, r1
 8003d2c:	601a      	str	r2, [r3, #0]
 8003d2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d30:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	f383 8810 	msr	PRIMASK, r3
}
 8003d38:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	228c      	movs	r2, #140	@ 0x8c
 8003d3e:	2120      	movs	r1, #32
 8003d40:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003d4e:	46c0      	nop			@ (mov r8, r8)
 8003d50:	46bd      	mov	sp, r7
 8003d52:	b00e      	add	sp, #56	@ 0x38
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	46c0      	nop			@ (mov r8, r8)
 8003d58:	fffffedf 	.word	0xfffffedf
 8003d5c:	effffffe 	.word	0xeffffffe

08003d60 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b094      	sub	sp, #80	@ 0x50
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d6c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	2220      	movs	r2, #32
 8003d76:	4013      	ands	r3, r2
 8003d78:	d16f      	bne.n	8003e5a <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8003d7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d7c:	225e      	movs	r2, #94	@ 0x5e
 8003d7e:	2100      	movs	r1, #0
 8003d80:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003d82:	f3ef 8310 	mrs	r3, PRIMASK
 8003d86:	61bb      	str	r3, [r7, #24]
  return(result);
 8003d88:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d8a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	f383 8810 	msr	PRIMASK, r3
}
 8003d96:	46c0      	nop			@ (mov r8, r8)
 8003d98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	493a      	ldr	r1, [pc, #232]	@ (8003e8c <UART_DMAReceiveCplt+0x12c>)
 8003da4:	400a      	ands	r2, r1
 8003da6:	601a      	str	r2, [r3, #0]
 8003da8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003daa:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dac:	6a3b      	ldr	r3, [r7, #32]
 8003dae:	f383 8810 	msr	PRIMASK, r3
}
 8003db2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003db4:	f3ef 8310 	mrs	r3, PRIMASK
 8003db8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dbc:	647b      	str	r3, [r7, #68]	@ 0x44
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dc4:	f383 8810 	msr	PRIMASK, r3
}
 8003dc8:	46c0      	nop			@ (mov r8, r8)
 8003dca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	689a      	ldr	r2, [r3, #8]
 8003dd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	2101      	movs	r1, #1
 8003dd6:	438a      	bics	r2, r1
 8003dd8:	609a      	str	r2, [r3, #8]
 8003dda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ddc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003de0:	f383 8810 	msr	PRIMASK, r3
}
 8003de4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003de6:	f3ef 8310 	mrs	r3, PRIMASK
 8003dea:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8003dec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003dee:	643b      	str	r3, [r7, #64]	@ 0x40
 8003df0:	2301      	movs	r3, #1
 8003df2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003df4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003df6:	f383 8810 	msr	PRIMASK, r3
}
 8003dfa:	46c0      	nop			@ (mov r8, r8)
 8003dfc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	689a      	ldr	r2, [r3, #8]
 8003e02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	2140      	movs	r1, #64	@ 0x40
 8003e08:	438a      	bics	r2, r1
 8003e0a:	609a      	str	r2, [r3, #8]
 8003e0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e0e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e12:	f383 8810 	msr	PRIMASK, r3
}
 8003e16:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003e18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e1a:	228c      	movs	r2, #140	@ 0x8c
 8003e1c:	2120      	movs	r1, #32
 8003e1e:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d118      	bne.n	8003e5a <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003e28:	f3ef 8310 	mrs	r3, PRIMASK
 8003e2c:	60fb      	str	r3, [r7, #12]
  return(result);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e30:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e32:	2301      	movs	r3, #1
 8003e34:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	f383 8810 	msr	PRIMASK, r3
}
 8003e3c:	46c0      	nop			@ (mov r8, r8)
 8003e3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2110      	movs	r1, #16
 8003e4a:	438a      	bics	r2, r1
 8003e4c:	601a      	str	r2, [r3, #0]
 8003e4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e50:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	f383 8810 	msr	PRIMASK, r3
}
 8003e58:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d108      	bne.n	8003e7a <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e6a:	225c      	movs	r2, #92	@ 0x5c
 8003e6c:	5a9a      	ldrh	r2, [r3, r2]
 8003e6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e70:	0011      	movs	r1, r2
 8003e72:	0018      	movs	r0, r3
 8003e74:	f7fc fca6 	bl	80007c4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003e78:	e003      	b.n	8003e82 <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 8003e7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e7c:	0018      	movs	r0, r3
 8003e7e:	f7ff fab7 	bl	80033f0 <HAL_UART_RxCpltCallback>
}
 8003e82:	46c0      	nop			@ (mov r8, r8)
 8003e84:	46bd      	mov	sp, r7
 8003e86:	b014      	add	sp, #80	@ 0x50
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	46c0      	nop			@ (mov r8, r8)
 8003e8c:	fffffeff 	.word	0xfffffeff

08003e90 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b084      	sub	sp, #16
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e9c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d10a      	bne.n	8003ec2 <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	225c      	movs	r2, #92	@ 0x5c
 8003eb0:	5a9b      	ldrh	r3, [r3, r2]
 8003eb2:	085b      	lsrs	r3, r3, #1
 8003eb4:	b29a      	uxth	r2, r3
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	0011      	movs	r1, r2
 8003eba:	0018      	movs	r0, r3
 8003ebc:	f7fc fc82 	bl	80007c4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003ec0:	e003      	b.n	8003eca <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	0018      	movs	r0, r3
 8003ec6:	f7ff fa9b 	bl	8003400 <HAL_UART_RxHalfCpltCallback>
}
 8003eca:	46c0      	nop			@ (mov r8, r8)
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	b004      	add	sp, #16
 8003ed0:	bd80      	pop	{r7, pc}

08003ed2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003ed2:	b580      	push	{r7, lr}
 8003ed4:	b086      	sub	sp, #24
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ede:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	2288      	movs	r2, #136	@ 0x88
 8003ee4:	589b      	ldr	r3, [r3, r2]
 8003ee6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	228c      	movs	r2, #140	@ 0x8c
 8003eec:	589b      	ldr	r3, [r3, r2]
 8003eee:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	2280      	movs	r2, #128	@ 0x80
 8003ef8:	4013      	ands	r3, r2
 8003efa:	2b80      	cmp	r3, #128	@ 0x80
 8003efc:	d10a      	bne.n	8003f14 <UART_DMAError+0x42>
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	2b21      	cmp	r3, #33	@ 0x21
 8003f02:	d107      	bne.n	8003f14 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	2256      	movs	r2, #86	@ 0x56
 8003f08:	2100      	movs	r1, #0
 8003f0a:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	0018      	movs	r0, r3
 8003f10:	f7ff fe80 	bl	8003c14 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	2240      	movs	r2, #64	@ 0x40
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	2b40      	cmp	r3, #64	@ 0x40
 8003f20:	d10a      	bne.n	8003f38 <UART_DMAError+0x66>
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2b22      	cmp	r3, #34	@ 0x22
 8003f26:	d107      	bne.n	8003f38 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	225e      	movs	r2, #94	@ 0x5e
 8003f2c:	2100      	movs	r1, #0
 8003f2e:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	0018      	movs	r0, r3
 8003f34:	f7ff feae 	bl	8003c94 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	2290      	movs	r2, #144	@ 0x90
 8003f3c:	589b      	ldr	r3, [r3, r2]
 8003f3e:	2210      	movs	r2, #16
 8003f40:	431a      	orrs	r2, r3
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	2190      	movs	r1, #144	@ 0x90
 8003f46:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	0018      	movs	r0, r3
 8003f4c:	f7ff fa60 	bl	8003410 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f50:	46c0      	nop			@ (mov r8, r8)
 8003f52:	46bd      	mov	sp, r7
 8003f54:	b006      	add	sp, #24
 8003f56:	bd80      	pop	{r7, pc}

08003f58 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f64:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	225e      	movs	r2, #94	@ 0x5e
 8003f6a:	2100      	movs	r1, #0
 8003f6c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2256      	movs	r2, #86	@ 0x56
 8003f72:	2100      	movs	r1, #0
 8003f74:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	0018      	movs	r0, r3
 8003f7a:	f7ff fa49 	bl	8003410 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f7e:	46c0      	nop			@ (mov r8, r8)
 8003f80:	46bd      	mov	sp, r7
 8003f82:	b004      	add	sp, #16
 8003f84:	bd80      	pop	{r7, pc}

08003f86 <UART_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8003f86:	b580      	push	{r7, lr}
 8003f88:	b084      	sub	sp, #16
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f92:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f98:	2200      	movs	r2, #0
 8003f9a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2280      	movs	r2, #128	@ 0x80
 8003fa0:	589b      	ldr	r3, [r3, r2]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d005      	beq.n	8003fb2 <UART_DMATxAbortCallback+0x2c>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2280      	movs	r2, #128	@ 0x80
 8003faa:	589b      	ldr	r3, [r3, r2]
 8003fac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d12d      	bne.n	800400e <UART_DMATxAbortCallback+0x88>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2256      	movs	r2, #86	@ 0x56
 8003fb6:	2100      	movs	r1, #0
 8003fb8:	5299      	strh	r1, [r3, r2]
  huart->RxXferCount = 0U;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	225e      	movs	r2, #94	@ 0x5e
 8003fbe:	2100      	movs	r1, #0
 8003fc0:	5299      	strh	r1, [r3, r2]

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2290      	movs	r2, #144	@ 0x90
 8003fc6:	2100      	movs	r1, #0
 8003fc8:	5099      	str	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	220f      	movs	r2, #15
 8003fd0:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003fd6:	2380      	movs	r3, #128	@ 0x80
 8003fd8:	059b      	lsls	r3, r3, #22
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d107      	bne.n	8003fee <UART_DMATxAbortCallback+0x68>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	699a      	ldr	r2, [r3, #24]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2110      	movs	r1, #16
 8003fea:	430a      	orrs	r2, r1
 8003fec:	619a      	str	r2, [r3, #24]
  }

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2288      	movs	r2, #136	@ 0x88
 8003ff2:	2120      	movs	r1, #32
 8003ff4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	228c      	movs	r2, #140	@ 0x8c
 8003ffa:	2120      	movs	r1, #32
 8003ffc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2200      	movs	r2, #0
 8004002:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	0018      	movs	r0, r3
 8004008:	f7ff fa0a 	bl	8003420 <HAL_UART_AbortCpltCallback>
 800400c:	e000      	b.n	8004010 <UART_DMATxAbortCallback+0x8a>
      return;
 800400e:	46c0      	nop			@ (mov r8, r8)
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004010:	46bd      	mov	sp, r7
 8004012:	b004      	add	sp, #16
 8004014:	bd80      	pop	{r7, pc}

08004016 <UART_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8004016:	b580      	push	{r7, lr}
 8004018:	b084      	sub	sp, #16
 800401a:	af00      	add	r7, sp, #0
 800401c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004022:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2280      	movs	r2, #128	@ 0x80
 8004028:	589b      	ldr	r3, [r3, r2]
 800402a:	2200      	movs	r2, #0
 800402c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004032:	2b00      	cmp	r3, #0
 8004034:	d004      	beq.n	8004040 <UART_DMARxAbortCallback+0x2a>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800403a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800403c:	2b00      	cmp	r3, #0
 800403e:	d127      	bne.n	8004090 <UART_DMARxAbortCallback+0x7a>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2256      	movs	r2, #86	@ 0x56
 8004044:	2100      	movs	r1, #0
 8004046:	5299      	strh	r1, [r3, r2]
  huart->RxXferCount = 0U;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	225e      	movs	r2, #94	@ 0x5e
 800404c:	2100      	movs	r1, #0
 800404e:	5299      	strh	r1, [r3, r2]

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2290      	movs	r2, #144	@ 0x90
 8004054:	2100      	movs	r1, #0
 8004056:	5099      	str	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	220f      	movs	r2, #15
 800405e:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	699a      	ldr	r2, [r3, #24]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	2108      	movs	r1, #8
 800406c:	430a      	orrs	r2, r1
 800406e:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2288      	movs	r2, #136	@ 0x88
 8004074:	2120      	movs	r1, #32
 8004076:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	228c      	movs	r2, #140	@ 0x8c
 800407c:	2120      	movs	r1, #32
 800407e:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2200      	movs	r2, #0
 8004084:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	0018      	movs	r0, r3
 800408a:	f7ff f9c9 	bl	8003420 <HAL_UART_AbortCpltCallback>
 800408e:	e000      	b.n	8004092 <UART_DMARxAbortCallback+0x7c>
      return;
 8004090:	46c0      	nop			@ (mov r8, r8)
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004092:	46bd      	mov	sp, r7
 8004094:	b004      	add	sp, #16
 8004096:	bd80      	pop	{r7, pc}

08004098 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b08a      	sub	sp, #40	@ 0x28
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2288      	movs	r2, #136	@ 0x88
 80040a4:	589b      	ldr	r3, [r3, r2]
 80040a6:	2b21      	cmp	r3, #33	@ 0x21
 80040a8:	d14c      	bne.n	8004144 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2256      	movs	r2, #86	@ 0x56
 80040ae:	5a9b      	ldrh	r3, [r3, r2]
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d132      	bne.n	800411c <UART_TxISR_8BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80040b6:	f3ef 8310 	mrs	r3, PRIMASK
 80040ba:	60bb      	str	r3, [r7, #8]
  return(result);
 80040bc:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80040be:	627b      	str	r3, [r7, #36]	@ 0x24
 80040c0:	2301      	movs	r3, #1
 80040c2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f383 8810 	msr	PRIMASK, r3
}
 80040ca:	46c0      	nop			@ (mov r8, r8)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	2180      	movs	r1, #128	@ 0x80
 80040d8:	438a      	bics	r2, r1
 80040da:	601a      	str	r2, [r3, #0]
 80040dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	f383 8810 	msr	PRIMASK, r3
}
 80040e6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80040e8:	f3ef 8310 	mrs	r3, PRIMASK
 80040ec:	617b      	str	r3, [r7, #20]
  return(result);
 80040ee:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80040f0:	623b      	str	r3, [r7, #32]
 80040f2:	2301      	movs	r3, #1
 80040f4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040f6:	69bb      	ldr	r3, [r7, #24]
 80040f8:	f383 8810 	msr	PRIMASK, r3
}
 80040fc:	46c0      	nop			@ (mov r8, r8)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	2140      	movs	r1, #64	@ 0x40
 800410a:	430a      	orrs	r2, r1
 800410c:	601a      	str	r2, [r3, #0]
 800410e:	6a3b      	ldr	r3, [r7, #32]
 8004110:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004112:	69fb      	ldr	r3, [r7, #28]
 8004114:	f383 8810 	msr	PRIMASK, r3
}
 8004118:	46c0      	nop			@ (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800411a:	e013      	b.n	8004144 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004120:	781a      	ldrb	r2, [r3, #0]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800412c:	1c5a      	adds	r2, r3, #1
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2256      	movs	r2, #86	@ 0x56
 8004136:	5a9b      	ldrh	r3, [r3, r2]
 8004138:	b29b      	uxth	r3, r3
 800413a:	3b01      	subs	r3, #1
 800413c:	b299      	uxth	r1, r3
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2256      	movs	r2, #86	@ 0x56
 8004142:	5299      	strh	r1, [r3, r2]
}
 8004144:	46c0      	nop			@ (mov r8, r8)
 8004146:	46bd      	mov	sp, r7
 8004148:	b00a      	add	sp, #40	@ 0x28
 800414a:	bd80      	pop	{r7, pc}

0800414c <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b08c      	sub	sp, #48	@ 0x30
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2288      	movs	r2, #136	@ 0x88
 8004158:	589b      	ldr	r3, [r3, r2]
 800415a:	2b21      	cmp	r3, #33	@ 0x21
 800415c:	d151      	bne.n	8004202 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2256      	movs	r2, #86	@ 0x56
 8004162:	5a9b      	ldrh	r3, [r3, r2]
 8004164:	b29b      	uxth	r3, r3
 8004166:	2b00      	cmp	r3, #0
 8004168:	d132      	bne.n	80041d0 <UART_TxISR_16BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800416a:	f3ef 8310 	mrs	r3, PRIMASK
 800416e:	60fb      	str	r3, [r7, #12]
  return(result);
 8004170:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8004172:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004174:	2301      	movs	r3, #1
 8004176:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	f383 8810 	msr	PRIMASK, r3
}
 800417e:	46c0      	nop			@ (mov r8, r8)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	2180      	movs	r1, #128	@ 0x80
 800418c:	438a      	bics	r2, r1
 800418e:	601a      	str	r2, [r3, #0]
 8004190:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004192:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	f383 8810 	msr	PRIMASK, r3
}
 800419a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800419c:	f3ef 8310 	mrs	r3, PRIMASK
 80041a0:	61bb      	str	r3, [r7, #24]
  return(result);
 80041a2:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80041a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80041a6:	2301      	movs	r3, #1
 80041a8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041aa:	69fb      	ldr	r3, [r7, #28]
 80041ac:	f383 8810 	msr	PRIMASK, r3
}
 80041b0:	46c0      	nop			@ (mov r8, r8)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	2140      	movs	r1, #64	@ 0x40
 80041be:	430a      	orrs	r2, r1
 80041c0:	601a      	str	r2, [r3, #0]
 80041c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041c4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041c6:	6a3b      	ldr	r3, [r7, #32]
 80041c8:	f383 8810 	msr	PRIMASK, r3
}
 80041cc:	46c0      	nop			@ (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80041ce:	e018      	b.n	8004202 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80041d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041d8:	881b      	ldrh	r3, [r3, #0]
 80041da:	001a      	movs	r2, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	05d2      	lsls	r2, r2, #23
 80041e2:	0dd2      	lsrs	r2, r2, #23
 80041e4:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041ea:	1c9a      	adds	r2, r3, #2
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2256      	movs	r2, #86	@ 0x56
 80041f4:	5a9b      	ldrh	r3, [r3, r2]
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	3b01      	subs	r3, #1
 80041fa:	b299      	uxth	r1, r3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2256      	movs	r2, #86	@ 0x56
 8004200:	5299      	strh	r1, [r3, r2]
}
 8004202:	46c0      	nop			@ (mov r8, r8)
 8004204:	46bd      	mov	sp, r7
 8004206:	b00c      	add	sp, #48	@ 0x30
 8004208:	bd80      	pop	{r7, pc}
	...

0800420c <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b08c      	sub	sp, #48	@ 0x30
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2288      	movs	r2, #136	@ 0x88
 8004218:	589b      	ldr	r3, [r3, r2]
 800421a:	2b21      	cmp	r3, #33	@ 0x21
 800421c:	d165      	bne.n	80042ea <UART_TxISR_8BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800421e:	232e      	movs	r3, #46	@ 0x2e
 8004220:	18fb      	adds	r3, r7, r3
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	216a      	movs	r1, #106	@ 0x6a
 8004226:	5a52      	ldrh	r2, [r2, r1]
 8004228:	801a      	strh	r2, [r3, #0]
 800422a:	e059      	b.n	80042e0 <UART_TxISR_8BIT_FIFOEN+0xd4>
    {
      if (huart->TxXferCount == 0U)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2256      	movs	r2, #86	@ 0x56
 8004230:	5a9b      	ldrh	r3, [r3, r2]
 8004232:	b29b      	uxth	r3, r3
 8004234:	2b00      	cmp	r3, #0
 8004236:	d133      	bne.n	80042a0 <UART_TxISR_8BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004238:	f3ef 8310 	mrs	r3, PRIMASK
 800423c:	60fb      	str	r3, [r7, #12]
  return(result);
 800423e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8004240:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004242:	2301      	movs	r3, #1
 8004244:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	f383 8810 	msr	PRIMASK, r3
}
 800424c:	46c0      	nop			@ (mov r8, r8)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	689a      	ldr	r2, [r3, #8]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4926      	ldr	r1, [pc, #152]	@ (80042f4 <UART_TxISR_8BIT_FIFOEN+0xe8>)
 800425a:	400a      	ands	r2, r1
 800425c:	609a      	str	r2, [r3, #8]
 800425e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004260:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	f383 8810 	msr	PRIMASK, r3
}
 8004268:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800426a:	f3ef 8310 	mrs	r3, PRIMASK
 800426e:	61bb      	str	r3, [r7, #24]
  return(result);
 8004270:	69bb      	ldr	r3, [r7, #24]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004272:	627b      	str	r3, [r7, #36]	@ 0x24
 8004274:	2301      	movs	r3, #1
 8004276:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	f383 8810 	msr	PRIMASK, r3
}
 800427e:	46c0      	nop			@ (mov r8, r8)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	2140      	movs	r1, #64	@ 0x40
 800428c:	430a      	orrs	r2, r1
 800428e:	601a      	str	r2, [r3, #0]
 8004290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004292:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004294:	6a3b      	ldr	r3, [r7, #32]
 8004296:	f383 8810 	msr	PRIMASK, r3
}
 800429a:	46c0      	nop			@ (mov r8, r8)

        break; /* force exit loop */
 800429c:	46c0      	nop			@ (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 800429e:	e024      	b.n	80042ea <UART_TxISR_8BIT_FIFOEN+0xde>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	69db      	ldr	r3, [r3, #28]
 80042a6:	2280      	movs	r2, #128	@ 0x80
 80042a8:	4013      	ands	r3, r2
 80042aa:	d013      	beq.n	80042d4 <UART_TxISR_8BIT_FIFOEN+0xc8>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042b0:	781a      	ldrb	r2, [r3, #0]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042bc:	1c5a      	adds	r2, r3, #1
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2256      	movs	r2, #86	@ 0x56
 80042c6:	5a9b      	ldrh	r3, [r3, r2]
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	3b01      	subs	r3, #1
 80042cc:	b299      	uxth	r1, r3
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2256      	movs	r2, #86	@ 0x56
 80042d2:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80042d4:	212e      	movs	r1, #46	@ 0x2e
 80042d6:	187b      	adds	r3, r7, r1
 80042d8:	881a      	ldrh	r2, [r3, #0]
 80042da:	187b      	adds	r3, r7, r1
 80042dc:	3a01      	subs	r2, #1
 80042de:	801a      	strh	r2, [r3, #0]
 80042e0:	232e      	movs	r3, #46	@ 0x2e
 80042e2:	18fb      	adds	r3, r7, r3
 80042e4:	881b      	ldrh	r3, [r3, #0]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d1a0      	bne.n	800422c <UART_TxISR_8BIT_FIFOEN+0x20>
}
 80042ea:	46c0      	nop			@ (mov r8, r8)
 80042ec:	46bd      	mov	sp, r7
 80042ee:	b00c      	add	sp, #48	@ 0x30
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	46c0      	nop			@ (mov r8, r8)
 80042f4:	ff7fffff 	.word	0xff7fffff

080042f8 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b08c      	sub	sp, #48	@ 0x30
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2288      	movs	r2, #136	@ 0x88
 8004304:	589b      	ldr	r3, [r3, r2]
 8004306:	2b21      	cmp	r3, #33	@ 0x21
 8004308:	d16a      	bne.n	80043e0 <UART_TxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800430a:	232e      	movs	r3, #46	@ 0x2e
 800430c:	18fb      	adds	r3, r7, r3
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	216a      	movs	r1, #106	@ 0x6a
 8004312:	5a52      	ldrh	r2, [r2, r1]
 8004314:	801a      	strh	r2, [r3, #0]
 8004316:	e05e      	b.n	80043d6 <UART_TxISR_16BIT_FIFOEN+0xde>
    {
      if (huart->TxXferCount == 0U)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2256      	movs	r2, #86	@ 0x56
 800431c:	5a9b      	ldrh	r3, [r3, r2]
 800431e:	b29b      	uxth	r3, r3
 8004320:	2b00      	cmp	r3, #0
 8004322:	d133      	bne.n	800438c <UART_TxISR_16BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004324:	f3ef 8310 	mrs	r3, PRIMASK
 8004328:	60bb      	str	r3, [r7, #8]
  return(result);
 800432a:	68bb      	ldr	r3, [r7, #8]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800432c:	627b      	str	r3, [r7, #36]	@ 0x24
 800432e:	2301      	movs	r3, #1
 8004330:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	f383 8810 	msr	PRIMASK, r3
}
 8004338:	46c0      	nop			@ (mov r8, r8)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	689a      	ldr	r2, [r3, #8]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4928      	ldr	r1, [pc, #160]	@ (80043e8 <UART_TxISR_16BIT_FIFOEN+0xf0>)
 8004346:	400a      	ands	r2, r1
 8004348:	609a      	str	r2, [r3, #8]
 800434a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800434c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	f383 8810 	msr	PRIMASK, r3
}
 8004354:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004356:	f3ef 8310 	mrs	r3, PRIMASK
 800435a:	617b      	str	r3, [r7, #20]
  return(result);
 800435c:	697b      	ldr	r3, [r7, #20]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800435e:	623b      	str	r3, [r7, #32]
 8004360:	2301      	movs	r3, #1
 8004362:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004364:	69bb      	ldr	r3, [r7, #24]
 8004366:	f383 8810 	msr	PRIMASK, r3
}
 800436a:	46c0      	nop			@ (mov r8, r8)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	2140      	movs	r1, #64	@ 0x40
 8004378:	430a      	orrs	r2, r1
 800437a:	601a      	str	r2, [r3, #0]
 800437c:	6a3b      	ldr	r3, [r7, #32]
 800437e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004380:	69fb      	ldr	r3, [r7, #28]
 8004382:	f383 8810 	msr	PRIMASK, r3
}
 8004386:	46c0      	nop			@ (mov r8, r8)

        break; /* force exit loop */
 8004388:	46c0      	nop			@ (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 800438a:	e029      	b.n	80043e0 <UART_TxISR_16BIT_FIFOEN+0xe8>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	69db      	ldr	r3, [r3, #28]
 8004392:	2280      	movs	r2, #128	@ 0x80
 8004394:	4013      	ands	r3, r2
 8004396:	d018      	beq.n	80043ca <UART_TxISR_16BIT_FIFOEN+0xd2>
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800439c:	62bb      	str	r3, [r7, #40]	@ 0x28
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800439e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043a0:	881b      	ldrh	r3, [r3, #0]
 80043a2:	001a      	movs	r2, r3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	05d2      	lsls	r2, r2, #23
 80043aa:	0dd2      	lsrs	r2, r2, #23
 80043ac:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043b2:	1c9a      	adds	r2, r3, #2
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2256      	movs	r2, #86	@ 0x56
 80043bc:	5a9b      	ldrh	r3, [r3, r2]
 80043be:	b29b      	uxth	r3, r3
 80043c0:	3b01      	subs	r3, #1
 80043c2:	b299      	uxth	r1, r3
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2256      	movs	r2, #86	@ 0x56
 80043c8:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80043ca:	212e      	movs	r1, #46	@ 0x2e
 80043cc:	187b      	adds	r3, r7, r1
 80043ce:	881a      	ldrh	r2, [r3, #0]
 80043d0:	187b      	adds	r3, r7, r1
 80043d2:	3a01      	subs	r2, #1
 80043d4:	801a      	strh	r2, [r3, #0]
 80043d6:	232e      	movs	r3, #46	@ 0x2e
 80043d8:	18fb      	adds	r3, r7, r3
 80043da:	881b      	ldrh	r3, [r3, #0]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d19b      	bne.n	8004318 <UART_TxISR_16BIT_FIFOEN+0x20>
}
 80043e0:	46c0      	nop			@ (mov r8, r8)
 80043e2:	46bd      	mov	sp, r7
 80043e4:	b00c      	add	sp, #48	@ 0x30
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	ff7fffff 	.word	0xff7fffff

080043ec <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b086      	sub	sp, #24
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80043f4:	f3ef 8310 	mrs	r3, PRIMASK
 80043f8:	60bb      	str	r3, [r7, #8]
  return(result);
 80043fa:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80043fc:	617b      	str	r3, [r7, #20]
 80043fe:	2301      	movs	r3, #1
 8004400:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	f383 8810 	msr	PRIMASK, r3
}
 8004408:	46c0      	nop			@ (mov r8, r8)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	2140      	movs	r1, #64	@ 0x40
 8004416:	438a      	bics	r2, r1
 8004418:	601a      	str	r2, [r3, #0]
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	f383 8810 	msr	PRIMASK, r3
}
 8004424:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2288      	movs	r2, #136	@ 0x88
 800442a:	2120      	movs	r1, #32
 800442c:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2200      	movs	r2, #0
 8004432:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	0018      	movs	r0, r3
 8004438:	f7fc fa6e 	bl	8000918 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800443c:	46c0      	nop			@ (mov r8, r8)
 800443e:	46bd      	mov	sp, r7
 8004440:	b006      	add	sp, #24
 8004442:	bd80      	pop	{r7, pc}

08004444 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b086      	sub	sp, #24
 8004448:	af00      	add	r7, sp, #0
 800444a:	60f8      	str	r0, [r7, #12]
 800444c:	60b9      	str	r1, [r7, #8]
 800444e:	607a      	str	r2, [r7, #4]
 8004450:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d101      	bne.n	800445c <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	e05d      	b.n	8004518 <HAL_RS485Ex_Init+0xd4>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2288      	movs	r2, #136	@ 0x88
 8004460:	589b      	ldr	r3, [r3, r2]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d107      	bne.n	8004476 <HAL_RS485Ex_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2284      	movs	r2, #132	@ 0x84
 800446a:	2100      	movs	r1, #0
 800446c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	0018      	movs	r0, r3
 8004472:	f7fc fe2f 	bl	80010d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2288      	movs	r2, #136	@ 0x88
 800447a:	2124      	movs	r1, #36	@ 0x24
 800447c:	5099      	str	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	2101      	movs	r1, #1
 800448a:	438a      	bics	r2, r1
 800448c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004492:	2b00      	cmp	r3, #0
 8004494:	d003      	beq.n	800449e <HAL_RS485Ex_Init+0x5a>
  {
    UART_AdvFeatureConfig(huart);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	0018      	movs	r0, r3
 800449a:	f7ff f947 	bl	800372c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	0018      	movs	r0, r3
 80044a2:	f7fe ffc5 	bl	8003430 <UART_SetConfig>
 80044a6:	0003      	movs	r3, r0
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d101      	bne.n	80044b0 <HAL_RS485Ex_Init+0x6c>
  {
    return HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e033      	b.n	8004518 <HAL_RS485Ex_Init+0xd4>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	689a      	ldr	r2, [r3, #8]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	2180      	movs	r1, #128	@ 0x80
 80044bc:	01c9      	lsls	r1, r1, #7
 80044be:	430a      	orrs	r2, r1
 80044c0:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	4a15      	ldr	r2, [pc, #84]	@ (8004520 <HAL_RS485Ex_Init+0xdc>)
 80044ca:	4013      	ands	r3, r2
 80044cc:	0019      	movs	r1, r3
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	68ba      	ldr	r2, [r7, #8]
 80044d4:	430a      	orrs	r2, r1
 80044d6:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	055b      	lsls	r3, r3, #21
 80044dc:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	041b      	lsls	r3, r3, #16
 80044e2:	697a      	ldr	r2, [r7, #20]
 80044e4:	4313      	orrs	r3, r2
 80044e6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a0d      	ldr	r2, [pc, #52]	@ (8004524 <HAL_RS485Ex_Init+0xe0>)
 80044f0:	4013      	ands	r3, r2
 80044f2:	0019      	movs	r1, r3
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	697a      	ldr	r2, [r7, #20]
 80044fa:	430a      	orrs	r2, r1
 80044fc:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	2101      	movs	r1, #1
 800450a:	430a      	orrs	r2, r1
 800450c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	0018      	movs	r0, r3
 8004512:	f7ff f9bf 	bl	8003894 <UART_CheckIdleState>
 8004516:	0003      	movs	r3, r0
}
 8004518:	0018      	movs	r0, r3
 800451a:	46bd      	mov	sp, r7
 800451c:	b006      	add	sp, #24
 800451e:	bd80      	pop	{r7, pc}
 8004520:	ffff7fff 	.word	0xffff7fff
 8004524:	fc00ffff 	.word	0xfc00ffff

08004528 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b082      	sub	sp, #8
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004530:	46c0      	nop			@ (mov r8, r8)
 8004532:	46bd      	mov	sp, r7
 8004534:	b002      	add	sp, #8
 8004536:	bd80      	pop	{r7, pc}

08004538 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b082      	sub	sp, #8
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004540:	46c0      	nop			@ (mov r8, r8)
 8004542:	46bd      	mov	sp, r7
 8004544:	b002      	add	sp, #8
 8004546:	bd80      	pop	{r7, pc}

08004548 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b082      	sub	sp, #8
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004550:	46c0      	nop			@ (mov r8, r8)
 8004552:	46bd      	mov	sp, r7
 8004554:	b002      	add	sp, #8
 8004556:	bd80      	pop	{r7, pc}

08004558 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2284      	movs	r2, #132	@ 0x84
 8004564:	5c9b      	ldrb	r3, [r3, r2]
 8004566:	2b01      	cmp	r3, #1
 8004568:	d101      	bne.n	800456e <HAL_UARTEx_DisableFifoMode+0x16>
 800456a:	2302      	movs	r3, #2
 800456c:	e027      	b.n	80045be <HAL_UARTEx_DisableFifoMode+0x66>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2284      	movs	r2, #132	@ 0x84
 8004572:	2101      	movs	r1, #1
 8004574:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2288      	movs	r2, #136	@ 0x88
 800457a:	2124      	movs	r1, #36	@ 0x24
 800457c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	2101      	movs	r1, #1
 8004592:	438a      	bics	r2, r1
 8004594:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	4a0b      	ldr	r2, [pc, #44]	@ (80045c8 <HAL_UARTEx_DisableFifoMode+0x70>)
 800459a:	4013      	ands	r3, r2
 800459c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	68fa      	ldr	r2, [r7, #12]
 80045aa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2288      	movs	r2, #136	@ 0x88
 80045b0:	2120      	movs	r1, #32
 80045b2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2284      	movs	r2, #132	@ 0x84
 80045b8:	2100      	movs	r1, #0
 80045ba:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80045bc:	2300      	movs	r3, #0
}
 80045be:	0018      	movs	r0, r3
 80045c0:	46bd      	mov	sp, r7
 80045c2:	b004      	add	sp, #16
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	46c0      	nop			@ (mov r8, r8)
 80045c8:	dfffffff 	.word	0xdfffffff

080045cc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b084      	sub	sp, #16
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2284      	movs	r2, #132	@ 0x84
 80045da:	5c9b      	ldrb	r3, [r3, r2]
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d101      	bne.n	80045e4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80045e0:	2302      	movs	r3, #2
 80045e2:	e02e      	b.n	8004642 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2284      	movs	r2, #132	@ 0x84
 80045e8:	2101      	movs	r1, #1
 80045ea:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2288      	movs	r2, #136	@ 0x88
 80045f0:	2124      	movs	r1, #36	@ 0x24
 80045f2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	2101      	movs	r1, #1
 8004608:	438a      	bics	r2, r1
 800460a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	00db      	lsls	r3, r3, #3
 8004614:	08d9      	lsrs	r1, r3, #3
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	683a      	ldr	r2, [r7, #0]
 800461c:	430a      	orrs	r2, r1
 800461e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	0018      	movs	r0, r3
 8004624:	f000 f8bc 	bl	80047a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	68fa      	ldr	r2, [r7, #12]
 800462e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2288      	movs	r2, #136	@ 0x88
 8004634:	2120      	movs	r1, #32
 8004636:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2284      	movs	r2, #132	@ 0x84
 800463c:	2100      	movs	r1, #0
 800463e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004640:	2300      	movs	r3, #0
}
 8004642:	0018      	movs	r0, r3
 8004644:	46bd      	mov	sp, r7
 8004646:	b004      	add	sp, #16
 8004648:	bd80      	pop	{r7, pc}
	...

0800464c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b084      	sub	sp, #16
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2284      	movs	r2, #132	@ 0x84
 800465a:	5c9b      	ldrb	r3, [r3, r2]
 800465c:	2b01      	cmp	r3, #1
 800465e:	d101      	bne.n	8004664 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004660:	2302      	movs	r3, #2
 8004662:	e02f      	b.n	80046c4 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2284      	movs	r2, #132	@ 0x84
 8004668:	2101      	movs	r1, #1
 800466a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2288      	movs	r2, #136	@ 0x88
 8004670:	2124      	movs	r1, #36	@ 0x24
 8004672:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	2101      	movs	r1, #1
 8004688:	438a      	bics	r2, r1
 800468a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	4a0e      	ldr	r2, [pc, #56]	@ (80046cc <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004694:	4013      	ands	r3, r2
 8004696:	0019      	movs	r1, r3
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	683a      	ldr	r2, [r7, #0]
 800469e:	430a      	orrs	r2, r1
 80046a0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	0018      	movs	r0, r3
 80046a6:	f000 f87b 	bl	80047a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	68fa      	ldr	r2, [r7, #12]
 80046b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2288      	movs	r2, #136	@ 0x88
 80046b6:	2120      	movs	r1, #32
 80046b8:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2284      	movs	r2, #132	@ 0x84
 80046be:	2100      	movs	r1, #0
 80046c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80046c2:	2300      	movs	r3, #0
}
 80046c4:	0018      	movs	r0, r3
 80046c6:	46bd      	mov	sp, r7
 80046c8:	b004      	add	sp, #16
 80046ca:	bd80      	pop	{r7, pc}
 80046cc:	f1ffffff 	.word	0xf1ffffff

080046d0 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80046d0:	b5b0      	push	{r4, r5, r7, lr}
 80046d2:	b08a      	sub	sp, #40	@ 0x28
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	60b9      	str	r1, [r7, #8]
 80046da:	1dbb      	adds	r3, r7, #6
 80046dc:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	228c      	movs	r2, #140	@ 0x8c
 80046e2:	589b      	ldr	r3, [r3, r2]
 80046e4:	2b20      	cmp	r3, #32
 80046e6:	d156      	bne.n	8004796 <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d003      	beq.n	80046f6 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80046ee:	1dbb      	adds	r3, r7, #6
 80046f0:	881b      	ldrh	r3, [r3, #0]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d101      	bne.n	80046fa <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e04e      	b.n	8004798 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	689a      	ldr	r2, [r3, #8]
 80046fe:	2380      	movs	r3, #128	@ 0x80
 8004700:	015b      	lsls	r3, r3, #5
 8004702:	429a      	cmp	r2, r3
 8004704:	d109      	bne.n	800471a <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d105      	bne.n	800471a <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	2201      	movs	r2, #1
 8004712:	4013      	ands	r3, r2
 8004714:	d001      	beq.n	800471a <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	e03e      	b.n	8004798 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2201      	movs	r2, #1
 800471e:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2200      	movs	r2, #0
 8004724:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8004726:	2527      	movs	r5, #39	@ 0x27
 8004728:	197c      	adds	r4, r7, r5
 800472a:	1dbb      	adds	r3, r7, #6
 800472c:	881a      	ldrh	r2, [r3, #0]
 800472e:	68b9      	ldr	r1, [r7, #8]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	0018      	movs	r0, r3
 8004734:	f7ff f9c8 	bl	8003ac8 <UART_Start_Receive_DMA>
 8004738:	0003      	movs	r3, r0
 800473a:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800473c:	197b      	adds	r3, r7, r5
 800473e:	781b      	ldrb	r3, [r3, #0]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d124      	bne.n	800478e <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004748:	2b01      	cmp	r3, #1
 800474a:	d11c      	bne.n	8004786 <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	2210      	movs	r2, #16
 8004752:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004754:	f3ef 8310 	mrs	r3, PRIMASK
 8004758:	617b      	str	r3, [r7, #20]
  return(result);
 800475a:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800475c:	623b      	str	r3, [r7, #32]
 800475e:	2301      	movs	r3, #1
 8004760:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004762:	69bb      	ldr	r3, [r7, #24]
 8004764:	f383 8810 	msr	PRIMASK, r3
}
 8004768:	46c0      	nop			@ (mov r8, r8)
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2110      	movs	r1, #16
 8004776:	430a      	orrs	r2, r1
 8004778:	601a      	str	r2, [r3, #0]
 800477a:	6a3b      	ldr	r3, [r7, #32]
 800477c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800477e:	69fb      	ldr	r3, [r7, #28]
 8004780:	f383 8810 	msr	PRIMASK, r3
}
 8004784:	e003      	b.n	800478e <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8004786:	2327      	movs	r3, #39	@ 0x27
 8004788:	18fb      	adds	r3, r7, r3
 800478a:	2201      	movs	r2, #1
 800478c:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 800478e:	2327      	movs	r3, #39	@ 0x27
 8004790:	18fb      	adds	r3, r7, r3
 8004792:	781b      	ldrb	r3, [r3, #0]
 8004794:	e000      	b.n	8004798 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 8004796:	2302      	movs	r3, #2
  }
}
 8004798:	0018      	movs	r0, r3
 800479a:	46bd      	mov	sp, r7
 800479c:	b00a      	add	sp, #40	@ 0x28
 800479e:	bdb0      	pop	{r4, r5, r7, pc}

080047a0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80047a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047a2:	b085      	sub	sp, #20
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d108      	bne.n	80047c2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	226a      	movs	r2, #106	@ 0x6a
 80047b4:	2101      	movs	r1, #1
 80047b6:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2268      	movs	r2, #104	@ 0x68
 80047bc:	2101      	movs	r1, #1
 80047be:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80047c0:	e043      	b.n	800484a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80047c2:	260f      	movs	r6, #15
 80047c4:	19bb      	adds	r3, r7, r6
 80047c6:	2208      	movs	r2, #8
 80047c8:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80047ca:	200e      	movs	r0, #14
 80047cc:	183b      	adds	r3, r7, r0
 80047ce:	2208      	movs	r2, #8
 80047d0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	0e5b      	lsrs	r3, r3, #25
 80047da:	b2da      	uxtb	r2, r3
 80047dc:	240d      	movs	r4, #13
 80047de:	193b      	adds	r3, r7, r4
 80047e0:	2107      	movs	r1, #7
 80047e2:	400a      	ands	r2, r1
 80047e4:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	0f5b      	lsrs	r3, r3, #29
 80047ee:	b2da      	uxtb	r2, r3
 80047f0:	250c      	movs	r5, #12
 80047f2:	197b      	adds	r3, r7, r5
 80047f4:	2107      	movs	r1, #7
 80047f6:	400a      	ands	r2, r1
 80047f8:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80047fa:	183b      	adds	r3, r7, r0
 80047fc:	781b      	ldrb	r3, [r3, #0]
 80047fe:	197a      	adds	r2, r7, r5
 8004800:	7812      	ldrb	r2, [r2, #0]
 8004802:	4914      	ldr	r1, [pc, #80]	@ (8004854 <UARTEx_SetNbDataToProcess+0xb4>)
 8004804:	5c8a      	ldrb	r2, [r1, r2]
 8004806:	435a      	muls	r2, r3
 8004808:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800480a:	197b      	adds	r3, r7, r5
 800480c:	781b      	ldrb	r3, [r3, #0]
 800480e:	4a12      	ldr	r2, [pc, #72]	@ (8004858 <UARTEx_SetNbDataToProcess+0xb8>)
 8004810:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004812:	0019      	movs	r1, r3
 8004814:	f7fb fd02 	bl	800021c <__divsi3>
 8004818:	0003      	movs	r3, r0
 800481a:	b299      	uxth	r1, r3
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	226a      	movs	r2, #106	@ 0x6a
 8004820:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004822:	19bb      	adds	r3, r7, r6
 8004824:	781b      	ldrb	r3, [r3, #0]
 8004826:	193a      	adds	r2, r7, r4
 8004828:	7812      	ldrb	r2, [r2, #0]
 800482a:	490a      	ldr	r1, [pc, #40]	@ (8004854 <UARTEx_SetNbDataToProcess+0xb4>)
 800482c:	5c8a      	ldrb	r2, [r1, r2]
 800482e:	435a      	muls	r2, r3
 8004830:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8004832:	193b      	adds	r3, r7, r4
 8004834:	781b      	ldrb	r3, [r3, #0]
 8004836:	4a08      	ldr	r2, [pc, #32]	@ (8004858 <UARTEx_SetNbDataToProcess+0xb8>)
 8004838:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800483a:	0019      	movs	r1, r3
 800483c:	f7fb fcee 	bl	800021c <__divsi3>
 8004840:	0003      	movs	r3, r0
 8004842:	b299      	uxth	r1, r3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2268      	movs	r2, #104	@ 0x68
 8004848:	5299      	strh	r1, [r3, r2]
}
 800484a:	46c0      	nop			@ (mov r8, r8)
 800484c:	46bd      	mov	sp, r7
 800484e:	b005      	add	sp, #20
 8004850:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004852:	46c0      	nop			@ (mov r8, r8)
 8004854:	08004b80 	.word	0x08004b80
 8004858:	08004b88 	.word	0x08004b88

0800485c <memset>:
 800485c:	0003      	movs	r3, r0
 800485e:	1882      	adds	r2, r0, r2
 8004860:	4293      	cmp	r3, r2
 8004862:	d100      	bne.n	8004866 <memset+0xa>
 8004864:	4770      	bx	lr
 8004866:	7019      	strb	r1, [r3, #0]
 8004868:	3301      	adds	r3, #1
 800486a:	e7f9      	b.n	8004860 <memset+0x4>

0800486c <__libc_init_array>:
 800486c:	b570      	push	{r4, r5, r6, lr}
 800486e:	2600      	movs	r6, #0
 8004870:	4c0c      	ldr	r4, [pc, #48]	@ (80048a4 <__libc_init_array+0x38>)
 8004872:	4d0d      	ldr	r5, [pc, #52]	@ (80048a8 <__libc_init_array+0x3c>)
 8004874:	1b64      	subs	r4, r4, r5
 8004876:	10a4      	asrs	r4, r4, #2
 8004878:	42a6      	cmp	r6, r4
 800487a:	d109      	bne.n	8004890 <__libc_init_array+0x24>
 800487c:	2600      	movs	r6, #0
 800487e:	f000 f823 	bl	80048c8 <_init>
 8004882:	4c0a      	ldr	r4, [pc, #40]	@ (80048ac <__libc_init_array+0x40>)
 8004884:	4d0a      	ldr	r5, [pc, #40]	@ (80048b0 <__libc_init_array+0x44>)
 8004886:	1b64      	subs	r4, r4, r5
 8004888:	10a4      	asrs	r4, r4, #2
 800488a:	42a6      	cmp	r6, r4
 800488c:	d105      	bne.n	800489a <__libc_init_array+0x2e>
 800488e:	bd70      	pop	{r4, r5, r6, pc}
 8004890:	00b3      	lsls	r3, r6, #2
 8004892:	58eb      	ldr	r3, [r5, r3]
 8004894:	4798      	blx	r3
 8004896:	3601      	adds	r6, #1
 8004898:	e7ee      	b.n	8004878 <__libc_init_array+0xc>
 800489a:	00b3      	lsls	r3, r6, #2
 800489c:	58eb      	ldr	r3, [r5, r3]
 800489e:	4798      	blx	r3
 80048a0:	3601      	adds	r6, #1
 80048a2:	e7f2      	b.n	800488a <__libc_init_array+0x1e>
 80048a4:	08004b90 	.word	0x08004b90
 80048a8:	08004b90 	.word	0x08004b90
 80048ac:	08004b94 	.word	0x08004b94
 80048b0:	08004b90 	.word	0x08004b90

080048b4 <memcpy>:
 80048b4:	2300      	movs	r3, #0
 80048b6:	b510      	push	{r4, lr}
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d100      	bne.n	80048be <memcpy+0xa>
 80048bc:	bd10      	pop	{r4, pc}
 80048be:	5ccc      	ldrb	r4, [r1, r3]
 80048c0:	54c4      	strb	r4, [r0, r3]
 80048c2:	3301      	adds	r3, #1
 80048c4:	e7f8      	b.n	80048b8 <memcpy+0x4>
	...

080048c8 <_init>:
 80048c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048ca:	46c0      	nop			@ (mov r8, r8)
 80048cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048ce:	bc08      	pop	{r3}
 80048d0:	469e      	mov	lr, r3
 80048d2:	4770      	bx	lr

080048d4 <_fini>:
 80048d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048d6:	46c0      	nop			@ (mov r8, r8)
 80048d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048da:	bc08      	pop	{r3}
 80048dc:	469e      	mov	lr, r3
 80048de:	4770      	bx	lr
